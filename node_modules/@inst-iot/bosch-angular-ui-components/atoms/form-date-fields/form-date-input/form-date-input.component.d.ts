import { AfterViewInit, ElementRef, InjectionToken, OnChanges, OnDestroy, QueryList, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { FormValidationMessageDirective } from '../../form-fields/form-validation-message.directive';
import { emptyFunction } from '../../form-fields/forms-util';
export declare const FLATPICKR_DEFAULT_OPTIONS: InjectionToken<any>;
/**
 * Displays a input for flatpickr
 * The value, is a ISO Date String or an array of ISO Date Strings.
 */
export declare class FormDateInputComponent implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {
    private renderer;
    private elementRef;
    private defaultOptions;
    label: string | TemplateRef<any>;
    name: string;
    type: string;
    id: string;
    readonly: any;
    messages: QueryList<FormValidationMessageDirective>;
    input: ElementRef;
    private picker;
    /**
     * Options for Flatpickr
     * @see https://flatpickr.js.org/options/
     */
    options: any;
    /**
     * Given, when this is the start date.
     * Start input is responsible for options
     */
    rangeEnd: FormDateInputComponent;
    onChange: typeof emptyFunction;
    onTouched: typeof emptyFunction;
    constructor(renderer: Renderer2, elementRef: ElementRef, defaultOptions: any);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    isReadonly(): boolean;
    updateValue(value: any): void;
    updateEndRange(): void;
    checkValue(value: any): void;
    isLabelTemplate(): boolean;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    toggle(): void;
    close(): void;
}
