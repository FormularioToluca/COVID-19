import { ElementRef, OnInit, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { ControlValueAccessor } from '@angular/forms';
import { emptyFunction } from '../forms-util';
export declare class MultiSelectOptionDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
}
export declare class MultiSelectTitleDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
}
export interface ItemWithState {
    item: any;
    state: any;
}
export interface StateValues {
    [key: string]: any;
}
export interface TitleContext {
    $implicit: ItemWithState[];
    count: number;
    firstItem: ItemWithState;
    states: any;
}
/**
 * Use this component to have multiple selections.
 * The value is a map of id -> state.
 * The items are an array of objects.
 * To identify the id of an object from the items array, provide the idField.
 */
export declare class FormMultiSelectComponent implements OnInit, ControlValueAccessor {
    private renderer;
    private elementRef;
    name: string;
    label: string | TemplateRef<any>;
    id: string;
    disabled: boolean;
    selectAllLabel: string;
    messages: QueryList<FormValidationMessageDirective>;
    _items: ItemWithState[];
    private isMouseOver;
    /**
     * Property name of the property that contains the unique value of an item
     * Otherwise the JSON rep is used as value
     */
    idField: string;
    /**
     * What states should be offered per item
     * check: just checked(true) and unchecked(false)
     * optCheck: unchecked(null), include(true), exclude(false)
     */
    statesMode: 'check' | 'optCheck';
    numStates: number;
    private _states;
    maxItemsPreview: number;
    option: MultiSelectOptionDirective;
    title: MultiSelectTitleDirective;
    allStates: any;
    private countNotDefState;
    private firstNotDefStateItem;
    private _value;
    titleContext: TitleContext;
    getItemTrackId: any;
    onChange: typeof emptyFunction;
    onTouched: typeof emptyFunction;
    constructor(renderer: Renderer2, elementRef: ElementRef);
    ngOnInit(): void;
    isLabelTemplate(): boolean;
    items: object[];
    getItemId(item: any): any;
    getStates(): boolean[];
    allStatesChange(state: any): void;
    updateStateOfItem(item: ItemWithState, state: any): void;
    getCurrentStatesObject(): {};
    doOnChanges(): void;
    notifyChanges(): void;
    mouseover(): void;
    mouseleave(): void;
    writeValue(items: any): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
}
