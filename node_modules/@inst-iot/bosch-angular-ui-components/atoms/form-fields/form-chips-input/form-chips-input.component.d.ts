import { EventEmitter, TemplateRef, Renderer2, ElementRef, QueryList } from '@angular/core';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { ControlValueAccessor } from '@angular/forms';
import { emptyFunction } from '../forms-util';
export declare class FormChipsInputComponent implements ControlValueAccessor {
    private renderer;
    private elementRef;
    chips: string[];
    chipInput: string;
    id: string;
    disabled: boolean;
    activeIndex: any;
    private mouseIn;
    deletingLast: boolean;
    label: string | TemplateRef<any>;
    placeholder: string;
    setFocus: string;
    chipAdded: EventEmitter<string>;
    chipDeleted: EventEmitter<string>;
    messages: QueryList<FormValidationMessageDirective>;
    input: ElementRef;
    chipcontainer: ElementRef;
    onChange: typeof emptyFunction;
    onTouched: typeof emptyFunction;
    onMouseEnter(): void;
    onMouseLeave(): void;
    onAnyClick(): void;
    onKeydownHandler(event: KeyboardEvent): void;
    constructor(renderer: Renderer2, elementRef: ElementRef);
    isLabelTemplate(): boolean;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    checkState(): void;
    submit(): void;
    onKeyDown(e: any): void;
    onBlur(): void;
    addChip(chip: string): void;
    removeChip(chip: string): void;
    removeLast(): void;
    removeAtIndex(i: number): void;
}
