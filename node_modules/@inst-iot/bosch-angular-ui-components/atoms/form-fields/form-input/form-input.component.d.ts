import { AfterViewInit, ChangeDetectorRef, ElementRef, InjectionToken, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { ControlValueAccessor } from '@angular/forms';
import { emptyFunction } from '../forms-util';
export interface CustomValueConverter {
    modelToValue(model: any): string;
    valueToModel(value: string): any;
}
export declare const CUSTOM_VALUE_CONVERTER: InjectionToken<CustomValueConverter>;
export declare class FormInputComponent implements ControlValueAccessor, AfterViewInit {
    private renderer;
    private elementRef;
    private valueConverter;
    private cd;
    name: string;
    placeholder: string;
    label: string | TemplateRef<any>;
    type: string;
    id: string;
    readonly: any;
    autocomplete: string;
    /**
     * CSS Classes for an icon
     */
    icon: string;
    autofocus: boolean;
    messages: QueryList<FormValidationMessageDirective>;
    input: ElementRef;
    onChange: typeof emptyFunction;
    onTouched: typeof emptyFunction;
    constructor(renderer: Renderer2, elementRef: ElementRef, valueConverter: CustomValueConverter, cd: ChangeDetectorRef);
    ngAfterViewInit(): void;
    focus(): void;
    updateIcon(icon: string): void;
    isReadonly(): boolean;
    updateValue(value: any): void;
    checkValue(value: any): void;
    isLabelTemplate(): boolean;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    maxlength: string;
}
