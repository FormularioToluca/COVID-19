import { AfterViewInit, ComponentFactoryResolver, Injector, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';
import { Observable } from 'rxjs';
import { DropdownDirective } from '../../dropdown/dropdown.directive';
import { NgControl } from '@angular/forms';
import { FormInputComponent } from './form-input.component';
export declare class FormInputAutocompleteDirective extends DropdownDirective implements OnInit, OnDestroy, AfterViewInit {
    private _factoryResolver;
    private injector;
    private control;
    /**
     * Function that is called each time the value has changed.
     * It returns an observable, which result is provided to the dropdown list template
     */
    rbFormInputAutocomplete: (value: string) => Observable<string[]> | null;
    /**
     * A template which receives a context with the following properties:
     * - list: List of results
     * - active: The currently active value
     * - focus: The currently focused value
     * - select: The function to call with the selected value
     */
    rbAutocompleteList: TemplateRef<any>;
    /**
     * Should the dropdown open on initial click without any value change
     */
    rbInitialOpen: boolean;
    rbDebounceTime: number;
    private destroy;
    loading: boolean;
    error: any;
    private instance;
    private lastResult;
    private focus;
    private input;
    private noSearchFor;
    constructor(_factoryResolver: ComponentFactoryResolver, injector: Injector, viewContainerRef: ViewContainerRef, control: NgControl, inputs: FormInputComponent[]);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    updateLoading(loading: boolean, error: any): void;
    select(value: string): void;
    onKeyUp(e: KeyboardEvent): void;
    private moveFocus;
    private updateContext;
    ngOnDestroy(): void;
}
