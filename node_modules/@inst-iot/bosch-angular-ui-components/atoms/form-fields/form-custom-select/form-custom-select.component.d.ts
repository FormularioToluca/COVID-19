import { AfterViewInit, ElementRef, OnDestroy, OnInit, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { emptyFunction } from '../forms-util';
import { MultiSelectOptionDirective, MultiSelectTitleDirective } from '../form-multi-select/form-multi-select.component';
import { Subject } from 'rxjs';
import { FormSelectAction } from './form-custom-select.model';
import { FormSelectOptionComponent } from './form-select-option/form-select-option.component';
export declare function customSelectSelectorFactory(): Subject<FormSelectAction>;
/**
 * This component offers a select field, that can be heavily customized.
 * The easy way would to just add options like this:
 * <rb-form-select-option [value]=""></rb-form-select-option>
 *
 * But you can also provide a selectionTpl which is a ng-template that is used to show the options in the dropdown.
 * It gets a context, that contains a select() function that can be used to provide the value for the ngModel.
 */
export declare class FormCustomSelectComponent implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor {
    private renderer;
    private elementRef;
    private selectSubject;
    name: string;
    label: string | TemplateRef<any>;
    id: string;
    disabled: boolean;
    selectionTpl: TemplateRef<any>;
    autoClose: boolean;
    messages: QueryList<FormValidationMessageDirective>;
    private isMouseOver;
    option: MultiSelectOptionDirective;
    title: MultiSelectTitleDirective;
    options: QueryList<FormSelectOptionComponent>;
    activeElement: ElementRef;
    onChange: typeof emptyFunction;
    onTouched: typeof emptyFunction;
    updateValue: any;
    private selectSub;
    private value;
    constructor(renderer: Renderer2, elementRef: ElementRef, selectSubject: Subject<FormSelectAction>);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    isLabelTemplate(): boolean;
    mouseover(): void;
    mouseleave(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    checkValue(value: any): void;
    updateCurrentLabel(value: any): void;
}
