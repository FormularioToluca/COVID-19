import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Injector, TemplateRef, Type } from '@angular/core';
import { ModalComponent, ModalOptions } from './modal.component';
export interface OpenModal {
    componentRef: ComponentRef<ModalComponent>;
    onClose: (reason?: any) => void;
}
export interface ComponentModal<T> {
    instance: T;
    result: Promise<any>;
}
export declare class ModalService {
    private factoryResolver;
    private injector;
    private appRef;
    backdrop: Element;
    container: Element;
    private componentFactory;
    private openComponents;
    private keyListener;
    private focusListener;
    constructor(factoryResolver: ComponentFactoryResolver, injector: Injector, appRef: ApplicationRef);
    private readonly appRoot;
    /**
     * Opens a component in a modal. Creates the component instance.
     * Provide an injector in case the ModalService is not instantiated with the Injector that knows the Component.
     */
    openComponent<T>(component: Type<T>, options?: ModalOptions, injector?: Injector): ComponentModal<T>;
    open(content: string | TemplateRef<any> | Type<any> | ComponentRef<any>, options?: ModalOptions): Promise<any>;
    close(reason?: any): void;
    private nonButtonClose;
    private ensureListeners;
    private removeListeners;
    private lastOpenModal;
    private lastOpenModalElement;
    private lastOpenModalInstance;
}
