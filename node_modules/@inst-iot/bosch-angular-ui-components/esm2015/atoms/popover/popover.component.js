import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, HostListener, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { getAbsolutePosition } from '../../utils/positionUtils';
let PopoverComponent = class PopoverComponent {
    constructor() {
        this.primaryPos = 'bottom';
        this.close = new EventEmitter();
        this.mouseIn = false;
        this.initialized = false;
        this.context = {
            close: this.doClose.bind(this)
        };
    }
    onMouseEnter() {
        this.mouseIn = true;
    }
    onMouseLeave() {
        this.mouseIn = false;
    }
    onAnyClick() {
        if (!this.mouseIn && this.initialized) {
            this.close.next('click');
        }
    }
    onResize() {
        this.positionToAnchor();
    }
    ngOnInit() {
        setTimeout(() => {
            this.initialized = true;
            this.positionToAnchor();
        });
        this.positionToAnchor();
    }
    ngAfterViewInit() {
        this.positionToAnchor();
    }
    doClose() {
        this.close.next();
    }
    positionToAnchor() {
        if (!this.anchor || !this.popoverElementRef) {
            return;
        }
        const a = this.anchor instanceof HTMLElement ? this.anchor : this.anchor.nativeElement;
        const pop = this.popoverElementRef.nativeElement;
        const arrow = this.arrowElementRef.nativeElement;
        const anchorPos = getAbsolutePosition(a);
        if (this.primaryPos === 'top' || this.primaryPos === 'bottom') {
            anchorPos.x += a.offsetWidth / 2;
            let isBottom = this.primaryPos === 'bottom';
            const pos = {
                x: anchorPos.x - pop.offsetWidth / 2,
                y: 0
            };
            if (!isBottom) {
                pos.y = anchorPos.y - pop.offsetHeight - arrow.offsetHeight / 2;
                if (pos.y < 0) {
                    isBottom = true;
                }
            }
            if (isBottom) {
                pos.y = anchorPos.y + a.offsetHeight + arrow.offsetHeight / 2;
                arrow.classList.remove('bottom');
            }
            else {
                arrow.classList.add('bottom');
            }
            if (pos.x + pop.offsetWidth > window.innerWidth) {
                pos.x = window.innerWidth - pop.offsetWidth;
            }
            if (pos.x < 0) {
                pos.x = 0;
            }
            const popParentPos = getAbsolutePosition(pop.offsetParent);
            pos.y -= popParentPos.y;
            pos.x -= popParentPos.x;
            pop.style.top = pos.y + 'px';
            pop.style.left = pos.x + 'px';
            const arrowX = anchorPos.x - (pos.x + popParentPos.x) - arrow.offsetWidth / 2;
            arrow.style.left = arrowX + 'px';
        }
        if (this.primaryPos === 'left' || this.primaryPos === 'right') {
            anchorPos.y += a.offsetHeight / 2;
            let isRight = this.primaryPos === 'right';
            const pos = {
                x: 0,
                y: anchorPos.y - pop.offsetHeight / 2,
            };
            if (!isRight) {
                pos.x = anchorPos.x - pop.offsetWidth - arrow.offsetWidth / 2;
                if (pos.x < 0) {
                    isRight = true;
                }
            }
            if (isRight) {
                pos.x = anchorPos.x + a.offsetWidth + arrow.offsetWidth / 2;
                arrow.classList.remove('right');
                arrow.classList.add('left');
            }
            else {
                arrow.classList.add('right');
                arrow.classList.remove('left');
            }
            if (pos.y < 0) {
                pos.y = 0;
            }
            const popParentPos = getAbsolutePosition(pop.offsetParent);
            pos.y -= popParentPos.y;
            pos.x -= popParentPos.x;
            pop.style.top = pos.y + 'px';
            pop.style.left = pos.x + 'px';
            const arrowY = anchorPos.y - (pos.y + popParentPos.y) - arrow.offsetHeight / 2;
            arrow.style.top = arrowY + 'px';
        }
    }
    isTemplate() {
        return this.content instanceof TemplateRef;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], PopoverComponent.prototype, "anchor", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], PopoverComponent.prototype, "content", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], PopoverComponent.prototype, "primaryPos", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], PopoverComponent.prototype, "close", void 0);
tslib_1.__decorate([
    ViewChild('popover', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PopoverComponent.prototype, "popoverElementRef", void 0);
tslib_1.__decorate([
    ViewChild('arrow', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PopoverComponent.prototype, "arrowElementRef", void 0);
tslib_1.__decorate([
    HostListener('mouseenter'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], PopoverComponent.prototype, "onMouseEnter", null);
tslib_1.__decorate([
    HostListener('mouseleave'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], PopoverComponent.prototype, "onMouseLeave", null);
tslib_1.__decorate([
    HostListener('window:click'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], PopoverComponent.prototype, "onAnyClick", null);
tslib_1.__decorate([
    HostListener('window:resize'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], PopoverComponent.prototype, "onResize", null);
PopoverComponent = tslib_1.__decorate([
    Component({
        selector: 'rb-popover',
        template: "<div class=\"rb-popover\" #popover>\r\n  <div class=\"rb-popover-arrow\" #arrow></div>\r\n  <div class=\"rb-popover-content\" *ngIf=\"isTemplate()\">\r\n    <ng-container *ngTemplateOutlet=\"content; context: context\"></ng-container>\r\n  </div>\r\n  <div class=\"rb-popover-content-text\" *ngIf=\"!isTemplate()\">\r\n    {{content}}\r\n  </div>\r\n</div>\r\n"
    }),
    tslib_1.__metadata("design:paramtypes", [])
], PopoverComponent);
export { PopoverComponent };
//# sourceMappingURL=data:application/json;base64,