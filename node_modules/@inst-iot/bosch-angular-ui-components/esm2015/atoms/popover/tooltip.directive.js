import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, HostListener, Input, ViewContainerRef } from '@angular/core';
import { PopoverComponent } from './popover.component';
let TooltipDirective = class TooltipDirective {
    constructor(factoryResolver, viewContainerRef) {
        this.factoryResolver = factoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.position = 'top';
        /**
         * Disables that the tooltip stays open when clicked.
         * Instead the tooltip is closed.
         */
        this.noFix = false;
        this.componentRef = null;
        this.closeSub = null;
        this.fixed = false;
    }
    ngOnDestroy() {
        this.closeTooltip();
    }
    set template(tpl) {
        this.content = tpl;
    }
    onClick(e) {
        if (this.noFix === false) {
            e.preventDefault();
            e.stopPropagation();
            this.fixed = true;
            this.openTooltip();
        }
    }
    onEnter(e) {
        e.preventDefault();
        this.openTooltip();
    }
    onLeave(e) {
        if (!this.fixed) {
            e.preventDefault();
            this.closeTooltip();
        }
    }
    openTooltip() {
        if (this.componentRef) {
            this.updateComponentState();
            return;
        }
        const componentFactory = this.factoryResolver.resolveComponentFactory(PopoverComponent);
        this.componentRef = this.viewContainerRef.createComponent(componentFactory);
        const instance = this.componentRef.instance;
        instance.anchor = this.anchor || this.viewContainerRef.element;
        instance.content = this.content;
        instance.primaryPos = this.position;
        if (this.context) {
            Object.assign(instance.context, this.context);
        }
        instance.context.fixed = this.fixed;
        this.updateComponentState();
        this.closeSub = instance.close.subscribe(() => {
            this.closeTooltip();
        });
        this.viewContainerRef.element.nativeElement.classList.add('open');
    }
    updateComponentState() {
        const instance = this.componentRef.instance;
        instance.context.fixed = this.fixed;
        if (this.fixed) {
            this.viewContainerRef.element.nativeElement.classList.add('open-fixed');
            instance.popoverElementRef.nativeElement.classList.add('open-fixed');
        }
    }
    closeTooltip() {
        this.fixed = false;
        if (this.componentRef) {
            if (this.closeSub) {
                this.closeSub.unsubscribe();
            }
            this.viewContainerRef.element.nativeElement.classList.remove('open');
            this.viewContainerRef.element.nativeElement.classList.remove('open-fixed');
            const viewIndex = this.viewContainerRef.indexOf(this.componentRef.hostView);
            if (viewIndex !== -1) {
                this.viewContainerRef.remove(viewIndex);
            }
            this.componentRef = null;
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TooltipDirective.prototype, "position", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TooltipDirective.prototype, "noFix", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TooltipDirective.prototype, "context", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TooltipDirective.prototype, "anchor", void 0);
tslib_1.__decorate([
    Input('rbTooltip'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], TooltipDirective.prototype, "template", null);
tslib_1.__decorate([
    HostListener('click', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [MouseEvent]),
    tslib_1.__metadata("design:returntype", void 0)
], TooltipDirective.prototype, "onClick", null);
tslib_1.__decorate([
    HostListener('mouseenter', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [MouseEvent]),
    tslib_1.__metadata("design:returntype", void 0)
], TooltipDirective.prototype, "onEnter", null);
tslib_1.__decorate([
    HostListener('mouseleave', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [MouseEvent]),
    tslib_1.__metadata("design:returntype", void 0)
], TooltipDirective.prototype, "onLeave", null);
TooltipDirective = tslib_1.__decorate([
    Directive({
        selector: '[rbTooltip]',
        exportAs: 'rbPopover'
    }),
    tslib_1.__metadata("design:paramtypes", [ComponentFactoryResolver,
        ViewContainerRef])
], TooltipDirective);
export { TooltipDirective };
//# sourceMappingURL=data:application/json;base64,