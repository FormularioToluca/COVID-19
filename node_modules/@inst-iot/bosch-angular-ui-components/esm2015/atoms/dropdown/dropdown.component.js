import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, HostListener, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { getAbsolutePosition } from '../../utils/positionUtils';
let DropdownComponent = class DropdownComponent {
    constructor() {
        this.primaryPos = 'left';
        this.autoClose = true;
        this.hugContent = false;
        this.close = new EventEmitter();
        this.shown = false;
        this.updateContext({});
    }
    onAnyClick() {
        if (this.shown) {
            this.doClose('click');
        }
    }
    onClick(event) {
        event.stopPropagation();
        if (this.shown && this.autoClose) {
            this.doClose('click');
        }
    }
    onResize() {
        this.positionToAnchor();
    }
    ngOnInit() {
        setTimeout(() => {
            this.positionToAnchor();
        });
        this.positionToAnchor();
    }
    show() {
        setTimeout(() => {
            this.shown = true;
        });
        this.popoverElementRef.nativeElement.classList.add('open');
        this.positionToAnchor();
    }
    hide() {
        this.shown = false;
        this.popoverElementRef.nativeElement.classList.remove('open');
    }
    ngAfterViewChecked() {
        this.positionToAnchor();
    }
    positionToAnchor() {
        if (!this.anchor || !this.popoverElementRef) {
            return;
        }
        const a = this.anchor.nativeElement;
        const pop = this.popoverElementRef.nativeElement;
        const anchorPos = getAbsolutePosition(a);
        const viewTop = window.pageYOffset;
        const viewBottom = window.innerHeight + window.pageYOffset;
        let isBottom = true;
        if (!this.hugContent) {
            pop.style.minWidth = a.offsetWidth + 'px';
        }
        const pos = {
            x: anchorPos.x,
            y: 0
        };
        if (this.primaryPos === 'center') {
            pos.x += a.offsetWidth / 2 - pop.offsetWidth / 2;
        }
        if (this.primaryPos === 'right') {
            pos.x += a.offsetWidth - pop.offsetWidth;
        }
        pos.y = anchorPos.y + a.offsetHeight;
        if (pos.y + pop.offsetHeight > viewBottom) {
            isBottom = false;
        }
        if (!isBottom) {
            pos.y = anchorPos.y - pop.offsetHeight;
            if (pos.y < 0) {
                isBottom = true;
            }
        }
        if (isBottom) {
            pos.y = anchorPos.y + a.offsetHeight;
        }
        else {
        }
        if (pos.x + pop.offsetWidth > window.innerWidth) {
            pos.x = window.innerWidth - pop.offsetWidth;
        }
        if (pos.x < 0) {
            pos.x = 0;
        }
        const popParentPos = getAbsolutePosition(pop.offsetParent);
        pos.y -= popParentPos.y;
        pos.x -= popParentPos.x;
        pop.style.top = pos.y + 'px';
        pop.style.left = pos.x + 'px';
    }
    doClose(reason) {
        this.close.next(reason);
    }
    updateContext(ctx) {
        this.context = Object.assign({}, ctx, { close: this.doClose.bind(this) });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", ElementRef)
], DropdownComponent.prototype, "anchor", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], DropdownComponent.prototype, "content", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], DropdownComponent.prototype, "primaryPos", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DropdownComponent.prototype, "autoClose", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DropdownComponent.prototype, "hugContent", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], DropdownComponent.prototype, "close", void 0);
tslib_1.__decorate([
    ViewChild('dropdown', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], DropdownComponent.prototype, "popoverElementRef", void 0);
tslib_1.__decorate([
    HostListener('window:click'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], DropdownComponent.prototype, "onAnyClick", null);
tslib_1.__decorate([
    HostListener('click', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [MouseEvent]),
    tslib_1.__metadata("design:returntype", void 0)
], DropdownComponent.prototype, "onClick", null);
tslib_1.__decorate([
    HostListener('window:resize'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], DropdownComponent.prototype, "onResize", null);
DropdownComponent = tslib_1.__decorate([
    Component({
        selector: 'rb-dropdown',
        template: "<div class=\"dropdown\" #dropdown>\n  <div class=\"dropdown-content\">\n    <ng-container *ngTemplateOutlet=\"content; context: context\"></ng-container>\n  </div>\n</div>\n"
    }),
    tslib_1.__metadata("design:paramtypes", [])
], DropdownComponent);
export { DropdownComponent };
//# sourceMappingURL=data:application/json;base64,