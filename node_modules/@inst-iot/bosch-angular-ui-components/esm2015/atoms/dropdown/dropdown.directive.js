import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, HostListener, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { DropdownComponent } from './dropdown.component';
let DropdownDirective = class DropdownDirective {
    constructor(factoryResolver, viewContainerRef) {
        this.factoryResolver = factoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.position = 'left';
        this.autoClose = true;
        this.renderOnInit = false;
        this.hugContent = false;
        this.openOnClick = true;
        this.componentRef = null;
        this.closeSub = null;
    }
    ngOnDestroy() {
        this.closeDropdown();
    }
    ngOnInit() {
        if (this.renderOnInit) {
            this.renderDropdown();
        }
    }
    set template(tpl) {
        this.tpl = tpl;
    }
    onClick(e) {
        if (!this.openOnClick) {
            return;
        }
        e.preventDefault();
        this.openDropdown();
    }
    set context(ctx) {
        this._context = ctx;
        if (this.componentRef) {
            this.componentRef.instance.updateContext(ctx);
        }
    }
    renderDropdown() {
        const componentFactory = this.factoryResolver.resolveComponentFactory(DropdownComponent);
        this.componentRef = this.viewContainerRef.createComponent(componentFactory);
        this.componentRef.instance.anchor = this.viewContainerRef.element;
        this.componentRef.instance.content = this.tpl;
        this.componentRef.instance.primaryPos = this.position;
        this.componentRef.instance.autoClose = this.autoClose;
        this.componentRef.instance.hugContent = this.hugContent;
        this.closeSub = this.componentRef.instance.close.subscribe(() => {
            this.closeDropdown();
        });
        if (this._context) {
            this.componentRef.instance.updateContext(this._context);
        }
    }
    openDropdown() {
        if (this.componentRef && !this.renderOnInit || this.renderOnInit && this.componentRef.instance.shown) {
            this.closeDropdown();
            return;
        }
        if (!this.renderOnInit) {
            this.renderDropdown();
        }
        this.componentRef.instance.show();
        this.viewContainerRef.element.nativeElement.classList.add('open');
    }
    closeDropdown() {
        if (this.componentRef) {
            this.componentRef.instance.hide();
            this.viewContainerRef.element.nativeElement.classList.remove('open');
            if (!this.renderOnInit) {
                if (this.closeSub) {
                    this.closeSub.unsubscribe();
                }
                const viewIndex = this.viewContainerRef.indexOf(this.componentRef.hostView);
                if (viewIndex !== -1) {
                    this.viewContainerRef.remove(viewIndex);
                }
                this.componentRef = null;
            }
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], DropdownDirective.prototype, "position", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DropdownDirective.prototype, "autoClose", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DropdownDirective.prototype, "renderOnInit", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DropdownDirective.prototype, "hugContent", void 0);
tslib_1.__decorate([
    Input('rbDropdown'),
    tslib_1.__metadata("design:type", TemplateRef),
    tslib_1.__metadata("design:paramtypes", [TemplateRef])
], DropdownDirective.prototype, "template", null);
tslib_1.__decorate([
    HostListener('click', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [MouseEvent]),
    tslib_1.__metadata("design:returntype", void 0)
], DropdownDirective.prototype, "onClick", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DropdownDirective.prototype, "context", null);
DropdownDirective = tslib_1.__decorate([
    Directive({
        selector: '[rbDropdown]',
        exportAs: 'rbDropdown'
    }),
    tslib_1.__metadata("design:paramtypes", [ComponentFactoryResolver,
        ViewContainerRef])
], DropdownDirective);
export { DropdownDirective };
//# sourceMappingURL=data:application/json;base64,