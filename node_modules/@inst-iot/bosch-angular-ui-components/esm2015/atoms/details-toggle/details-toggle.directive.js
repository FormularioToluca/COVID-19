import * as tslib_1 from "tslib";
import { Directive, EventEmitter, HostListener, Input, Output, ViewContainerRef } from '@angular/core';
/**
 * Can be toggled to provide a state
 * Usage with: rbDetailsToggle #triggerDetails="rbDetailsToggle"
 * Then check triggerDetails.open for the current state
 */
let DetailsToggleDirective = class DetailsToggleDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
        this.isOpenChange = new EventEmitter();
        this.open = false;
    }
    set isOpen(state) {
        if (state) {
            this.openDetails();
        }
        else {
            this.closeDetails();
        }
    }
    onClick(e) {
        e.preventDefault();
        if (this.open) {
            this.closeDetails();
            this.isOpenChange.next(this.open);
        }
        else {
            this.openDetails();
            this.isOpenChange.next(this.open);
        }
    }
    openDetails() {
        this.open = true;
        this.viewContainerRef.element.nativeElement.classList.add('open');
    }
    closeDetails() {
        this.open = false;
        this.viewContainerRef.element.nativeElement.classList.remove('open');
    }
};
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], DetailsToggleDirective.prototype, "isOpenChange", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], DetailsToggleDirective.prototype, "isOpen", null);
tslib_1.__decorate([
    HostListener('click', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [MouseEvent]),
    tslib_1.__metadata("design:returntype", void 0)
], DetailsToggleDirective.prototype, "onClick", null);
DetailsToggleDirective = tslib_1.__decorate([
    Directive({
        selector: '[rbDetailsToggle]',
        exportAs: 'rbDetailsToggle'
    }),
    tslib_1.__metadata("design:paramtypes", [ViewContainerRef])
], DetailsToggleDirective);
export { DetailsToggleDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWlscy10b2dnbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImF0b21zL2RldGFpbHMtdG9nZ2xlL2RldGFpbHMtdG9nZ2xlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkc7Ozs7R0FJRztBQUtILElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBTWpDLFlBQW9CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBSjVDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUU5QyxTQUFJLEdBQUcsS0FBSyxDQUFDO0lBR3BCLENBQUM7SUFHUSxJQUFJLE1BQU0sQ0FBQyxLQUFjO1FBQ2hDLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BCO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDckI7SUFDSCxDQUFDO0lBR0QsT0FBTyxDQUFDLENBQWE7UUFDbkIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ25CLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbkM7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbkM7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBRWpCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUVsQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7Q0FFRixDQUFBO0FBeENXO0lBQVQsTUFBTSxFQUFFOzs0REFBNEM7QUFRNUM7SUFBUixLQUFLLEVBQUU7OztvREFNUDtBQUdEO0lBREMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs2Q0FDdkIsVUFBVTs7cURBU3BCO0FBNUJVLHNCQUFzQjtJQUpsQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLFFBQVEsRUFBRSxpQkFBaUI7S0FDNUIsQ0FBQzs2Q0FPc0MsZ0JBQWdCO0dBTjNDLHNCQUFzQixDQTBDbEM7U0ExQ1ksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIENhbiBiZSB0b2dnbGVkIHRvIHByb3ZpZGUgYSBzdGF0ZVxuICogVXNhZ2Ugd2l0aDogcmJEZXRhaWxzVG9nZ2xlICN0cmlnZ2VyRGV0YWlscz1cInJiRGV0YWlsc1RvZ2dsZVwiXG4gKiBUaGVuIGNoZWNrIHRyaWdnZXJEZXRhaWxzLm9wZW4gZm9yIHRoZSBjdXJyZW50IHN0YXRlXG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyYkRldGFpbHNUb2dnbGVdJyxcbiAgZXhwb3J0QXM6ICdyYkRldGFpbHNUb2dnbGUnXG59KVxuZXhwb3J0IGNsYXNzIERldGFpbHNUb2dnbGVEaXJlY3RpdmUge1xuXG4gIEBPdXRwdXQoKSBpc09wZW5DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgcHVibGljIG9wZW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpIHtcbiAgfVxuXG5cbiAgQElucHV0KCkgc2V0IGlzT3BlbihzdGF0ZTogYm9vbGVhbikge1xuICAgIGlmIChzdGF0ZSkge1xuICAgICAgdGhpcy5vcGVuRGV0YWlscygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsb3NlRGV0YWlscygpO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgb25DbGljayhlOiBNb3VzZUV2ZW50KSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLm9wZW4pIHtcbiAgICAgIHRoaXMuY2xvc2VEZXRhaWxzKCk7XG4gICAgICB0aGlzLmlzT3BlbkNoYW5nZS5uZXh0KHRoaXMub3Blbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3BlbkRldGFpbHMoKTtcbiAgICAgIHRoaXMuaXNPcGVuQ2hhbmdlLm5leHQodGhpcy5vcGVuKTtcbiAgICB9XG4gIH1cblxuICBvcGVuRGV0YWlscygpIHtcbiAgICB0aGlzLm9wZW4gPSB0cnVlO1xuXG4gICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdvcGVuJyk7XG4gIH1cblxuICBjbG9zZURldGFpbHMoKSB7XG4gICAgdGhpcy5vcGVuID0gZmFsc2U7XG5cbiAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcbiAgfVxuXG59XG4iXX0=