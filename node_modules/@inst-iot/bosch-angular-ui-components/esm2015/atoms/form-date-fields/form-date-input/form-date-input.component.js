import * as tslib_1 from "tslib";
var FormDateInputComponent_1;
import { Component, ContentChildren, ElementRef, forwardRef, Inject, InjectionToken, Input, Optional, QueryList, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FormValidationMessageDirective } from '../../form-fields/form-validation-message.directive';
import { emptyFunction } from '../../form-fields/forms-util';
import * as flatpickrImport from 'flatpickr';
const flatpickrFunc = flatpickrImport; // workaround for rollup and tests
export const FLATPICKR_DEFAULT_OPTIONS = new InjectionToken('flatpickrDefaultOptions');
const overridableOptions = {
    time_24hr: true
};
/**
 * Displays a input for flatpickr
 * The value, is a ISO Date String or an array of ISO Date Strings.
 */
let FormDateInputComponent = FormDateInputComponent_1 = class FormDateInputComponent {
    constructor(renderer, elementRef, defaultOptions) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.defaultOptions = defaultOptions;
        this.label = null;
        this.type = 'text';
        this.id = 'input.' + Math.random();
        /**
         * Options for Flatpickr
         * @see https://flatpickr.js.org/options/
         */
        this.options = {};
        /**
         * Given, when this is the start date.
         * Start input is responsible for options
         */
        this.rangeEnd = null;
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
    }
    ngAfterViewInit() {
        if (this.defaultOptions) {
            this.options = Object.assign({}, overridableOptions, this.defaultOptions, this.options);
        }
        else {
            this.options = Object.assign({}, overridableOptions, this.options);
        }
        this.options.onValueUpdate = (selectedDates, dateString) => {
            this.updateValue(selectedDates);
        };
        if (this.rangeEnd) {
            this.rangeEnd.options = Object.assign({}, this.options);
        }
        this.picker = flatpickrFunc(this.input.nativeElement, this.options);
    }
    ngOnChanges(changes) {
        if (changes.options && this.picker && changes.options.currentValue) {
            Object.keys(changes.options.currentValue).forEach(opt => {
                this.picker.set(opt, changes.options.currentValue[opt]);
            });
        }
    }
    ngOnDestroy() {
        if (this.picker) {
            this.picker.destroy();
        }
    }
    isReadonly() {
        return this.readonly !== undefined;
    }
    updateValue(value) {
        if (this.picker.config.mode === 'single' && value && value.length) {
            value = value[0].toISOString();
        }
        if (['range', 'multiple'].indexOf(this.picker.config.mode) !== -1 && value && value.length) {
            value = value.map(v => v.toISOString());
        }
        this.checkValue(value);
        this.onChange(value);
        this.updateEndRange();
    }
    updateEndRange() {
        if (this.rangeEnd && this.picker.selectedDates[0]) {
            const start = this.picker.selectedDates[0];
            const end = this.rangeEnd.picker.selectedDates[0];
            this.rangeEnd.picker.set('minDate', this.picker.selectedDates[0]);
            if (start && end && end.getTime() < start.getTime()) {
                this.rangeEnd.writeValue(start.toISOString());
            }
        }
    }
    checkValue(value) {
        if (typeof (value) === 'string' && value.length > 0 || value && value.length) {
            this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
        }
    }
    isLabelTemplate() {
        return this.label instanceof TemplateRef;
    }
    writeValue(value) {
        if (value === null || value === undefined) {
            value = '';
        }
        this.checkValue(value);
        if (this.picker && this.picker.config) {
            this.picker.setDate(value);
        }
        this.updateEndRange();
        // this.renderer.setProperty(this.input.nativeElement, 'value', value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
    }
    toggle() {
        this.picker.toggle();
    }
    close() {
        this.picker.close();
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormDateInputComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormDateInputComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormDateInputComponent.prototype, "type", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormDateInputComponent.prototype, "readonly", void 0);
tslib_1.__decorate([
    ContentChildren(FormValidationMessageDirective),
    tslib_1.__metadata("design:type", QueryList)
], FormDateInputComponent.prototype, "messages", void 0);
tslib_1.__decorate([
    ViewChild('input', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], FormDateInputComponent.prototype, "input", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormDateInputComponent.prototype, "options", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", FormDateInputComponent)
], FormDateInputComponent.prototype, "rangeEnd", void 0);
FormDateInputComponent = FormDateInputComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'rb-form-date-input',
        template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <input [type]=\"type\" [id]=\"id + 'input'\"\r\n         class=\"input with-icon\"\r\n         (blur)=\"onTouched()\"\r\n         [readonly]=\"isReadonly()\"\r\n         #input>\r\n  <span class=\"input-icon rb-ic rb-ic-calendar\" (click)=\"toggle()\"></span>\r\n  <label class=\"label\" [for]=\"id + 'input'\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormDateInputComponent_1), multi: true }],
        exportAs: 'dateInput'
    }),
    tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(FLATPICKR_DEFAULT_OPTIONS)),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ElementRef, Object])
], FormDateInputComponent);
export { FormDateInputComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1kYXRlLWlucHV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJhdG9tcy9mb3JtLWRhdGUtZmllbGRzL2Zvcm0tZGF0ZS1pbnB1dC9mb3JtLWRhdGUtaW5wdXQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxlQUFlLEVBQ2YsVUFBVSxFQUNWLFVBQVUsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUNsQyxLQUFLLEVBQ00sUUFBUSxFQUNuQixTQUFTLEVBQ1QsU0FBUyxFQUNULFdBQVcsRUFDWCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBQ3JHLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUU3RCxPQUFPLEtBQUssZUFBZSxNQUFNLFdBQVcsQ0FBQztBQUU3QyxNQUFNLGFBQWEsR0FBRyxlQUFrQyxDQUFDLENBQUMsa0NBQWtDO0FBRzVGLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLElBQUksY0FBYyxDQUFNLHlCQUF5QixDQUFDLENBQUM7QUFFNUYsTUFBTSxrQkFBa0IsR0FBRztJQUN6QixTQUFTLEVBQUUsSUFBSTtDQUNoQixDQUFDO0FBRUY7OztHQUdHO0FBT0gsSUFBYSxzQkFBc0IsOEJBQW5DLE1BQWEsc0JBQXNCO0lBNEJqQyxZQUFvQixRQUFtQixFQUNuQixVQUFzQixFQUN5QixjQUFtQjtRQUZsRSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDeUIsbUJBQWMsR0FBZCxjQUFjLENBQUs7UUE1QjdFLFVBQUssR0FBOEIsSUFBSSxDQUFD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QUU7O3VEQUFtQjtBQU1sQjtJQUFSLEtBQUssRUFBRTtzQ0FBVyxzQkFBc0I7d0RBQVE7QUF2QnRDLHNCQUFzQjtJQU5sQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsb0JBQW9CO1FBQzlCLG9zQkFBK0M7UUFDL0MsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx3QkFBc0IsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQztRQUM3RyxRQUFRLEVBQUUsV0FBVztLQUN0QixDQUFDO0lBK0JhLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUE7NkNBRjVCLFNBQVM7UUFDUCxVQUFVO0dBN0IvQixzQkFBc0IsQ0FrSmxDO1NBbEpZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQWZ0ZXJWaWV3SW5pdCxcclxuICBDb21wb25lbnQsXHJcbiAgQ29udGVudENoaWxkcmVuLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgZm9yd2FyZFJlZiwgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbixcclxuICBJbnB1dCwgT25DaGFuZ2VzLFxyXG4gIE9uRGVzdHJveSwgT3B0aW9uYWwsXHJcbiAgUXVlcnlMaXN0LFxyXG4gIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcyxcclxuICBUZW1wbGF0ZVJlZixcclxuICBWaWV3Q2hpbGRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBGb3JtVmFsaWRhdGlvbk1lc3NhZ2VEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9mb3JtLWZpZWxkcy9mb3JtLXZhbGlkYXRpb24tbWVzc2FnZS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBlbXB0eUZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vZm9ybS1maWVsZHMvZm9ybXMtdXRpbCc7XHJcbmltcG9ydCBmbGF0cGlja3IgZnJvbSAnZmxhdHBpY2tyJztcclxuaW1wb3J0ICogYXMgZmxhdHBpY2tySW1wb3J0IGZyb20gJ2ZsYXRwaWNrcic7XHJcblxyXG5jb25zdCBmbGF0cGlja3JGdW5jID0gZmxhdHBpY2tySW1wb3J0IGFzIGFueSBhcyBGdW5jdGlvbjsgLy8gd29ya2Fyb3VuZCBmb3Igcm9sbHVwIGFuZCB0ZXN0c1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBGTEFUUElDS1JfREVGQVVMVF9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPGFueT4oJ2ZsYXRwaWNrckRlZmF1bHRPcHRpb25zJyk7XHJcblxyXG5jb25zdCBvdmVycmlkYWJsZU9wdGlvbnMgPSB7XHJcbiAgdGltZV8yNGhyOiB0cnVlXHJcbn07XHJcblxyXG4vKipcclxuICogRGlzcGxheXMgYSBpbnB1dCBmb3IgZmxhdHBpY2tyXHJcbiAqIFRoZSB2YWx1ZSwgaXMgYSBJU08gRGF0ZSBTdHJpbmcgb3IgYW4gYXJyYXkgb2YgSVNPIERhdGUgU3RyaW5ncy5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncmItZm9ybS1kYXRlLWlucHV0JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1kYXRlLWlucHV0LmNvbXBvbmVudC5odG1sJyxcclxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEZvcm1EYXRlSW5wdXRDb21wb25lbnQpLCBtdWx0aTogdHJ1ZX1dLFxyXG4gIGV4cG9ydEFzOiAnZGF0ZUlucHV0J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRm9ybURhdGVJbnB1dENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XHJcblxyXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+ID0gbnVsbDtcclxuICBASW5wdXQoKSBuYW1lOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgdHlwZSA9ICd0ZXh0JztcclxuICBpZCA9ICdpbnB1dC4nICsgTWF0aC5yYW5kb20oKTtcclxuICBASW5wdXQoKSByZWFkb25seTtcclxuXHJcbiAgQENvbnRlbnRDaGlsZHJlbihGb3JtVmFsaWRhdGlvbk1lc3NhZ2VEaXJlY3RpdmUpIG1lc3NhZ2VzOiBRdWVyeUxpc3Q8Rm9ybVZhbGlkYXRpb25NZXNzYWdlRGlyZWN0aXZlPjtcclxuICBAVmlld0NoaWxkKCdpbnB1dCcsIHsgc3RhdGljOiB0cnVlIH0pIGlucHV0OiBFbGVtZW50UmVmO1xyXG5cclxuICBwcml2YXRlIHBpY2tlcjogZmxhdHBpY2tyLkluc3RhbmNlO1xyXG5cclxuICAvKipcclxuICAgKiBPcHRpb25zIGZvciBGbGF0cGlja3JcclxuICAgKiBAc2VlIGh0dHBzOi8vZmxhdHBpY2tyLmpzLm9yZy9vcHRpb25zL1xyXG4gICAqL1xyXG4gIEBJbnB1dCgpIG9wdGlvbnM6IGFueSA9IHt9O1xyXG5cclxuICAvKipcclxuICAgKiBHaXZlbiwgd2hlbiB0aGlzIGlzIHRoZSBzdGFydCBkYXRlLlxyXG4gICAqIFN0YXJ0IGlucHV0IGlzIHJlc3BvbnNpYmxlIGZvciBvcHRpb25zXHJcbiAgICovXHJcbiAgQElucHV0KCkgcmFuZ2VFbmQ6IEZvcm1EYXRlSW5wdXRDb21wb25lbnQgPSBudWxsO1xyXG5cclxuICBvbkNoYW5nZSA9IGVtcHR5RnVuY3Rpb247XHJcbiAgb25Ub3VjaGVkID0gZW1wdHlGdW5jdGlvbjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEZMQVRQSUNLUl9ERUZBVUxUX09QVElPTlMpIHByaXZhdGUgZGVmYXVsdE9wdGlvbnM6IGFueSkge1xyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuZGVmYXVsdE9wdGlvbnMpIHtcclxuICAgICAgdGhpcy5vcHRpb25zID0ge1xyXG4gICAgICAgIC4uLm92ZXJyaWRhYmxlT3B0aW9ucyxcclxuICAgICAgICAuLi50aGlzLmRlZmF1bHRPcHRpb25zLFxyXG4gICAgICAgIC4uLnRoaXMub3B0aW9uc1xyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5vcHRpb25zID0ge1xyXG4gICAgICAgIC4uLm92ZXJyaWRhYmxlT3B0aW9ucyxcclxuICAgICAgICAuLi50aGlzLm9wdGlvbnNcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm9wdGlvbnMub25WYWx1ZVVwZGF0ZSA9IChzZWxlY3RlZERhdGVzOiBEYXRlW10sIGRhdGVTdHJpbmc6IHN0cmluZykgPT4ge1xyXG4gICAgICB0aGlzLnVwZGF0ZVZhbHVlKHNlbGVjdGVkRGF0ZXMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodGhpcy5yYW5nZUVuZCkge1xyXG4gICAgICB0aGlzLnJhbmdlRW5kLm9wdGlvbnMgPSB7Li4udGhpcy5vcHRpb25zfTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnBpY2tlciA9IGZsYXRwaWNrckZ1bmModGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LCB0aGlzLm9wdGlvbnMpIGFzIGZsYXRwaWNrci5JbnN0YW5jZTtcclxuXHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICBpZiAoY2hhbmdlcy5vcHRpb25zICYmIHRoaXMucGlja2VyICYmIGNoYW5nZXMub3B0aW9ucy5jdXJyZW50VmFsdWUpIHtcclxuICAgICAgT2JqZWN0LmtleXMoY2hhbmdlcy5vcHRpb25zLmN1cnJlbnRWYWx1ZSkuZm9yRWFjaChvcHQgPT4ge1xyXG4gICAgICAgIHRoaXMucGlja2VyLnNldChvcHQgYXMgYW55LCBjaGFuZ2VzLm9wdGlvbnMuY3VycmVudFZhbHVlW29wdF0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMucGlja2VyKSB7XHJcbiAgICAgIHRoaXMucGlja2VyLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlzUmVhZG9ubHkoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZWFkb25seSAhPT0gdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmFsdWUodmFsdWUpIHtcclxuICAgIGlmICh0aGlzLnBpY2tlci5jb25maWcubW9kZSA9PT0gJ3NpbmdsZScgJiYgdmFsdWUgJiYgdmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgIHZhbHVlID0gdmFsdWVbMF0udG9JU09TdHJpbmcoKTtcclxuICAgIH1cclxuICAgIGlmIChbJ3JhbmdlJywgJ211bHRpcGxlJ10uaW5kZXhPZih0aGlzLnBpY2tlci5jb25maWcubW9kZSkgIT09IC0xICYmIHZhbHVlICYmIHZhbHVlLmxlbmd0aCkge1xyXG4gICAgICB2YWx1ZSA9IHZhbHVlLm1hcCh2ID0+IHYudG9JU09TdHJpbmcoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jaGVja1ZhbHVlKHZhbHVlKTtcclxuICAgIHRoaXMub25DaGFuZ2UodmFsdWUpO1xyXG4gICAgdGhpcy51cGRhdGVFbmRSYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlRW5kUmFuZ2UoKSB7XHJcbiAgICBpZiAodGhpcy5yYW5nZUVuZCAmJiB0aGlzLnBpY2tlci5zZWxlY3RlZERhdGVzWzBdKSB7XHJcbiAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5waWNrZXIuc2VsZWN0ZWREYXRlc1swXTtcclxuICAgICAgY29uc3QgZW5kID0gdGhpcy5yYW5nZUVuZC5waWNrZXIuc2VsZWN0ZWREYXRlc1swXTtcclxuICAgICAgdGhpcy5yYW5nZUVuZC5waWNrZXIuc2V0KCdtaW5EYXRlJywgdGhpcy5waWNrZXIuc2VsZWN0ZWREYXRlc1swXSk7XHJcbiAgICAgIGlmIChzdGFydCAmJiBlbmQgJiYgZW5kLmdldFRpbWUoKSA8IHN0YXJ0LmdldFRpbWUoKSkge1xyXG4gICAgICAgIHRoaXMucmFuZ2VFbmQud3JpdGVWYWx1ZShzdGFydC50b0lTT1N0cmluZygpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2hlY2tWYWx1ZSh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZih2YWx1ZSkgPT09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCA+IDAgfHwgdmFsdWUgJiYgdmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdub3QtZW1wdHknKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdub3QtZW1wdHknKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlzTGFiZWxUZW1wbGF0ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmxhYmVsIGluc3RhbmNlb2YgVGVtcGxhdGVSZWY7XHJcbiAgfVxyXG5cclxuXHJcbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB2YWx1ZSA9ICcnO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jaGVja1ZhbHVlKHZhbHVlKTtcclxuICAgIGlmICh0aGlzLnBpY2tlciAmJiB0aGlzLnBpY2tlci5jb25maWcpIHtcclxuICAgICAgdGhpcy5waWNrZXIuc2V0RGF0ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnVwZGF0ZUVuZFJhbmdlKCk7XHJcbiAgICAvLyB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudCwgJ3ZhbHVlJywgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XHJcbiAgfVxyXG5cclxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnLCBpc0Rpc2FibGVkKTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZSgpOiB2b2lkIHtcclxuICAgIHRoaXMucGlja2VyLnRvZ2dsZSgpO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLnBpY2tlci5jbG9zZSgpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19