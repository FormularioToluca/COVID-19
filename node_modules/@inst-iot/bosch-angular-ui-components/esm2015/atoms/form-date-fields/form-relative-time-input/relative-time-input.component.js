import * as tslib_1 from "tslib";
var RelativeTimeInputComponent_1;
import { Component, forwardRef, Inject, InjectionToken, Input, Optional, TemplateRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { defaultTimeInputOptions, getRelativeInfo } from '../date-range-picker/date-range-picker.model';
export const TIME_INPUT_OPTIONS = new InjectionToken('formRelativeInputTimeOptions');
let RelativeTimeInputComponent = RelativeTimeInputComponent_1 = class RelativeTimeInputComponent {
    constructor(options) {
        this.options = options;
        this.id = 'input.' + Math.random();
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
        this.disabled = false;
        this.operator = '-';
        this.count = '0';
        this.unit = 'ms';
        this.displayText = '';
        if (!options) {
            this.options = defaultTimeInputOptions;
        }
    }
    ngOnInit() {
        this.units = defaultTimeInputOptions.units;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    writeValue(obj) {
        const info = getRelativeInfo(obj, this.units);
        this.count = info.count.toString();
        this.operator = info.operator;
        this.unit = info.unit;
        this.displayText = info.displayText;
    }
    getValue() {
        const count = parseInt(this.count, 10) * this.getDivisor();
        if (isNaN(count)) {
            return 0;
        }
        else {
            return this.operator === '-' ? count * -1 : count;
        }
    }
    getDivisor() {
        return this.units.find(u => u.unit === this.unit).value;
    }
    notifyChange() {
        const value = this.getValue();
        this.onChange(value);
    }
    updateUnit(unit) {
        const oldDivisor = this.getDivisor();
        this.unit = unit;
        const newDivisor = this.getDivisor();
        if (newDivisor > oldDivisor) {
            const baseValue = parseInt(this.count, 10) * oldDivisor;
            this.count = Math.ceil(baseValue / newDivisor).toString();
        }
        this.notifyChange();
    }
    isLabelTemplate() {
        return this.label instanceof TemplateRef;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RelativeTimeInputComponent.prototype, "label", void 0);
RelativeTimeInputComponent = RelativeTimeInputComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'rb-form-relative-time-input',
        template: "<div class=\"rb-custom-input\">\r\n  <div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n    <div class=\"relative-time-form\">\r\n      <rb-form-select [(ngModel)]=\"operator\" (ngModelChange)=\"notifyChange()\" name=\"operator\" [disabled]=\"disabled\">\r\n        <option value=\"-\">-</option>\r\n        <option value=\"+\">+</option>\r\n      </rb-form-select>\r\n      <rb-form-input class=\"relative-time-form-number\" type=\"number\"\r\n                     [(ngModel)]=\"count\" (ngModelChange)=\"notifyChange()\" name=\"count\"\r\n                     pattern=\"^\\d+$\" required\r\n                     [disabled]=\"disabled\"></rb-form-input>\r\n      <rb-form-select class=\"relative-time-form-unit\" [disabled]=\"disabled\"\r\n                      [ngModel]=\"unit\"\r\n                      (ngModelChange)=\"updateUnit($event)\"\r\n                      name=\"unit\">\r\n        <option *ngFor=\"let u of units\" [value]=\"u.unit\">{{u.label}}</option>\r\n      </rb-form-select>\r\n    </div>\r\n\r\n    <label class=\"label\" [for]=\"id + 'input'\">\r\n      {{!isLabelTemplate()?label:''}}\r\n      <ng-container *ngIf=\"isLabelTemplate()\">\r\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n      </ng-container>\r\n    </label>\r\n\r\n    <span class=\"input-background\"></span>\r\n\r\n  </div>\r\n</div>\r\n",
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => RelativeTimeInputComponent_1), multi: true }]
    }),
    tslib_1.__param(0, Inject(TIME_INPUT_OPTIONS)), tslib_1.__param(0, Optional()),
    tslib_1.__metadata("design:paramtypes", [Object])
], RelativeTimeInputComponent);
export { RelativeTimeInputComponent };
export function emptyFunction(_) {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpdmUtdGltZS1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXRvbXMvZm9ybS1kYXRlLWZpZWxkcy9mb3JtLXJlbGF0aXZlLXRpbWUtaW5wdXQvcmVsYXRpdmUtdGltZS1pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBVSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BILE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGVBQWUsRUFHaEIsTUFBTSw4Q0FBOEMsQ0FBQztBQUV0RCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FBbUIsOEJBQThCLENBQUMsQ0FBQztBQU92RyxJQUFhLDBCQUEwQixrQ0FBdkMsTUFBYSwwQkFBMEI7SUFxQnJDLFlBQTRELE9BQXlCO1FBQXpCLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBakJyRixPQUFFLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUU5QixhQUFRLEdBQUcsYUFBYSxDQUFDO1FBQ3pCLGNBQVMsR0FBRyxhQUFhLENBQUM7UUFFMUIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVqQixhQUFRLEdBQUcsR0FBRyxDQUFDO1FBRWYsVUFBSyxHQUFHLEdBQUcsQ0FBQztRQUVaLFNBQUksR0FBRyxJQUFJLENBQUM7UUFJWixnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUdmLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixJQUFJLENBQUMsT0FBTyxHQUFHLHVCQUF1QixDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztJQUVE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QyxrQkFBa0IsQ0FBQyxDQUFBLEVBQUUsbUJBQUEsUUFBUSxFQUFFLENBQUE7O0dBckJ4QywwQkFBMEIsQ0FxRnRDO1NBckZZLDBCQUEwQjtBQXVGdkMsTUFBTSxVQUFVLGFBQWEsQ0FBQyxDQUFPO0FBQ3JDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIGZvcndhcmRSZWYsIEluamVjdCwgSW5qZWN0aW9uVG9rZW4sIElucHV0LCBPbkluaXQsIE9wdGlvbmFsLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7XHJcbiAgZGVmYXVsdFRpbWVJbnB1dE9wdGlvbnMsXHJcbiAgZ2V0UmVsYXRpdmVJbmZvLFxyXG4gIFRpbWVJbnB1dE9wdGlvbnMsXHJcbiAgVGltZUlucHV0T3B0aW9uc1VuaXRcclxufSBmcm9tICcuLi9kYXRlLXJhbmdlLXBpY2tlci9kYXRlLXJhbmdlLXBpY2tlci5tb2RlbCc7XHJcblxyXG5leHBvcnQgY29uc3QgVElNRV9JTlBVVF9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPFRpbWVJbnB1dE9wdGlvbnM+KCdmb3JtUmVsYXRpdmVJbnB1dFRpbWVPcHRpb25zJyk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3JiLWZvcm0tcmVsYXRpdmUtdGltZS1pbnB1dCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3JlbGF0aXZlLXRpbWUtaW5wdXQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUiwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUmVsYXRpdmVUaW1lSW5wdXRDb21wb25lbnQpLCBtdWx0aTogdHJ1ZX1dLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVsYXRpdmVUaW1lSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuXHJcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gIGlkID0gJ2lucHV0LicgKyBNYXRoLnJhbmRvbSgpO1xyXG5cclxuICBvbkNoYW5nZSA9IGVtcHR5RnVuY3Rpb247XHJcbiAgb25Ub3VjaGVkID0gZW1wdHlGdW5jdGlvbjtcclxuXHJcbiAgZGlzYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgb3BlcmF0b3IgPSAnLSc7XHJcblxyXG4gIGNvdW50ID0gJzAnO1xyXG5cclxuICB1bml0ID0gJ21zJztcclxuXHJcbiAgdW5pdHM6IFRpbWVJbnB1dE9wdGlvbnNVbml0W107XHJcblxyXG4gIGRpc3BsYXlUZXh0ID0gJyc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoVElNRV9JTlBVVF9PUFRJT05TKSBAT3B0aW9uYWwoKSBwcml2YXRlIG9wdGlvbnM6IFRpbWVJbnB1dE9wdGlvbnMpIHtcclxuICAgIGlmICghb3B0aW9ucykge1xyXG4gICAgICB0aGlzLm9wdGlvbnMgPSBkZWZhdWx0VGltZUlucHV0T3B0aW9ucztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy51bml0cyA9IGRlZmF1bHRUaW1lSW5wdXRPcHRpb25zLnVuaXRzO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XHJcbiAgfVxyXG5cclxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xyXG4gIH1cclxuXHJcbiAgd3JpdGVWYWx1ZShvYmo6IG51bWJlciB8IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgaW5mbyA9IGdldFJlbGF0aXZlSW5mbyhvYmosIHRoaXMudW5pdHMpO1xyXG4gICAgdGhpcy5jb3VudCA9IGluZm8uY291bnQudG9TdHJpbmcoKTtcclxuICAgIHRoaXMub3BlcmF0b3IgPSBpbmZvLm9wZXJhdG9yO1xyXG4gICAgdGhpcy51bml0ID0gaW5mby51bml0O1xyXG4gICAgdGhpcy5kaXNwbGF5VGV4dCA9IGluZm8uZGlzcGxheVRleHQ7XHJcbiAgfVxyXG5cclxuICBnZXRWYWx1ZSgpIHtcclxuICAgIGNvbnN0IGNvdW50ID0gcGFyc2VJbnQodGhpcy5jb3VudCwgMTApICogdGhpcy5nZXREaXZpc29yKCk7XHJcbiAgICBpZiAoaXNOYU4oY291bnQpKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMub3BlcmF0b3IgPT09ICctJyA/IGNvdW50ICogLTEgOiBjb3VudDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldERpdmlzb3IoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51bml0cy5maW5kKHUgPT4gdS51bml0ID09PSB0aGlzLnVuaXQpLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5Q2hhbmdlKCkge1xyXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XHJcbiAgICB0aGlzLm9uQ2hhbmdlKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVVuaXQodW5pdDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBvbGREaXZpc29yID0gdGhpcy5nZXREaXZpc29yKCk7XHJcbiAgICB0aGlzLnVuaXQgPSB1bml0O1xyXG4gICAgY29uc3QgbmV3RGl2aXNvciA9IHRoaXMuZ2V0RGl2aXNvcigpO1xyXG4gICAgaWYgKG5ld0Rpdmlzb3IgPiBvbGREaXZpc29yKSB7XHJcbiAgICAgIGNvbnN0IGJhc2VWYWx1ZSA9IHBhcnNlSW50KHRoaXMuY291bnQsIDEwKSAqIG9sZERpdmlzb3I7XHJcbiAgICAgIHRoaXMuY291bnQgPSBNYXRoLmNlaWwoYmFzZVZhbHVlIC8gbmV3RGl2aXNvcikudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm5vdGlmeUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgaXNMYWJlbFRlbXBsYXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGFiZWwgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZjtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW1wdHlGdW5jdGlvbihfPzogYW55KSB7XHJcbn1cclxuIl19