import * as tslib_1 from "tslib";
var DateRangePickerComponent_1;
import { Component, ElementRef, forwardRef, Inject, Input, Optional, Renderer2, ViewChild } from '@angular/core';
import flatpickr, * as flatpickrImport from 'flatpickr';
import { emptyFunction } from '../../form-fields/forms-util';
import { FLATPICKR_DEFAULT_OPTIONS } from '../form-date-input/form-date-input.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { isAbsolute, isRelative } from './date-range-picker.model';
const flatpickrFunc = flatpickrImport; // workaround for rollup and tests
const overridableOptions = {
    time_24hr: true,
};
const enforcedOptions = {
    inline: true,
    mode: 'single'
};
let DateRangePickerComponent = DateRangePickerComponent_1 = class DateRangePickerComponent {
    constructor(renderer, elementRef, defaultOptions) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.defaultOptions = defaultOptions;
        this.allowRelative = false;
        this.presets = [];
        this.startLabel = 'Start';
        this.endLabel = 'End';
        this.absoluteLabel = 'Absolute';
        this.relativeLabel = 'Relative';
        this.presetsLabel = 'Presets';
        this.tab = 'absolute';
        this.mode = 'absolute';
        /**
         * Options for Flatpickr
         * @see https://flatpickr.js.org/options/
         */
        this.options = {};
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
        this.absoluteValue = null;
        this.initialTabChange = true;
        this.relativeValue = null;
        this.lastModified = null;
    }
    ngOnInit() {
        if (this.defaultOptions) {
            this.options = Object.assign({}, overridableOptions, this.defaultOptions, this.options, enforcedOptions);
        }
        else {
            this.options = Object.assign({}, overridableOptions, this.options, enforcedOptions);
        }
    }
    ngOnDestroy() {
        if (this.pickerStart) {
            this.pickerStart.destroy();
        }
        if (this.pickerEnd) {
            this.pickerEnd.destroy();
        }
    }
    set initStartDateElement(el) {
        if (!el || el.nativeElement._flatpickr) {
            return;
        }
        const startOptions = Object.assign({}, this.options, { onValueUpdate: (selectedDates) => {
                const start = toISOString(selectedDates[0]);
                this.pickerEnd.set('minDate', selectedDates[0]);
                const end = toISOString(this.pickerEnd.selectedDates[0]);
                this.updateAbsoluteValueFromPicker([start, end]);
            } });
        this.pickerStart = flatpickrFunc(el.nativeElement, startOptions);
    }
    set initEndDateElement(el) {
        if (!el || el.nativeElement._flatpickr) {
            return;
        }
        const endOptions = Object.assign({}, this.options, { onValueUpdate: (selectedDates) => {
                const start = toISOString(this.pickerStart.selectedDates[0]);
                const end = toISOString(selectedDates[0]);
                this.updateAbsoluteValueFromPicker([start, end]);
            } });
        this.pickerEnd = flatpickrFunc(el.nativeElement, endOptions);
        this.updatePicker();
    }
    tabChanged(tabId) {
        if (this.initialTabChange || this.tab === tabId) {
            this.initialTabChange = false;
            return;
        }
        this.tab = tabId;
        if (tabId === 'absolute') {
            this.mode = 'absolute';
            this.notifyChange(this.absoluteValue);
        }
        if (tabId === 'relative') {
            this.mode = 'relative';
            this.notifyChange(this.relativeValue);
        }
        if (tabId === 'preset') {
        }
    }
    updateAbsoluteValueFromPicker(value) {
        if (this.tab !== 'absolute'
            || this.absoluteValue && this.absoluteValue[0] === value[0] && this.absoluteValue[1] === value[1]) {
            return;
        }
        this.absoluteValue = value;
        this.relativeValue = this.getRelativeFromAbsolute(value);
        this.notifyChange(value);
    }
    updateRelativeValue(value, index) {
        if (index === 0) {
            this.relativeValue = [value, this.relativeValue[1]];
        }
        if (index === 1) {
            this.relativeValue = [this.relativeValue[0], value];
        }
        this.absoluteValue = getAbsoluteFromRelative(this.relativeValue);
        this.updatePicker();
        this.notifyChange(this.relativeValue);
    }
    notifyChange(value) {
        if (value === this.lastModified || isEqual(value, this.lastModified)) {
            return;
        }
        this.lastModified = value;
        this.onChange(value);
    }
    writeValue(value) {
        if (this.allowRelative && isRelative(value)) {
            this.mode = 'relative';
            this.tab = 'relative';
            this.relativeValue = value;
            this.absoluteValue = getAbsoluteFromRelative(this.relativeValue);
            if (this.findPreset(this.relativeValue)) {
                this.tab = 'preset';
            }
        }
        else if (isAbsolute(value)) {
            this.mode = 'absolute';
            this.tab = 'absolute';
            this.relativeValue = this.getRelativeFromAbsolute(value);
            this.absoluteValue = value;
            if (this.findPreset(this.absoluteValue)) {
                this.tab = 'preset';
            }
        }
        this.lastModified = value;
        this.updatePicker();
    }
    updatePicker() {
        const value = this.absoluteValue;
        if (!value) {
            return;
        }
        if (this.pickerStart && this.pickerStart.config) {
            this.pickerStart.setDate(value[0]);
        }
        if (this.pickerEnd && this.pickerEnd.config) {
            this.pickerEnd.setDate(value[1]);
            this.pickerEnd.set('minDate', value[0]);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        // this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
    }
    findPreset(value) {
        if (!this.presets) {
            return null;
        }
        if (isAbsolute(value)) {
            return this.presets.filter(p => p.absoluteRange).find(p => isEqual(p.absoluteRange, value));
        }
        else if (isRelative(value)) {
            return this.presets.filter(p => p.relativeRange).find(p => isEqual(p.relativeRange, value));
        }
    }
    isPreset(p) {
        return p.absoluteRange && this.absoluteValue && isEqual(this.absoluteValue, p.absoluteRange)
            || p.relativeRange && this.relativeValue && isEqual(this.relativeValue, p.relativeRange);
    }
    setPreset(preset) {
        if (preset.relativeRange) {
            this.relativeValue = preset.relativeRange;
            this.absoluteValue = getAbsoluteFromRelative(this.relativeValue);
            // this.tab = 'relative';
            this.updatePicker();
            this.notifyChange(this.relativeValue);
        }
        if (preset.absoluteRange) {
            this.absoluteValue = preset.absoluteRange;
            this.relativeValue = this.getRelativeFromAbsolute(this.absoluteValue);
            // this.tab = 'absolute';
            this.updatePicker();
            this.notifyChange(this.absoluteValue);
        }
    }
    getRelativeFromAbsolute(value, byDay = false) {
        const hf = this.options.enableTime && !byDay ? 60 * 60 * 1000 : 24 * 60 * 60 * 1000;
        const now = Math.floor(new Date().getTime() / hf) * hf;
        const start = Math.floor(new Date(value[0]).getTime() / hf) * hf;
        const end = Math.floor(new Date(value[1]).getTime() / hf) * hf;
        if (!byDay && Math.abs((start - now) / hf) > 48) {
            return this.getRelativeFromAbsolute(value, true);
        }
        return [start - now, end - now];
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DateRangePickerComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DateRangePickerComponent.prototype, "readonly", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DateRangePickerComponent.prototype, "allowRelative", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], DateRangePickerComponent.prototype, "presets", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DateRangePickerComponent.prototype, "startLabel", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DateRangePickerComponent.prototype, "endLabel", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DateRangePickerComponent.prototype, "absoluteLabel", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DateRangePickerComponent.prototype, "relativeLabel", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DateRangePickerComponent.prototype, "presetsLabel", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DateRangePickerComponent.prototype, "options", void 0);
tslib_1.__decorate([
    ViewChild('startDate', { static: false }),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DateRangePickerComponent.prototype, "initStartDateElement", null);
tslib_1.__decorate([
    ViewChild('endDate', { static: false }),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DateRangePickerComponent.prototype, "initEndDateElement", null);
DateRangePickerComponent = DateRangePickerComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'rb-date-range-picker',
        template: "<rb-tab-panel [renderHiddenTabs]=\"true\" (tabChanged)=\"tabChanged($event)\" [tab]=\"tab\">\r\n  <div *rbTabPanelItem=\"absoluteLabel; id: 'absolute'\" class=\"picker-calendars\">\r\n    <div class=\"startDate\" #startDate></div>\r\n    <div class=\"endDate\" #endDate></div>\r\n  </div>\r\n  <ng-container *ngIf=\"allowRelative\">\r\n    <div *rbTabPanelItem=\"relativeLabel; id: 'relative'\" class=\"picker-relative\">\r\n      <ng-container *ngIf=\"relativeValue\">\r\n        <rb-form-relative-time-input [label]=\"startLabel\" [ngModel]=\"relativeValue[0]\"\r\n                                     (ngModelChange)=\"updateRelativeValue($event, 0)\"></rb-form-relative-time-input>\r\n        <rb-form-relative-time-input [label]=\"endLabel\" [ngModel]=\"relativeValue[1]\"\r\n                                     (ngModelChange)=\"updateRelativeValue($event, 1)\"></rb-form-relative-time-input>\r\n      </ng-container>\r\n\r\n    </div>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"presets?.length\">\r\n    <div *rbTabPanelItem=\"presetsLabel; id: 'preset'\">\r\n      <div *ngFor=\"let p of presets\">\r\n        <ng-container *ngIf=\"allowRelative && p.relativeRange || p.absoluteRange\">\r\n          <a href=\"javascript:\" class=\"rb-dropdown-item\" [class.active]=\"isPreset(p)\" (click)=\"setPreset(p)\">{{p.label}}</a>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</rb-tab-panel>\r\n",
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DateRangePickerComponent_1), multi: true }]
    }),
    tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(FLATPICKR_DEFAULT_OPTIONS)),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ElementRef, Object])
], DateRangePickerComponent);
export { DateRangePickerComponent };
function toISOString(data) {
    if (typeof data === 'string' || typeof data === 'number') {
        return new Date(data).toISOString();
    }
    else if (data instanceof Date) {
        return data.toISOString();
    }
    return '';
}
function getAbsoluteFromRelative(value) {
    const now = new Date().getTime();
    const start = toISOString(now + value[0]);
    const end = toISOString(now + value[1]);
    return [start, end];
}
function isEqual(value1, value2) {
    return value1 === value2 || value1[0] === value2[0] && value1[1] === value2[1];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1yYW5nZS1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImF0b21zL2Zvcm0tZGF0ZS1maWVsZHMvZGF0ZS1yYW5nZS1waWNrZXIvZGF0ZS1yYW5nZS1waWNrZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLE1BQU0sRUFDTixLQUFLLEVBR0wsUUFBUSxFQUNSLFNBQVMsRUFFVCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxTQUFTLEVBQUUsS0FBSyxlQUFlLE1BQU0sV0FBVyxDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUN6RixPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUdMLFVBQVUsRUFDVixVQUFVLEVBSVgsTUFBTSwyQkFBMkIsQ0FBQztBQUVuQyxNQUFNLGFBQWEsR0FBRyxlQUFrQyxDQUFDLENBQUMsa0NBQWtDO0FBRzVGLE1BQU0sa0JBQWtCLEdBQThCO0lBQ3BELFNBQVMsRUFBRSxJQUFJO0NBQ2hCLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBOEI7SUFDakQsTUFBTSxFQUFFLElBQUk7SUFDWixJQUFJLEVBQUUsUUFBUTtDQUNmLENBQUM7QUFPRixJQUFhLHdCQUF3QixnQ0FBckMsTUFBYSx3QkFBd0I7SUF1Q25DLFlBQW9CLFFBQW1CLEVBQ25CLFVBQXNCLEVBQ3lCLGNBQW1CO1FBRmxFLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN5QixtQkFBYyxHQUFkLGNBQWMsQ0FBSztRQW5D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Q0FBQztBQUN0QixDQUFDO0FBR0QsU0FBUyxPQUFPLENBQUMsTUFBbUIsRUFBRSxNQUFtQjtJQUN2RCxPQUFPLE1BQU0sS0FBSyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIGZvcndhcmRSZWYsXHJcbiAgSW5qZWN0LFxyXG4gIElucHV0LFxyXG4gIE9uRGVzdHJveSxcclxuICBPbkluaXQsXHJcbiAgT3B0aW9uYWwsXHJcbiAgUmVuZGVyZXIyLFxyXG4gIFRlbXBsYXRlUmVmLFxyXG4gIFZpZXdDaGlsZFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgZmxhdHBpY2tyLCAqIGFzIGZsYXRwaWNrckltcG9ydCBmcm9tICdmbGF0cGlja3InO1xyXG5pbXBvcnQgeyBlbXB0eUZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vZm9ybS1maWVsZHMvZm9ybXMtdXRpbCc7XHJcbmltcG9ydCB7IEZMQVRQSUNLUl9ERUZBVUxUX09QVElPTlMgfSBmcm9tICcuLi9mb3JtLWRhdGUtaW5wdXQvZm9ybS1kYXRlLWlucHV0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHtcclxuICBBYnNvbHV0ZVBpY2tlclZhbHVlLFxyXG4gIERhdGVSYW5nZVBpY2tlclByZXNldCxcclxuICBpc0Fic29sdXRlLFxyXG4gIGlzUmVsYXRpdmUsXHJcbiAgUGlja2VyTW9kZSxcclxuICBQaWNrZXJWYWx1ZSxcclxuICBSZWxhdGl2ZVBpY2tlclZhbHVlXHJcbn0gZnJvbSAnLi9kYXRlLXJhbmdlLXBpY2tlci5tb2RlbCc7XHJcblxyXG5jb25zdCBmbGF0cGlja3JGdW5jID0gZmxhdHBpY2tySW1wb3J0IGFzIGFueSBhcyBGdW5jdGlvbjsgLy8gd29ya2Fyb3VuZCBmb3Igcm9sbHVwIGFuZCB0ZXN0c1xyXG5cclxuXHJcbmNvbnN0IG92ZXJyaWRhYmxlT3B0aW9uczogZmxhdHBpY2tyLk9wdGlvbnMuT3B0aW9ucyA9IHtcclxuICB0aW1lXzI0aHI6IHRydWUsXHJcbn07XHJcblxyXG5jb25zdCBlbmZvcmNlZE9wdGlvbnM6IGZsYXRwaWNrci5PcHRpb25zLk9wdGlvbnMgPSB7XHJcbiAgaW5saW5lOiB0cnVlLFxyXG4gIG1vZGU6ICdzaW5nbGUnXHJcbn07XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3JiLWRhdGUtcmFuZ2UtcGlja2VyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZGF0ZS1yYW5nZS1waWNrZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUiwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRGF0ZVJhbmdlUGlja2VyQ29tcG9uZW50KSwgbXVsdGk6IHRydWV9XSxcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGVSYW5nZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XHJcblxyXG4gIEBJbnB1dCgpIG5hbWU7XHJcblxyXG4gIEBJbnB1dCgpIHJlYWRvbmx5O1xyXG5cclxuICBASW5wdXQoKSBhbGxvd1JlbGF0aXZlID0gZmFsc2U7XHJcbiAgQElucHV0KCkgcHJlc2V0czogRGF0ZVJhbmdlUGlja2VyUHJlc2V0W10gPSBbXTtcclxuXHJcbiAgQElucHV0KCkgc3RhcnRMYWJlbDogc3RyaW5nIHwgVGVtcGxhdGVSZWY8YW55PiA9ICdTdGFydCc7XHJcbiAgQElucHV0KCkgZW5kTGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4gPSAnRW5kJztcclxuICBASW5wdXQoKSBhYnNvbHV0ZUxhYmVsOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+ID0gJ0Fic29sdXRlJztcclxuICBASW5wdXQoKSByZWxhdGl2ZUxhYmVsOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+ID0gJ1JlbGF0aXZlJztcclxuICBASW5wdXQoKSBwcmVzZXRzTGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4gPSAnUHJlc2V0cyc7XHJcblxyXG4gIHRhYiA9ICdhYnNvbHV0ZSc7XHJcblxyXG4gIG1vZGU6IFBpY2tlck1vZGUgPSAnYWJzb2x1dGUnO1xyXG5cclxuICBwcml2YXRlIHBpY2tlclN0YXJ0OiBmbGF0cGlja3IuSW5zdGFuY2U7XHJcbiAgcHJpdmF0ZSBwaWNrZXJFbmQ6IGZsYXRwaWNrci5JbnN0YW5jZTtcclxuXHJcbiAgLyoqXHJcbiAgICogT3B0aW9ucyBmb3IgRmxhdHBpY2tyXHJcbiAgICogQHNlZSBodHRwczovL2ZsYXRwaWNrci5qcy5vcmcvb3B0aW9ucy9cclxuICAgKi9cclxuICBASW5wdXQoKSBvcHRpb25zOiBmbGF0cGlja3IuT3B0aW9ucy5PcHRpb25zID0ge307XHJcblxyXG4gIHByaXZhdGUgb25DaGFuZ2UgPSBlbXB0eUZ1bmN0aW9uO1xyXG4gIHByaXZhdGUgb25Ub3VjaGVkID0gZW1wdHlGdW5jdGlvbjtcclxuXHJcbiAgcHJpdmF0ZSBhYnNvbHV0ZVZhbHVlOiBBYnNvbHV0ZVBpY2tlclZhbHVlID0gbnVsbDtcclxuXHJcbiAgcHJpdmF0ZSBpbml0aWFsVGFiQ2hhbmdlID0gdHJ1ZTtcclxuXHJcbiAgcmVsYXRpdmVWYWx1ZTogUmVsYXRpdmVQaWNrZXJWYWx1ZSA9IG51bGw7XHJcblxyXG4gIHByaXZhdGUgbGFzdE1vZGlmaWVkID0gbnVsbDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEZMQVRQSUNLUl9ERUZBVUxUX09QVElPTlMpIHByaXZhdGUgZGVmYXVsdE9wdGlvbnM6IGFueSkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5kZWZhdWx0T3B0aW9ucykge1xyXG4gICAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgLi4ub3ZlcnJpZGFibGVPcHRpb25zLFxyXG4gICAgICAgIC4uLnRoaXMuZGVmYXVsdE9wdGlvbnMsXHJcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLFxyXG4gICAgICAgIC4uLmVuZm9yY2VkT3B0aW9uc1xyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5vcHRpb25zID0ge1xyXG4gICAgICAgIC4uLm92ZXJyaWRhYmxlT3B0aW9ucyxcclxuICAgICAgICAuLi50aGlzLm9wdGlvbnMsXHJcbiAgICAgICAgLi4uZW5mb3JjZWRPcHRpb25zXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnBpY2tlclN0YXJ0KSB7XHJcbiAgICAgIHRoaXMucGlja2VyU3RhcnQuZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMucGlja2VyRW5kKSB7XHJcbiAgICAgIHRoaXMucGlja2VyRW5kLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ3N0YXJ0RGF0ZScsIHtzdGF0aWM6IGZhbHNlfSkgc2V0IGluaXRTdGFydERhdGVFbGVtZW50KGVsKSB7XHJcbiAgICBpZiAoIWVsIHx8IGVsLm5hdGl2ZUVsZW1lbnQuX2ZsYXRwaWNrcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdGFydE9wdGlvbnMgPSB7XHJcbiAgICAgIC4uLnRoaXMub3B0aW9ucyxcclxuICAgICAgb25WYWx1ZVVwZGF0ZTogKHNlbGVjdGVkRGF0ZXM6IERhdGVbXSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdG9JU09TdHJpbmcoc2VsZWN0ZWREYXRlc1swXSk7XHJcbiAgICAgICAgdGhpcy5waWNrZXJFbmQuc2V0KCdtaW5EYXRlJywgc2VsZWN0ZWREYXRlc1swXSk7XHJcbiAgICAgICAgY29uc3QgZW5kID0gdG9JU09TdHJpbmcodGhpcy5waWNrZXJFbmQuc2VsZWN0ZWREYXRlc1swXSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVBYnNvbHV0ZVZhbHVlRnJvbVBpY2tlcihbc3RhcnQsIGVuZF0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy5waWNrZXJTdGFydCA9IGZsYXRwaWNrckZ1bmMoZWwubmF0aXZlRWxlbWVudCwgc3RhcnRPcHRpb25zKSBhcyBmbGF0cGlja3IuSW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICBAVmlld0NoaWxkKCdlbmREYXRlJywge3N0YXRpYzogZmFsc2V9KSBzZXQgaW5pdEVuZERhdGVFbGVtZW50KGVsKSB7XHJcbiAgICBpZiAoIWVsIHx8IGVsLm5hdGl2ZUVsZW1lbnQuX2ZsYXRwaWNrcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBlbmRPcHRpb25zID0ge1xyXG4gICAgICAuLi50aGlzLm9wdGlvbnMsXHJcbiAgICAgIG9uVmFsdWVVcGRhdGU6IChzZWxlY3RlZERhdGVzOiBEYXRlW10pID0+IHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IHRvSVNPU3RyaW5nKHRoaXMucGlja2VyU3RhcnQuc2VsZWN0ZWREYXRlc1swXSk7XHJcbiAgICAgICAgY29uc3QgZW5kID0gdG9JU09TdHJpbmcoc2VsZWN0ZWREYXRlc1swXSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVBYnNvbHV0ZVZhbHVlRnJvbVBpY2tlcihbc3RhcnQsIGVuZF0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy5waWNrZXJFbmQgPSBmbGF0cGlja3JGdW5jKGVsLm5hdGl2ZUVsZW1lbnQsIGVuZE9wdGlvbnMpIGFzIGZsYXRwaWNrci5JbnN0YW5jZTtcclxuICAgIHRoaXMudXBkYXRlUGlja2VyKCk7XHJcbiAgfVxyXG5cclxuICB0YWJDaGFuZ2VkKHRhYklkOiBzdHJpbmcpIHtcclxuICAgIGlmICh0aGlzLmluaXRpYWxUYWJDaGFuZ2UgfHwgdGhpcy50YWIgPT09IHRhYklkKSB7XHJcbiAgICAgIHRoaXMuaW5pdGlhbFRhYkNoYW5nZSA9IGZhbHNlO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnRhYiA9IHRhYklkO1xyXG4gICAgaWYgKHRhYklkID09PSAnYWJzb2x1dGUnKSB7XHJcbiAgICAgIHRoaXMubW9kZSA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgIHRoaXMubm90aWZ5Q2hhbmdlKHRoaXMuYWJzb2x1dGVWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGFiSWQgPT09ICdyZWxhdGl2ZScpIHtcclxuICAgICAgdGhpcy5tb2RlID0gJ3JlbGF0aXZlJztcclxuICAgICAgdGhpcy5ub3RpZnlDaGFuZ2UodGhpcy5yZWxhdGl2ZVZhbHVlKTtcclxuICAgIH1cclxuICAgIGlmICh0YWJJZCA9PT0gJ3ByZXNldCcpIHtcclxuXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGVBYnNvbHV0ZVZhbHVlRnJvbVBpY2tlcih2YWx1ZTogQWJzb2x1dGVQaWNrZXJWYWx1ZSkge1xyXG4gICAgaWYgKHRoaXMudGFiICE9PSAnYWJzb2x1dGUnXHJcbiAgICAgIHx8IHRoaXMuYWJzb2x1dGVWYWx1ZSAmJiB0aGlzLmFic29sdXRlVmFsdWVbMF0gPT09IHZhbHVlWzBdICYmIHRoaXMuYWJzb2x1dGVWYWx1ZVsxXSA9PT0gdmFsdWVbMV0pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hYnNvbHV0ZVZhbHVlID0gdmFsdWU7XHJcbiAgICB0aGlzLnJlbGF0aXZlVmFsdWUgPSB0aGlzLmdldFJlbGF0aXZlRnJvbUFic29sdXRlKHZhbHVlKTtcclxuICAgIHRoaXMubm90aWZ5Q2hhbmdlKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVJlbGF0aXZlVmFsdWUodmFsdWUsIGluZGV4KSB7XHJcbiAgICBpZiAoaW5kZXggPT09IDApIHtcclxuICAgICAgdGhpcy5yZWxhdGl2ZVZhbHVlID0gW3ZhbHVlLCB0aGlzLnJlbGF0aXZlVmFsdWVbMV1dO1xyXG4gICAgfVxyXG4gICAgaWYgKGluZGV4ID09PSAxKSB7XHJcbiAgICAgIHRoaXMucmVsYXRpdmVWYWx1ZSA9IFt0aGlzLnJlbGF0aXZlVmFsdWVbMF0sIHZhbHVlXTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFic29sdXRlVmFsdWUgPSBnZXRBYnNvbHV0ZUZyb21SZWxhdGl2ZSh0aGlzLnJlbGF0aXZlVmFsdWUpO1xyXG4gICAgdGhpcy51cGRhdGVQaWNrZXIoKTtcclxuICAgIHRoaXMubm90aWZ5Q2hhbmdlKHRoaXMucmVsYXRpdmVWYWx1ZSk7XHJcbiAgfVxyXG5cclxuICBub3RpZnlDaGFuZ2UodmFsdWUpIHtcclxuICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5sYXN0TW9kaWZpZWQgfHwgaXNFcXVhbCh2YWx1ZSwgdGhpcy5sYXN0TW9kaWZpZWQpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMubGFzdE1vZGlmaWVkID0gdmFsdWU7XHJcbiAgICB0aGlzLm9uQ2hhbmdlKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHdyaXRlVmFsdWUodmFsdWU6IFBpY2tlclZhbHVlKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5hbGxvd1JlbGF0aXZlICYmIGlzUmVsYXRpdmUodmFsdWUpKSB7XHJcbiAgICAgIHRoaXMubW9kZSA9ICdyZWxhdGl2ZSc7XHJcbiAgICAgIHRoaXMudGFiID0gJ3JlbGF0aXZlJztcclxuICAgICAgdGhpcy5yZWxhdGl2ZVZhbHVlID0gdmFsdWUgYXMgUmVsYXRpdmVQaWNrZXJWYWx1ZTtcclxuICAgICAgdGhpcy5hYnNvbHV0ZVZhbHVlID0gZ2V0QWJzb2x1dGVGcm9tUmVsYXRpdmUodGhpcy5yZWxhdGl2ZVZhbHVlKTtcclxuICAgICAgaWYgKHRoaXMuZmluZFByZXNldCh0aGlzLnJlbGF0aXZlVmFsdWUpKSB7XHJcbiAgICAgICAgdGhpcy50YWIgPSAncHJlc2V0JztcclxuICAgICAgfVxyXG5cclxuICAgIH0gZWxzZSBpZiAoaXNBYnNvbHV0ZSh2YWx1ZSkpIHtcclxuICAgICAgdGhpcy5tb2RlID0gJ2Fic29sdXRlJztcclxuICAgICAgdGhpcy50YWIgPSAnYWJzb2x1dGUnO1xyXG4gICAgICB0aGlzLnJlbGF0aXZlVmFsdWUgPSB0aGlzLmdldFJlbGF0aXZlRnJvbUFic29sdXRlKHZhbHVlIGFzIEFic29sdXRlUGlja2VyVmFsdWUpO1xyXG4gICAgICB0aGlzLmFic29sdXRlVmFsdWUgPSB2YWx1ZSBhcyBBYnNvbHV0ZVBpY2tlclZhbHVlO1xyXG4gICAgICBpZiAodGhpcy5maW5kUHJlc2V0KHRoaXMuYWJzb2x1dGVWYWx1ZSkpIHtcclxuICAgICAgICB0aGlzLnRhYiA9ICdwcmVzZXQnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmxhc3RNb2RpZmllZCA9IHZhbHVlO1xyXG4gICAgdGhpcy51cGRhdGVQaWNrZXIoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlUGlja2VyKCkge1xyXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmFic29sdXRlVmFsdWU7XHJcbiAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnBpY2tlclN0YXJ0ICYmIHRoaXMucGlja2VyU3RhcnQuY29uZmlnKSB7XHJcbiAgICAgIHRoaXMucGlja2VyU3RhcnQuc2V0RGF0ZSh2YWx1ZVswXSk7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5waWNrZXJFbmQgJiYgdGhpcy5waWNrZXJFbmQuY29uZmlnKSB7XHJcbiAgICAgIHRoaXMucGlja2VyRW5kLnNldERhdGUodmFsdWVbMV0pO1xyXG4gICAgICB0aGlzLnBpY2tlckVuZC5zZXQoJ21pbkRhdGUnLCB2YWx1ZVswXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XHJcbiAgfVxyXG5cclxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcclxuICB9XHJcblxyXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgLy8gdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmlucHV0Lm5hdGl2ZUVsZW1lbnQsICdkaXNhYmxlZCcsIGlzRGlzYWJsZWQpO1xyXG4gIH1cclxuXHJcbiAgZmluZFByZXNldCh2YWx1ZTogUGlja2VyVmFsdWUpOiBEYXRlUmFuZ2VQaWNrZXJQcmVzZXQge1xyXG4gICAgaWYgKCF0aGlzLnByZXNldHMpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNBYnNvbHV0ZSh2YWx1ZSkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucHJlc2V0cy5maWx0ZXIocCA9PiBwLmFic29sdXRlUmFuZ2UpLmZpbmQocCA9PiBpc0VxdWFsKHAuYWJzb2x1dGVSYW5nZSwgdmFsdWUpKTtcclxuICAgIH0gZWxzZSBpZiAoaXNSZWxhdGl2ZSh2YWx1ZSkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucHJlc2V0cy5maWx0ZXIocCA9PiBwLnJlbGF0aXZlUmFuZ2UpLmZpbmQocCA9PiBpc0VxdWFsKHAucmVsYXRpdmVSYW5nZSwgdmFsdWUpKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBpc1ByZXNldChwOiBEYXRlUmFuZ2VQaWNrZXJQcmVzZXQpIHtcclxuICAgIHJldHVybiBwLmFic29sdXRlUmFuZ2UgJiYgdGhpcy5hYnNvbHV0ZVZhbHVlICYmIGlzRXF1YWwodGhpcy5hYnNvbHV0ZVZhbHVlLCBwLmFic29sdXRlUmFuZ2UpXHJcbiAgICAgIHx8IHAucmVsYXRpdmVSYW5nZSAmJiB0aGlzLnJlbGF0aXZlVmFsdWUgJiYgaXNFcXVhbCh0aGlzLnJlbGF0aXZlVmFsdWUsIHAucmVsYXRpdmVSYW5nZSk7XHJcbiAgfVxyXG5cclxuICBzZXRQcmVzZXQocHJlc2V0OiBEYXRlUmFuZ2VQaWNrZXJQcmVzZXQpIHtcclxuICAgIGlmIChwcmVzZXQucmVsYXRpdmVSYW5nZSkge1xyXG4gICAgICB0aGlzLnJlbGF0aXZlVmFsdWUgPSBwcmVzZXQucmVsYXRpdmVSYW5nZTtcclxuICAgICAgdGhpcy5hYnNvbHV0ZVZhbHVlID0gZ2V0QWJzb2x1dGVGcm9tUmVsYXRpdmUodGhpcy5yZWxhdGl2ZVZhbHVlKTtcclxuICAgICAgLy8gdGhpcy50YWIgPSAncmVsYXRpdmUnO1xyXG4gICAgICB0aGlzLnVwZGF0ZVBpY2tlcigpO1xyXG4gICAgICB0aGlzLm5vdGlmeUNoYW5nZSh0aGlzLnJlbGF0aXZlVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKHByZXNldC5hYnNvbHV0ZVJhbmdlKSB7XHJcbiAgICAgIHRoaXMuYWJzb2x1dGVWYWx1ZSA9IHByZXNldC5hYnNvbHV0ZVJhbmdlO1xyXG4gICAgICB0aGlzLnJlbGF0aXZlVmFsdWUgPSB0aGlzLmdldFJlbGF0aXZlRnJvbUFic29sdXRlKHRoaXMuYWJzb2x1dGVWYWx1ZSk7XHJcbiAgICAgIC8vIHRoaXMudGFiID0gJ2Fic29sdXRlJztcclxuICAgICAgdGhpcy51cGRhdGVQaWNrZXIoKTtcclxuICAgICAgdGhpcy5ub3RpZnlDaGFuZ2UodGhpcy5hYnNvbHV0ZVZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFJlbGF0aXZlRnJvbUFic29sdXRlKHZhbHVlOiBBYnNvbHV0ZVBpY2tlclZhbHVlLCBieURheSA9IGZhbHNlKTogUmVsYXRpdmVQaWNrZXJWYWx1ZSB7XHJcbiAgICBjb25zdCBoZiA9IHRoaXMub3B0aW9ucy5lbmFibGVUaW1lICYmICFieURheSA/IDYwICogNjAgKiAxMDAwIDogMjQgKiA2MCAqIDYwICogMTAwMDtcclxuICAgIGNvbnN0IG5vdyA9IE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyBoZikgKiBoZjtcclxuICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5mbG9vcihuZXcgRGF0ZSh2YWx1ZVswXSkuZ2V0VGltZSgpIC8gaGYpICogaGY7XHJcbiAgICBjb25zdCBlbmQgPSBNYXRoLmZsb29yKG5ldyBEYXRlKHZhbHVlWzFdKS5nZXRUaW1lKCkgLyBoZikgKiBoZjtcclxuICAgIGlmICghYnlEYXkgJiYgTWF0aC5hYnMoKHN0YXJ0IC0gbm93KSAvIGhmKSA+IDQ4KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmdldFJlbGF0aXZlRnJvbUFic29sdXRlKHZhbHVlLCB0cnVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBbc3RhcnQgLSBub3csIGVuZCAtIG5vd107XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gdG9JU09TdHJpbmcoZGF0YTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSkge1xyXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGRhdGEgPT09ICdudW1iZXInKSB7XHJcbiAgICByZXR1cm4gbmV3IERhdGUoZGF0YSkudG9JU09TdHJpbmcoKTtcclxuICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICByZXR1cm4gZGF0YS50b0lTT1N0cmluZygpO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEFic29sdXRlRnJvbVJlbGF0aXZlKHZhbHVlOiBSZWxhdGl2ZVBpY2tlclZhbHVlKTogQWJzb2x1dGVQaWNrZXJWYWx1ZSB7XHJcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgY29uc3Qgc3RhcnQgPSB0b0lTT1N0cmluZyhub3cgKyAodmFsdWVbMF0gYXMgbnVtYmVyKSk7XHJcbiAgY29uc3QgZW5kID0gdG9JU09TdHJpbmcobm93ICsgKHZhbHVlWzFdIGFzIG51bWJlcikpO1xyXG4gIHJldHVybiBbc3RhcnQsIGVuZF07XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBpc0VxdWFsKHZhbHVlMTogUGlja2VyVmFsdWUsIHZhbHVlMjogUGlja2VyVmFsdWUpIHtcclxuICByZXR1cm4gdmFsdWUxID09PSB2YWx1ZTIgfHwgdmFsdWUxWzBdID09PSB2YWx1ZTJbMF0gJiYgdmFsdWUxWzFdID09PSB2YWx1ZTJbMV07XHJcbn1cclxuIl19