import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, Input, Optional, QueryList } from '@angular/core';
import { NgControl } from '@angular/forms';
let FormErrorsComponent = class FormErrorsComponent {
    constructor(control, cd) {
        this.control = control;
        this.cd = cd;
        this.errors = [];
    }
    ngOnInit() {
        if (this.control) {
            this.sub = this.control.statusChanges.subscribe(value => {
                this.errors = this.getErrors();
                this.cd.markForCheck();
            });
        }
    }
    ngOnDestroy() {
        if (this.sub) {
            this.sub.unsubscribe();
        }
    }
    ngDoCheck() {
        this.errors = this.getErrors();
    }
    getErrors() {
        const errors = [];
        if (this.control && this.control.errors && (this.control.touched || this.control.dirty)) {
            const errorKeys = Object.keys(this.control.errors);
            for (const key of errorKeys) {
                const message = this.messages.find(item => item.name === key);
                if (message && (message.onTouched || !message.onTouched && this.control.dirty)) {
                    errors.push({
                        name: key,
                        data: this.control.errors[key],
                        message: message.templateRef
                    });
                }
            }
        }
        return errors;
    }
    getItemName(i, item) {
        return item.name;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", QueryList)
], FormErrorsComponent.prototype, "messages", void 0);
FormErrorsComponent = tslib_1.__decorate([
    Component({
        selector: 'rb-form-errors',
        template: "<div class=\"error-messages\" *ngIf=\"control && control.invalid && errors.length\">\n  <div *ngFor=\"let item of errors; trackBy: getItemName\">\n    <ng-container *ngTemplateOutlet=\"item.message; context: item\"></ng-container>\n  </div>\n</div>\n"
    }),
    tslib_1.__param(0, Optional()),
    tslib_1.__metadata("design:paramtypes", [NgControl,
        ChangeDetectorRef])
], FormErrorsComponent);
export { FormErrorsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1lcnJvcnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImF0b21zL2Zvcm0tZmllbGRzL2Zvcm0tZXJyb3JzL2Zvcm0tZXJyb3JzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBVyxLQUFLLEVBQXFCLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTzNDLElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0lBUTlCLFlBQStCLE9BQWtCLEVBQzdCLEVBQXFCO1FBRFYsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUM3QixPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUx6QyxXQUFNLEdBQUcsRUFBRSxDQUFDO0lBTVosQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3RELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUMvQixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFFSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxTQUFTO1FBQ1AsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdkYsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25ELEtBQUssTUFBTSxHQUFHLElBQUksU0FBUyxFQUFFO2dCQUMzQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBQzlELElBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDOUUsTUFBTSxDQUFDLElBQUksQ0FBQzt3QkFDVixJQUFJLEVBQUUsR0FBRzt3QkFDVCxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO3dCQUM5QixPQUFPLEVBQUUsT0FBTyxDQUFDLFdBQVc7cUJBQzdCLENBQUMsQ0FBQztpQkFDSjthQUNGO1NBQ0Y7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0NBRUYsQ0FBQTtBQXBEVTtJQUFSLEtBQUssRUFBRTtzQ0FBVyxTQUFTO3FEQUFpQztBQUZsRCxtQkFBbUI7SUFKL0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGdCQUFnQjtRQUMxQixzUUFBMkM7S0FDNUMsQ0FBQztJQVNhLG1CQUFBLFFBQVEsRUFBRSxDQUFBOzZDQUFpQixTQUFTO1FBQ3pCLGlCQUFpQjtHQVQ5QixtQkFBbUIsQ0FzRC9CO1NBdERZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIERvQ2hlY2ssIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3B0aW9uYWwsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9ybVZhbGlkYXRpb25NZXNzYWdlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZm9ybS12YWxpZGF0aW9uLW1lc3NhZ2UuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncmItZm9ybS1lcnJvcnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1lcnJvcnMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1FcnJvcnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgRG9DaGVjayB7XG5cbiAgQElucHV0KCkgbWVzc2FnZXM6IFF1ZXJ5TGlzdDxGb3JtVmFsaWRhdGlvbk1lc3NhZ2VEaXJlY3RpdmU+O1xuXG4gIGVycm9ycyA9IFtdO1xuXG4gIHByaXZhdGUgc3ViO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHB1YmxpYyBjb250cm9sOiBOZ0NvbnRyb2wsXG4gICAgICAgICAgICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICB0aGlzLnN1YiA9IHRoaXMuY29udHJvbC5zdGF0dXNDaGFuZ2VzLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5nZXRFcnJvcnMoKTtcbiAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3ViKSB7XG4gICAgICB0aGlzLnN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIG5nRG9DaGVjaygpOiB2b2lkIHtcbiAgICB0aGlzLmVycm9ycyA9IHRoaXMuZ2V0RXJyb3JzKCk7XG4gIH1cblxuICBnZXRFcnJvcnMoKSB7XG4gICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgaWYgKHRoaXMuY29udHJvbCAmJiB0aGlzLmNvbnRyb2wuZXJyb3JzICYmICh0aGlzLmNvbnRyb2wudG91Y2hlZCB8fCB0aGlzLmNvbnRyb2wuZGlydHkpKSB7XG4gICAgICBjb25zdCBlcnJvcktleXMgPSBPYmplY3Qua2V5cyh0aGlzLmNvbnRyb2wuZXJyb3JzKTtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIGVycm9yS2V5cykge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5tZXNzYWdlcy5maW5kKGl0ZW0gPT4gaXRlbS5uYW1lID09PSBrZXkpO1xuICAgICAgICBpZiAobWVzc2FnZSAmJiAobWVzc2FnZS5vblRvdWNoZWQgfHwgIW1lc3NhZ2Uub25Ub3VjaGVkICYmIHRoaXMuY29udHJvbC5kaXJ0eSkpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICBkYXRhOiB0aGlzLmNvbnRyb2wuZXJyb3JzW2tleV0sXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLnRlbXBsYXRlUmVmXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycztcbiAgfVxuXG4gIGdldEl0ZW1OYW1lKGksIGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS5uYW1lO1xuICB9XG5cbn1cbiJdfQ==