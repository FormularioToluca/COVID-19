import * as tslib_1 from "tslib";
var FormMultiSelectComponent_1;
import { Component, ContentChild, ContentChildren, Directive, ElementRef, forwardRef, HostListener, Input, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { emptyFunction } from '../forms-util';
let MultiSelectOptionDirective = class MultiSelectOptionDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
MultiSelectOptionDirective = tslib_1.__decorate([
    Directive({
        selector: '[rbFormMultiSelectOption]'
    }),
    tslib_1.__metadata("design:paramtypes", [TemplateRef])
], MultiSelectOptionDirective);
export { MultiSelectOptionDirective };
let MultiSelectTitleDirective = class MultiSelectTitleDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
};
MultiSelectTitleDirective = tslib_1.__decorate([
    Directive({
        selector: '[rbFormMultiSelectTitle]'
    }),
    tslib_1.__metadata("design:paramtypes", [TemplateRef])
], MultiSelectTitleDirective);
export { MultiSelectTitleDirective };
/**
 * Use this component to have multiple selections.
 * The value is a map of id -> state.
 * The items are an array of objects.
 * To identify the id of an object from the items array, provide the idField.
 */
let FormMultiSelectComponent = FormMultiSelectComponent_1 = class FormMultiSelectComponent {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.label = null;
        this.id = 'multiSelect.' + Math.random();
        this.selectAllLabel = 'Select all';
        this.isMouseOver = false;
        /**
         * Property name of the property that contains the unique value of an item
         * Otherwise the JSON rep is used as value
         */
        this.idField = null;
        /**
         * What states should be offered per item
         * check: just checked(true) and unchecked(false)
         * optCheck: unchecked(null), include(true), exclude(false)
         */
        this.statesMode = 'check';
        this.numStates = 2;
        this._states = {
            'check': [false, true],
            'optCheck': [null, false, true]
        };
        this.maxItemsPreview = 3;
        this.allStates = null;
        this.countNotDefState = 0;
        this.firstNotDefStateItem = null;
        this._value = {};
        this.titleContext = {
            $implicit: null,
            count: 0,
            firstItem: null,
            states: null
        };
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
        this.getItemTrackId = (i, item) => {
            return this.getItemId(item.item);
        };
    }
    ngOnInit() {
        const states = this.getStates();
        this.numStates = states.length;
        this.allStates = states[0];
    }
    isLabelTemplate() {
        return this.label instanceof TemplateRef;
    }
    set items(items) {
        const states = this.getStates();
        this._items = items.map(item => {
            const id = this.getItemId(item);
            let state = states[0];
            if (this._value && this._value[id] !== undefined) {
                state = this._value[id];
            }
            return {
                item: item,
                state: state
            };
        });
        this.doOnChanges();
    }
    getItemId(item) {
        if (this.idField && item) {
            return item[this.idField];
        }
        else {
            return JSON.stringify(item);
        }
    }
    getStates() {
        return this._states[this.statesMode];
    }
    allStatesChange(state) {
        this.allStates = state;
        if (!this._items) {
            return;
        }
        this._items.forEach(item => {
            item.state = state;
        });
        this.notifyChanges();
    }
    updateStateOfItem(item, state) {
        item.state = state;
        if (this._items.some(d => d.state !== state)) {
            const states = this.getStates();
            this.allStates = states[0];
        }
        else {
            this.allStates = state;
        }
        this.notifyChanges();
    }
    getCurrentStatesObject() {
        const states = {};
        this._items.forEach(item => {
            const id = this.getItemId(item.item);
            states[id] = item.state;
        });
        return states;
    }
    doOnChanges() {
        this.firstNotDefStateItem = null;
        this.countNotDefState = 0;
        const states = this.getStates();
        if (!this._items) {
            return;
        }
        this._items.forEach(item => {
            if (item.state !== states[0]) {
                this.countNotDefState++;
                if (this.firstNotDefStateItem === null) {
                    this.firstNotDefStateItem = item;
                }
            }
        });
        this.titleContext = {
            $implicit: this._items,
            count: this.countNotDefState,
            firstItem: this.firstNotDefStateItem,
            states: this._value
        };
        if (this.countNotDefState === 0 && this.selectAllLabel === '') {
            this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
        }
        else {
            this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
        }
    }
    notifyChanges() {
        this.doOnChanges();
        this.onChange(this.getCurrentStatesObject());
    }
    mouseover() {
        this.isMouseOver = true;
    }
    mouseleave() {
        this.isMouseOver = false;
    }
    writeValue(items) {
        this._value = items;
        if (items) {
            const states = this.getStates();
            this._items.forEach(item => {
                const id = this.getItemId(item.item);
                if (items[id] !== undefined) {
                    item.state = items[id];
                }
                else {
                    item.state = states[0];
                }
            });
        }
        this.doOnChanges();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormMultiSelectComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormMultiSelectComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormMultiSelectComponent.prototype, "selectAllLabel", void 0);
tslib_1.__decorate([
    ContentChildren(FormValidationMessageDirective),
    tslib_1.__metadata("design:type", QueryList)
], FormMultiSelectComponent.prototype, "messages", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormMultiSelectComponent.prototype, "idField", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormMultiSelectComponent.prototype, "statesMode", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormMultiSelectComponent.prototype, "maxItemsPreview", void 0);
tslib_1.__decorate([
    ContentChild(MultiSelectOptionDirective, { static: false }),
    tslib_1.__metadata("design:type", MultiSelectOptionDirective)
], FormMultiSelectComponent.prototype, "option", void 0);
tslib_1.__decorate([
    ContentChild(MultiSelectTitleDirective, { static: false }),
    tslib_1.__metadata("design:type", MultiSelectTitleDirective)
], FormMultiSelectComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], FormMultiSelectComponent.prototype, "items", null);
tslib_1.__decorate([
    HostListener('mouseenter'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], FormMultiSelectComponent.prototype, "mouseover", null);
tslib_1.__decorate([
    HostListener('mouseleave'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], FormMultiSelectComponent.prototype, "mouseleave", null);
FormMultiSelectComponent = FormMultiSelectComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'rb-form-multi-select',
        template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <button [rbDropdown]=\"dropdownContent\"\r\n          [id]=\"id\"\r\n          [autoClose]=\"false\"\r\n          [disabled]=\"disabled !== undefined\"\r\n          (blur)=\"onTouched()\"\r\n          class=\"rb-select-btn input\">\r\n\r\n    <ng-container *ngIf=\"title\">\r\n      <ng-container *ngTemplateOutlet=\"title.templateRef; context: titleContext\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!title\">\r\n      <ng-container *ngIf=\"titleContext.count === 1\">\r\n        <ng-container *ngIf=\"option\">\r\n          <ng-container\r\n            *ngTemplateOutlet=\"option.templateRef; context: {$implicit: titleContext.firstItem.item}\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!option\">\r\n          {{titleContext.firstItem.item | json}}\r\n        </ng-container>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"titleContext.count > 1\">{{titleContext.count}} items selected</ng-container>\r\n    </ng-container>\r\n\r\n  </button>\r\n\r\n  <label [for]=\"id\" class=\"label rb-select-label\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"select-icon rb-ic rb-ic-down\"></span>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n\r\n\r\n<ng-template #dropdownContent>\r\n  <ng-container *ngIf=\"selectAllLabel\">\r\n    <rb-form-multi-checkbox [numStates]=\"numStates\"\r\n                            class=\"list-item-input\"\r\n                            [ngModel]=\"allStates\"\r\n                            (ngModelChange)=\"allStatesChange($event)\">\r\n      {{selectAllLabel}}\r\n    </rb-form-multi-checkbox>\r\n    <hr class=\"no-margin\">\r\n  </ng-container>\r\n\r\n  <div class=\"dropdown-limited\">\r\n    <ng-container *ngFor=\"let item of _items; trackBy: getItemTrackId\">\r\n      <rb-form-multi-checkbox [numStates]=\"numStates\"\r\n                              class=\"list-item-input\"\r\n                              [ngModel]=\"item.state\"\r\n                              (ngModelChange)=\"updateStateOfItem(item, $event)\">\r\n        <ng-container *ngIf=\"option\">\r\n          <ng-container *ngTemplateOutlet=\"option.templateRef; context: {$implicit: item.item}\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!option\">\r\n          {{item.item | json}}\r\n        </ng-container>\r\n      </rb-form-multi-checkbox>\r\n    </ng-container>\r\n  </div>\r\n\r\n</ng-template>\r\n",
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormMultiSelectComponent_1), multi: true }]
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef])
], FormMultiSelectComponent);
export { FormMultiSelectComponent };
//# sourceMappingURL=data:application/json;base64,