import * as tslib_1 from "tslib";
var FormSelectComponent_1;
import { ChangeDetectorRef, Component, ElementRef, forwardRef, Inject, Optional, Renderer2, Self } from '@angular/core';
import { CUSTOM_VALUE_CONVERTER, FormInputComponent } from '../form-input/form-input.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
let FormSelectComponent = FormSelectComponent_1 = class FormSelectComponent extends FormInputComponent {
    constructor(renderer, elementRef, valueConverter, cd) {
        super(renderer, elementRef, valueConverter, cd);
    }
};
FormSelectComponent = FormSelectComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'rb-form-select',
        template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <select class=\"input select\"\r\n          [id]=\"id + 'input'\"\r\n          (blur)=\"onTouched()\"\r\n          (change)=\"updateValue($event.target.value)\" #input>\r\n    <ng-content></ng-content>\r\n  </select>\r\n\r\n  <label [for]=\"id + 'input'\" class=\"label select-label\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"select-icon rb-ic rb-ic-down\"></span>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormSelectComponent_1), multi: true }]
    }),
    tslib_1.__param(2, Optional()), tslib_1.__param(2, Self()), tslib_1.__param(2, Inject(CUSTOM_VALUE_CONVERTER)),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ElementRef, Object, ChangeDetectorRef])
], FormSelectComponent);
export { FormSelectComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1zZWxlY3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImF0b21zL2Zvcm0tZmllbGRzL2Zvcm0tc2VsZWN0L2Zvcm0tc2VsZWN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEgsT0FBTyxFQUFFLHNCQUFzQixFQUF3QixrQkFBa0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3RILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBT25ELElBQWEsbUJBQW1CLDJCQUFoQyxNQUFhLG1CQUFvQixTQUFRLGtCQUFrQjtJQUV6RCxZQUFZLFFBQW1CLEVBQ25CLFVBQXNCLEVBQzhCLGNBQW9DLEVBQ3hGLEVBQXFCO1FBQy9CLEtBQUssQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBRUYsQ0FBQTtBQVRZLG1CQUFtQjtJQUwvQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsZ0JBQWdCO1FBQzFCLGd1QkFBMkM7UUFDM0MsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxxQkFBbUIsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQztLQUMzRyxDQUFDO0lBS2EsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxtQkFBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBOzZDQUZ6QyxTQUFTO1FBQ1AsVUFBVSxVQUVsQixpQkFBaUI7R0FMdEIsbUJBQW1CLENBUy9CO1NBVFksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgSW5qZWN0LCBPcHRpb25hbCwgUmVuZGVyZXIyLCBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENVU1RPTV9WQUxVRV9DT05WRVJURVIsIEN1c3RvbVZhbHVlQ29udmVydGVyLCBGb3JtSW5wdXRDb21wb25lbnQgfSBmcm9tICcuLi9mb3JtLWlucHV0L2Zvcm0taW5wdXQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3JiLWZvcm0tc2VsZWN0JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1zZWxlY3QuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUiwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRm9ybVNlbGVjdENvbXBvbmVudCksIG11bHRpOiB0cnVlfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZvcm1TZWxlY3RDb21wb25lbnQgZXh0ZW5kcyBGb3JtSW5wdXRDb21wb25lbnQge1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgICAgICAgIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgQFNlbGYoKSBASW5qZWN0KENVU1RPTV9WQUxVRV9DT05WRVJURVIpIHZhbHVlQ29udmVydGVyOiBDdXN0b21WYWx1ZUNvbnZlcnRlcixcclxuICAgICAgICAgICAgICBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyLCBlbGVtZW50UmVmLCB2YWx1ZUNvbnZlcnRlciwgY2QpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19