import * as tslib_1 from "tslib";
var FormTextareaComponent_1;
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, forwardRef, Inject, Optional, Renderer2, Self } from '@angular/core';
import { CUSTOM_VALUE_CONVERTER, FormInputComponent } from '../form-input/form-input.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
let FormTextareaComponent = FormTextareaComponent_1 = class FormTextareaComponent extends FormInputComponent {
    constructor(renderer, elementRef, valueConverter, cd) {
        super(renderer, elementRef, valueConverter, cd);
    }
};
FormTextareaComponent = FormTextareaComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'rb-form-textarea',
        template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <textarea [id]=\"id + 'input'\" class=\"textarea\"\r\n            (blur)=\"onTouched()\" (input)=\"updateValue($event.target.value)\"\r\n            [readonly]=\"isReadonly()\"\r\n            [placeholder]=\"placeholder\"\r\n            #input></textarea>\r\n\r\n  <label [for]=\"id + 'input'\" class=\"label\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormTextareaComponent_1), multi: true }],
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__param(2, Optional()), tslib_1.__param(2, Self()), tslib_1.__param(2, Inject(CUSTOM_VALUE_CONVERTER)),
    tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef, Object, ChangeDetectorRef])
], FormTextareaComponent);
export { FormTextareaComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS10ZXh0YXJlYS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXRvbXMvZm9ybS1maWVsZHMvZm9ybS10ZXh0YXJlYS9mb3JtLXRleHRhcmVhLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLE1BQU0sRUFDTixRQUFRLEVBQ1IsU0FBUyxFQUNULElBQUksRUFDTCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsc0JBQXNCLEVBQXdCLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDdEgsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFRbkQsSUFBYSxxQkFBcUIsNkJBQWxDLE1BQWEscUJBQXNCLFNBQVEsa0JBQWtCO0lBRTNELFlBQVksUUFBbUIsRUFBRSxVQUFzQixFQUNTLGNBQW9DLEVBQ3hGLEVBQXFCO1FBQy9CLEtBQUssQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBRUYsQ0FBQTtBQVJZLHFCQUFxQjtJQU5qQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsa0JBQWtCO1FBQzVCLGdzQkFBNkM7UUFDN0MsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBcUIsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQztRQUM1RyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtLQUNoRCxDQUFDO0lBSWEsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxtQkFBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFBOzZDQUR6QyxTQUFTLEVBQWMsVUFBVSxVQUV2QyxpQkFBaUI7R0FKdEIscUJBQXFCLENBUWpDO1NBUlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBDb21wb25lbnQsXHJcbiAgRWxlbWVudFJlZixcclxuICBmb3J3YXJkUmVmLFxyXG4gIEluamVjdCxcclxuICBPcHRpb25hbCxcclxuICBSZW5kZXJlcjIsXHJcbiAgU2VsZlxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDVVNUT01fVkFMVUVfQ09OVkVSVEVSLCBDdXN0b21WYWx1ZUNvbnZlcnRlciwgRm9ybUlucHV0Q29tcG9uZW50IH0gZnJvbSAnLi4vZm9ybS1pbnB1dC9mb3JtLWlucHV0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdyYi1mb3JtLXRleHRhcmVhJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS10ZXh0YXJlYS5jb21wb25lbnQuaHRtbCcsXHJcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBGb3JtVGV4dGFyZWFDb21wb25lbnQpLCBtdWx0aTogdHJ1ZX1dLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGb3JtVGV4dGFyZWFDb21wb25lbnQgZXh0ZW5kcyBGb3JtSW5wdXRDb21wb25lbnQge1xyXG5cclxuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgIEBPcHRpb25hbCgpIEBTZWxmKCkgQEluamVjdChDVVNUT01fVkFMVUVfQ09OVkVSVEVSKSB2YWx1ZUNvbnZlcnRlcjogQ3VzdG9tVmFsdWVDb252ZXJ0ZXIsXHJcbiAgICAgICAgICAgICAgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XHJcbiAgICBzdXBlcihyZW5kZXJlciwgZWxlbWVudFJlZiwgdmFsdWVDb252ZXJ0ZXIsIGNkKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==