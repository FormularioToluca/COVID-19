import * as tslib_1 from "tslib";
var FormCheckboxComponent_1;
import { Component, ContentChildren, ElementRef, forwardRef, Input, QueryList, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { emptyFunction } from '../forms-util';
let FormCheckboxComponent = FormCheckboxComponent_1 = class FormCheckboxComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.id = 'checkbox.' + Math.random();
        this.label = null;
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
    }
    updateValue(value) {
        this.onChange(value);
    }
    isLabelTemplate() {
        return this.label instanceof TemplateRef;
    }
    writeValue(value) {
        this.renderer.setProperty(this.input.nativeElement, 'checked', value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], FormCheckboxComponent.prototype, "required", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], FormCheckboxComponent.prototype, "noValidation", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormCheckboxComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormCheckboxComponent.prototype, "label", void 0);
tslib_1.__decorate([
    ViewChild('input', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], FormCheckboxComponent.prototype, "input", void 0);
tslib_1.__decorate([
    ContentChildren(FormValidationMessageDirective),
    tslib_1.__metadata("design:type", QueryList)
], FormCheckboxComponent.prototype, "messages", void 0);
FormCheckboxComponent = FormCheckboxComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'rb-form-checkbox',
        template: "<div class=\"input-wrapper\" [class.disabled]=\"input.disabled\">\r\n  <label [for]=\"id + 'input'\">\r\n    <input type=\"checkbox\" class=\"checkbox-control\"\r\n           (blur)=\"onTouched()\" (change)=\"updateValue($event.target.checked)\"\r\n           [id]=\"id + 'input'\" #input>\r\n\r\n    <span class=\"checkbox-icon\">\r\n      <span class=\"check rb-ic rb-ic-checkmark\"></span>\r\n    </span>\r\n\r\n    <span class=\"label-text\">\r\n      {{!isLabelTemplate()?label:''}}\r\n      <ng-container *ngIf=\"isLabelTemplate()\">\r\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n      </ng-container>\r\n      <ng-content></ng-content>\r\n    </span>\r\n\r\n  </label>\r\n\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormCheckboxComponent_1), multi: true }]
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2])
], FormCheckboxComponent);
export { FormCheckboxComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jaGVja2JveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXRvbXMvZm9ybS1maWVsZHMvZm9ybS1jaGVja2JveC9mb3JtLWNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SSxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdEYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVE5QyxJQUFhLHFCQUFxQiw2QkFBbEMsTUFBYSxxQkFBcUI7SUFpQmhDLFlBQW9CLFFBQW1CO1FBQW5CLGFBQVEsR0FBUixRQUFRLENBQVc7UUFmdkMsT0FBRSxHQUFHLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFLeEIsVUFBSyxHQUE4QixJQUFJLENBQUM7UUFPakQsYUFBUSxHQUFHLGFBQWEsQ0FBQztRQUN6QixjQUFTLEdBQUcsYUFBYSxDQUFDO0lBRzFCLENBQUM7SUFFRCxXQUFXLENBQUMsS0FBSztRQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLFlBQVksV0FBVyxDQUFDO0lBQzNDLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBVTtRQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELGdCQUFnQixDQUFDLEVBQWtCO1FBQ2pDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxFQUFZO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxVQUFtQjtRQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDOUUsQ0FBQztDQUNGLENBQUE7QUF4Q1U7SUFBUixLQUFLLEVBQUU7O3VEQUFtQjtBQUNsQjtJQUFSLEtBQUssRUFBRTs7MkRBQXVCO0FBQ3RCO0lBQVIsS0FBSyxFQUFFOzttREFBYztBQUViO0lBQVIsS0FBSyxFQUFFOztvREFBeUM7QUFHWDtJQUFyQyxTQUFTLENBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO3NDQUFRLFVBQVU7b0RBQUM7QUFFUDtJQUFoRCxlQUFlLENBQUMsOEJBQThCLENBQUM7c0NBQVcsU0FBUzt1REFBaUM7QUFaMUYscUJBQXFCO0lBTGpDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIsd3hCQUE2QztRQUM3QyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHVCQUFxQixDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDO0tBQzdHLENBQUM7NkNBa0I4QixTQUFTO0dBakI1QixxQkFBcUIsQ0EyQ2pDO1NBM0NZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBJbnB1dCwgUXVlcnlMaXN0LCBSZW5kZXJlcjIsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBGb3JtVmFsaWRhdGlvbk1lc3NhZ2VEaXJlY3RpdmUgfSBmcm9tICcuLi9mb3JtLXZhbGlkYXRpb24tbWVzc2FnZS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBlbXB0eUZ1bmN0aW9uIH0gZnJvbSAnLi4vZm9ybXMtdXRpbCc7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdyYi1mb3JtLWNoZWNrYm94JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1jaGVja2JveC5jb21wb25lbnQuaHRtbCcsXHJcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBGb3JtQ2hlY2tib3hDb21wb25lbnQpLCBtdWx0aTogdHJ1ZX1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGb3JtQ2hlY2tib3hDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XHJcblxyXG4gIGlkID0gJ2NoZWNrYm94LicgKyBNYXRoLnJhbmRvbSgpO1xyXG4gIEBJbnB1dCgpIHJlcXVpcmVkOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIG5vVmFsaWRhdGlvbjogYm9vbGVhbjtcclxuICBASW5wdXQoKSBuYW1lOiBzdHJpbmc7XHJcblxyXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+ID0gbnVsbDtcclxuXHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2lucHV0JywgeyBzdGF0aWM6IHRydWUgfSkgaW5wdXQ6IEVsZW1lbnRSZWY7XHJcblxyXG4gIEBDb250ZW50Q2hpbGRyZW4oRm9ybVZhbGlkYXRpb25NZXNzYWdlRGlyZWN0aXZlKSBtZXNzYWdlczogUXVlcnlMaXN0PEZvcm1WYWxpZGF0aW9uTWVzc2FnZURpcmVjdGl2ZT47XHJcblxyXG4gIG9uQ2hhbmdlID0gZW1wdHlGdW5jdGlvbjtcclxuICBvblRvdWNoZWQgPSBlbXB0eUZ1bmN0aW9uO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVZhbHVlKHZhbHVlKSB7XHJcbiAgICB0aGlzLm9uQ2hhbmdlKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGlzTGFiZWxUZW1wbGF0ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmxhYmVsIGluc3RhbmNlb2YgVGVtcGxhdGVSZWY7XHJcbiAgfVxyXG5cclxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LCAnY2hlY2tlZCcsIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHt9KTogdm9pZCB7XHJcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XHJcbiAgfVxyXG5cclxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4ge30pOiB2b2lkIHtcclxuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XHJcbiAgfVxyXG5cclxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnLCBpc0Rpc2FibGVkKTtcclxuICB9XHJcbn1cclxuIl19