import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, HostListener, Inject, Injector, Input, Optional, Self, TemplateRef, ViewContainerRef } from '@angular/core';
import { NEVER, of, Subject } from 'rxjs';
import { DropdownDirective } from '../../dropdown/dropdown.directive';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { catchError, debounceTime, skip, switchMap, takeUntil, tap } from 'rxjs/operators';
import { FormInputAutocompleteListComponent } from './form-input-autocomplete-list/form-input-autocomplete-list.component';
let FormInputAutocompleteDirective = class FormInputAutocompleteDirective extends DropdownDirective {
    constructor(_factoryResolver, injector, viewContainerRef, control, inputs) {
        super(_factoryResolver, viewContainerRef);
        this._factoryResolver = _factoryResolver;
        this.injector = injector;
        this.control = control;
        /**
         * Should the dropdown open on initial click without any value change
         */
        this.rbInitialOpen = false;
        this.rbDebounceTime = 500;
        this.destroy = new Subject();
        this.loading = false;
        this.error = null;
        this.lastResult = null;
        this.focus = null;
        this.input = null;
        this.noSearchFor = null;
        if (inputs) {
            this.input = inputs[0];
        }
        this.openOnClick = false;
    }
    ngOnInit() {
        super.ngOnInit();
        if (this.rbInitialOpen) {
            this.openOnClick = true;
        }
        if (!this.rbAutocompleteList) {
            const factory = this._factoryResolver.resolveComponentFactory(FormInputAutocompleteListComponent);
            const component = factory.create(this.injector);
            this.instance = component.instance;
            this.rbAutocompleteList = component.instance.template;
        }
        this.template = this.rbAutocompleteList;
        this.updateLoading(false, null);
        let changes = 0;
        let resolvedValue = null;
        this.control.valueChanges.pipe(debounceTime(this.rbDebounceTime), switchMap(value => {
            changes++;
            if (changes === 1 && !this.rbInitialOpen || resolvedValue === value || this.noSearchFor === value) {
                return NEVER;
            }
            resolvedValue = value;
            this.updateLoading(true, null);
            const result = this.rbFormInputAutocomplete(value);
            if (result) {
                return result.pipe(tap(() => this.updateLoading(false, null), err => this.updateLoading(false, err), () => this.updateLoading(false, null)), catchError(err => of(null)), takeUntil(this.control.valueChanges.pipe(skip(1))));
            }
            else {
                this.updateLoading(false, null);
                return of(null);
            }
        }), takeUntil(this.destroy)).subscribe(results => {
            this.openOnClick = true;
            this.lastResult = results;
            if (results !== null && !results.includes(resolvedValue)) {
                this.focus = null;
            }
            this.updateContext(this.control.value);
            if (results !== null && (!this.componentRef || !this.componentRef.instance.shown) && changes > 1) {
                this.openDropdown();
            }
            if (results === null) {
                this.closeDropdown();
            }
        });
    }
    ngAfterViewInit() {
        if (this.input && this.input.input) {
            this.input.input.nativeElement.autocomplete = 'off';
        }
    }
    updateLoading(loading, error) {
        this.loading = loading;
        this.error = error;
        if (this.error) {
            const errors = this.control.errors || {};
            errors['autocomplete'] = this.error;
            this.control.control.setErrors(errors);
        }
        if (this.input && this.loading) {
            this.input.updateIcon('rb-ic rb-ic-spin rb-ic-refresh');
        }
        if (this.input && !this.loading) {
            this.input.updateIcon(this.rbInitialOpen ? 'select-icon rb-ic rb-ic-down' : null);
        }
        if (this.input && this.error) {
            this.input.updateIcon('rb-ic rb-ic-alert-warning u-TextColor--red');
        }
    }
    select(value) {
        this.noSearchFor = value;
        this.control.control.setValue(value);
        this.focus = value;
        this.closeDropdown();
        this.updateContext(value);
    }
    onKeyUp(e) {
        if (e.key === 'ArrowDown' || e.key === 'Down') {
            e.preventDefault();
            this.moveFocus(1);
        }
        if (e.key === 'ArrowUp' || e.key === 'Up') {
            e.preventDefault();
            this.moveFocus(-1);
        }
        if (e.key === 'Enter' && this.componentRef && this.componentRef.instance.shown) {
            e.preventDefault();
            this.select(this.focus);
        }
    }
    moveFocus(by) {
        const list = this.lastResult || [];
        if (!list.length) {
            this.focus = null;
            this.updateContext(this.control.value);
            return;
        }
        let focusIndex = list.indexOf(this.focus);
        if (focusIndex === -1) {
            focusIndex = 0;
        }
        else {
            focusIndex += by;
            if (focusIndex === -1) {
                focusIndex = list.length - 1;
            }
            if (focusIndex === list.length) {
                focusIndex = 0;
            }
        }
        this.focus = list[focusIndex];
        this.updateContext(this.control.value);
    }
    updateContext(value) {
        this.context = {
            list: this.lastResult,
            active: value,
            focus: this.focus,
            select: this.select.bind(this)
        };
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.destroy.complete();
        this.input = null;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function)
], FormInputAutocompleteDirective.prototype, "rbFormInputAutocomplete", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], FormInputAutocompleteDirective.prototype, "rbAutocompleteList", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormInputAutocompleteDirective.prototype, "rbInitialOpen", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormInputAutocompleteDirective.prototype, "rbDebounceTime", void 0);
tslib_1.__decorate([
    HostListener('keyup', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
    tslib_1.__metadata("design:returntype", void 0)
], FormInputAutocompleteDirective.prototype, "onKeyUp", null);
FormInputAutocompleteDirective = tslib_1.__decorate([
    Directive({
        selector: '[rbFormInputAutocomplete]',
    }),
    tslib_1.__param(3, Self()),
    tslib_1.__param(4, Self()), tslib_1.__param(4, Optional()), tslib_1.__param(4, Inject(NG_VALUE_ACCESSOR)),
    tslib_1.__metadata("design:paramtypes", [ComponentFactoryResolver,
        Injector,
        ViewContainerRef,
        NgControl, Array])
], FormInputAutocompleteDirective);
export { FormInputAutocompleteDirective };
//# sourceMappingURL=data:application/json;base64,