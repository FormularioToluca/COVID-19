import * as tslib_1 from "tslib";
var FormInputComponent_1;
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, forwardRef, Inject, InjectionToken, Input, Optional, QueryList, Renderer2, Self, TemplateRef, ViewChild } from '@angular/core';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { emptyFunction } from '../forms-util';
export const CUSTOM_VALUE_CONVERTER = new InjectionToken('formInputCustomValueConverter');
let FormInputComponent = FormInputComponent_1 = class FormInputComponent {
    constructor(renderer, elementRef, valueConverter, cd) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.valueConverter = valueConverter;
        this.cd = cd;
        this.placeholder = '';
        this.label = null;
        this.type = 'text';
        this.id = 'input.' + Math.random();
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
    }
    ngAfterViewInit() {
        if (this.autofocus) {
            this.focus();
        }
        if (this.autocomplete !== undefined) {
            this.input.nativeElement.autocomplete = this.autocomplete;
        }
    }
    focus() {
        this.input.nativeElement.focus();
    }
    updateIcon(icon) {
        this.icon = icon;
        this.cd.detectChanges();
    }
    isReadonly() {
        return !!(this.readonly === '' || this.readonly);
    }
    updateValue(value) {
        this.checkValue(value);
        if (this.valueConverter) {
            this.onChange(this.valueConverter.valueToModel(value));
        }
        else {
            this.onChange(value);
        }
    }
    checkValue(value) {
        if (typeof (value) === 'string' && value.length > 0) {
            this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
        }
    }
    isLabelTemplate() {
        return this.label instanceof TemplateRef;
    }
    writeValue(value) {
        if (this.valueConverter) {
            value = this.valueConverter.modelToValue(value);
        }
        if (value === null || value === undefined) {
            value = '';
        }
        else {
            value = String(value);
        }
        this.checkValue(value);
        this.renderer.setProperty(this.input.nativeElement, 'value', value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
    }
    set maxlength(maxLength) {
        if (maxLength) {
            this.renderer.setAttribute(this.input.nativeElement, 'maxlength', maxLength);
        }
        else {
            this.renderer.removeAttribute(this.input.nativeElement, 'maxlength');
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormInputComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormInputComponent.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormInputComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormInputComponent.prototype, "type", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormInputComponent.prototype, "readonly", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormInputComponent.prototype, "autocomplete", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormInputComponent.prototype, "icon", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], FormInputComponent.prototype, "autofocus", void 0);
tslib_1.__decorate([
    ContentChildren(FormValidationMessageDirective),
    tslib_1.__metadata("design:type", QueryList)
], FormInputComponent.prototype, "messages", void 0);
tslib_1.__decorate([
    ViewChild('input', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], FormInputComponent.prototype, "input", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], FormInputComponent.prototype, "maxlength", null);
FormInputComponent = FormInputComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'rb-form-input',
        template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <input [type]=\"type\" [id]=\"id + 'input'\"\r\n         class=\"input\"\r\n         [class.with-icon]=\"icon\"\r\n         [placeholder]=\"placeholder\"\r\n         [autofocus]=\"autofocus\"\r\n         (blur)=\"onTouched()\"\r\n         (input)=\"updateValue($event.target.value)\"\r\n         [readonly]=\"isReadonly()\"\r\n         #input>\r\n  <span *ngIf=\"icon\" [ngClass]=\"'input-icon '+icon\"></span>\r\n  <label class=\"label\" [for]=\"id + 'input'\">\r\n    {{!isLabelTemplate() ? label : ''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormInputComponent_1), multi: true }],
        exportAs: 'rbFormInput',
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__param(2, Optional()), tslib_1.__param(2, Self()), tslib_1.__param(2, Inject(CUSTOM_VALUE_CONVERTER)),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ElementRef, Object, ChangeDetectorRef])
], FormInputComponent);
export { FormInputComponent };
//# sourceMappingURL=data:application/json;base64,