import * as tslib_1 from "tslib";
var FormFileComponent_1;
import { Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Input, Output, QueryList, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { emptyFunction } from '../forms-util';
let FormFileComponent = FormFileComponent_1 = class FormFileComponent {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.label = null;
        this.placeholder = '';
        this.filesChange = new EventEmitter();
        this.id = 'file.' + Math.random();
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
        this.filePreview = '';
    }
    checkSelectedFiles() {
        const fileNames = [];
        const files = [];
        for (let i = 0; i < this.file.nativeElement.files.length; i++) {
            const file = this.file.nativeElement.files[i];
            files.push(file);
            if (file.name) {
                fileNames.push(file.name);
            }
        }
        if (files.length === 0) {
            this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
        }
        else {
            this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
        }
        this.filePreview = fileNames.join(', ');
        if (this.filePreview.length > 100) {
            this.filePreview = this.filePreview.substr(0, 97) + '... (' + fileNames.length + ')';
        }
        console.log('files', files);
        this.onChange(files);
    }
    isLabelTemplate() {
        return this.label instanceof TemplateRef;
    }
    writeValue(value) {
        // console.warn('unsupported write to rb-form-file', value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.file.nativeElement, 'disabled', isDisabled);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormFileComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormFileComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormFileComponent.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], FormFileComponent.prototype, "filesChange", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormFileComponent.prototype, "accept", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormFileComponent.prototype, "multiple", void 0);
tslib_1.__decorate([
    ViewChild('file', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], FormFileComponent.prototype, "file", void 0);
tslib_1.__decorate([
    ContentChildren(FormValidationMessageDirective),
    tslib_1.__metadata("design:type", QueryList)
], FormFileComponent.prototype, "messages", void 0);
FormFileComponent = FormFileComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'rb-form-file',
        template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <input type=\"file\"\r\n         [id]=\"id + 'input'\"\r\n         [placeholder]=\"placeholder\"\r\n         [multiple]=\"multiple !== undefined\"\r\n         [accept]=\"accept\"\r\n         class=\"file-input with-icon\"\r\n         #file\r\n         (change)=\"checkSelectedFiles()\"\r\n         (blur)=\"onTouched()\">\r\n  <span class=\"input-icon no-pointer\">\r\n    <span class=\"rb-ic rb-ic-upload\"></span>\r\n  </span>\r\n\r\n  <label class=\"rb-btn rb-select-btn input\" [for]=\"id + 'input'\">{{filePreview}}</label>\r\n\r\n  <label class=\"label\" [for]=\"id + 'input'\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormFileComponent_1), multi: true }]
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef])
], FormFileComponent);
export { FormFileComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1maWxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJhdG9tcy9mb3JtLWZpZWxkcy9mb3JtLWZpbGUvZm9ybS1maWxlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsZUFBZSxFQUNmLFVBQVUsRUFDVixZQUFZLEVBQ1osVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBQ04sU0FBUyxFQUNULFNBQVMsRUFDVCxXQUFXLEVBQ1gsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3RGLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUTlDLElBQWEsaUJBQWlCLHlCQUE5QixNQUFhLGlCQUFpQjtJQW9CNUIsWUFBb0IsUUFBbUIsRUFBVSxVQUFzQjtRQUFuRCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQWxCOUQsVUFBSyxHQUE4QixJQUFJLENBQUM7UUFFeEMsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFFaEIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRW5ELE9BQUUsR0FBRyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBTzdCLGFBQVEsR0FBRyxhQUFhLENBQUM7UUFDekIsY0FBUyxHQUFHLGFBQWEsQ0FBQztRQUUxQixnQkFBVyxHQUFHLEVBQUUsQ0FBQztJQUdqQixDQUFDO0lBRUQsa0JBQWtCO1FBRWhCLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNyQixNQUFNLEtBQUssR0FBVyxFQUFFLENBQUM7UUFDekIsS0FB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QkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCxcclxuICBDb250ZW50Q2hpbGRyZW4sXHJcbiAgRWxlbWVudFJlZixcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgZm9yd2FyZFJlZixcclxuICBJbnB1dCxcclxuICBPdXRwdXQsXHJcbiAgUXVlcnlMaXN0LFxyXG4gIFJlbmRlcmVyMixcclxuICBUZW1wbGF0ZVJlZixcclxuICBWaWV3Q2hpbGRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybVZhbGlkYXRpb25NZXNzYWdlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZm9ybS12YWxpZGF0aW9uLW1lc3NhZ2UuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBlbXB0eUZ1bmN0aW9uIH0gZnJvbSAnLi4vZm9ybXMtdXRpbCc7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdyYi1mb3JtLWZpbGUnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9mb3JtLWZpbGUuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUiwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRm9ybUZpbGVDb21wb25lbnQpLCBtdWx0aTogdHJ1ZX1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGb3JtRmlsZUNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuXHJcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4gPSBudWxsO1xyXG4gIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcclxuICBASW5wdXQoKSBwbGFjZWhvbGRlciA9ICcnO1xyXG5cclxuICBAT3V0cHV0KCkgZmlsZXNDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPEZpbGVbXT4oKTtcclxuXHJcbiAgaWQgPSAnZmlsZS4nICsgTWF0aC5yYW5kb20oKTtcclxuICBASW5wdXQoKSBhY2NlcHQ6IHN0cmluZztcclxuICBASW5wdXQoKSBtdWx0aXBsZTtcclxuXHJcbiAgQFZpZXdDaGlsZCgnZmlsZScsIHsgc3RhdGljOiB0cnVlIH0pIGZpbGU6IEVsZW1lbnRSZWY7XHJcbiAgQENvbnRlbnRDaGlsZHJlbihGb3JtVmFsaWRhdGlvbk1lc3NhZ2VEaXJlY3RpdmUpIG1lc3NhZ2VzOiBRdWVyeUxpc3Q8Rm9ybVZhbGlkYXRpb25NZXNzYWdlRGlyZWN0aXZlPjtcclxuXHJcbiAgb25DaGFuZ2UgPSBlbXB0eUZ1bmN0aW9uO1xyXG4gIG9uVG91Y2hlZCA9IGVtcHR5RnVuY3Rpb247XHJcblxyXG4gIGZpbGVQcmV2aWV3ID0gJyc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgfVxyXG5cclxuICBjaGVja1NlbGVjdGVkRmlsZXMoKSB7XHJcblxyXG4gICAgY29uc3QgZmlsZU5hbWVzID0gW107XHJcbiAgICBjb25zdCBmaWxlczogRmlsZVtdID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmlsZS5uYXRpdmVFbGVtZW50LmZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGZpbGU6IEZpbGUgPSB0aGlzLmZpbGUubmF0aXZlRWxlbWVudC5maWxlc1tpXTtcclxuICAgICAgZmlsZXMucHVzaChmaWxlKTtcclxuICAgICAgaWYgKGZpbGUubmFtZSkge1xyXG4gICAgICAgIGZpbGVOYW1lcy5wdXNoKGZpbGUubmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoZmlsZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdub3QtZW1wdHknKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdub3QtZW1wdHknKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmZpbGVQcmV2aWV3ID0gZmlsZU5hbWVzLmpvaW4oJywgJyk7XHJcbiAgICBpZiAodGhpcy5maWxlUHJldmlldy5sZW5ndGggPiAxMDApIHtcclxuICAgICAgdGhpcy5maWxlUHJldmlldyA9IHRoaXMuZmlsZVByZXZpZXcuc3Vic3RyKDAsIDk3KSArICcuLi4gKCcgKyBmaWxlTmFtZXMubGVuZ3RoICsgJyknO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKCdmaWxlcycsIGZpbGVzKTtcclxuXHJcbiAgICB0aGlzLm9uQ2hhbmdlKGZpbGVzKTtcclxuXHJcbiAgfVxyXG5cclxuICBpc0xhYmVsVGVtcGxhdGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sYWJlbCBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmO1xyXG4gIH1cclxuXHJcbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICAvLyBjb25zb2xlLndhcm4oJ3Vuc3VwcG9ydGVkIHdyaXRlIHRvIHJiLWZvcm0tZmlsZScsIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xyXG4gIH1cclxuXHJcbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZmlsZS5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnLCBpc0Rpc2FibGVkKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==