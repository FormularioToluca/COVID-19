import * as tslib_1 from "tslib";
import { Component, ElementRef, Inject, Input, ViewChild } from '@angular/core';
import { FORM_SELECT_SELECTOR } from '../form-custom-select.model';
import { Subject } from 'rxjs';
let FormSelectOptionComponent = class FormSelectOptionComponent {
    constructor(selectSubject, elementRef) {
        this.selectSubject = selectSubject;
        this.elementRef = elementRef;
        this.active = false;
    }
    ngOnInit() {
        this.sub = this.selectSubject.subscribe(action => {
            this.active = action.value === this.value;
        });
    }
    ngOnDestroy() {
        if (this.sub) {
            this.sub.unsubscribe();
        }
    }
    select() {
        this.selectSubject.next({ type: 'update', value: this.value });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormSelectOptionComponent.prototype, "value", void 0);
tslib_1.__decorate([
    ViewChild('innerLink', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], FormSelectOptionComponent.prototype, "content", void 0);
FormSelectOptionComponent = tslib_1.__decorate([
    Component({
        selector: 'rb-form-select-option',
        template: "<a href=\"javascript:\" class=\"rb-dropdown-item\" [class.active]=\"active\" (click)=\"select()\" #innerLink>\r\n  <ng-content></ng-content>\r\n</a>\r\n"
    }),
    tslib_1.__param(0, Inject(FORM_SELECT_SELECTOR)),
    tslib_1.__metadata("design:paramtypes", [Subject,
        ElementRef])
], FormSelectOptionComponent);
export { FormSelectOptionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1zZWxlY3Qtb3B0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJhdG9tcy9mb3JtLWZpZWxkcy9mb3JtLWN1c3RvbS1zZWxlY3QvZm9ybS1zZWxlY3Qtb3B0aW9uL2Zvcm0tc2VsZWN0LW9wdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQXFCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRyxPQUFPLEVBQUUsb0JBQW9CLEVBQW9CLE1BQU0sNkJBQTZCLENBQUM7QUFDckYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQU0vQixJQUFhLHlCQUF5QixHQUF0QyxNQUFhLHlCQUF5QjtJQVVwQyxZQUFrRCxhQUF3QyxFQUN2RSxVQUFzQjtRQURTLGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQUN2RSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBUHpDLFdBQU0sR0FBRyxLQUFLLENBQUM7SUFTZixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDL0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztDQUVGLENBQUE7QUE3QlU7SUFBUixLQUFLLEVBQUU7O3dEQUFPO0FBTTJCO0lBQXpDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7c0NBQVUsVUFBVTswREFBQztBQVJuRCx5QkFBeUI7SUFKckMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLHVCQUF1QjtRQUNqQyxvS0FBa0Q7S0FDbkQsQ0FBQztJQVdhLG1CQUFBLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBOzZDQUF3QixPQUFPO1FBQ3pDLFVBQVU7R0FYOUIseUJBQXlCLENBK0JyQztTQS9CWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRk9STV9TRUxFQ1RfU0VMRUNUT1IsIEZvcm1TZWxlY3RBY3Rpb24gfSBmcm9tICcuLi9mb3JtLWN1c3RvbS1zZWxlY3QubW9kZWwnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3JiLWZvcm0tc2VsZWN0LW9wdGlvbicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2Zvcm0tc2VsZWN0LW9wdGlvbi5jb21wb25lbnQuaHRtbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZvcm1TZWxlY3RPcHRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIEBJbnB1dCgpIHZhbHVlO1xyXG5cclxuICBhY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgcHJpdmF0ZSBzdWI7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ2lubmVyTGluaycsIHsgc3RhdGljOiB0cnVlIH0pIGNvbnRlbnQ6IEVsZW1lbnRSZWY7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRk9STV9TRUxFQ1RfU0VMRUNUT1IpIHByaXZhdGUgc2VsZWN0U3ViamVjdDogU3ViamVjdDxGb3JtU2VsZWN0QWN0aW9uPixcclxuICAgICAgICAgICAgICBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xyXG5cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5zdWIgPSB0aGlzLnNlbGVjdFN1YmplY3Quc3Vic2NyaWJlKGFjdGlvbiA9PiB7XHJcbiAgICAgIHRoaXMuYWN0aXZlID0gYWN0aW9uLnZhbHVlID09PSB0aGlzLnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnN1Yikge1xyXG4gICAgICB0aGlzLnN1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2VsZWN0KCkge1xyXG4gICAgdGhpcy5zZWxlY3RTdWJqZWN0Lm5leHQoe3R5cGU6ICd1cGRhdGUnLCB2YWx1ZTogdGhpcy52YWx1ZX0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19