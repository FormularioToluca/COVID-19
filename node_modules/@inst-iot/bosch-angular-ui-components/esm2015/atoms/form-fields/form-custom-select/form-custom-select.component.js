import * as tslib_1 from "tslib";
var FormCustomSelectComponent_1;
import { Component, ContentChild, ContentChildren, ElementRef, forwardRef, HostListener, Inject, Input, QueryList, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { emptyFunction } from '../forms-util';
import { MultiSelectOptionDirective, MultiSelectTitleDirective } from '../form-multi-select/form-multi-select.component';
import { Subject } from 'rxjs';
import { FORM_SELECT_SELECTOR } from './form-custom-select.model';
import { FormSelectOptionComponent } from './form-select-option/form-select-option.component';
export function customSelectSelectorFactory() {
    return new Subject();
}
/**
 * This component offers a select field, that can be heavily customized.
 * The easy way would to just add options like this:
 * <rb-form-select-option [value]=""></rb-form-select-option>
 *
 * But you can also provide a selectionTpl which is a ng-template that is used to show the options in the dropdown.
 * It gets a context, that contains a select() function that can be used to provide the value for the ngModel.
 */
let FormCustomSelectComponent = FormCustomSelectComponent_1 = class FormCustomSelectComponent {
    constructor(renderer, elementRef, selectSubject) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.selectSubject = selectSubject;
        this.label = null;
        this.id = 'customSelectValue.' + Math.random();
        this.selectionTpl = null;
        this.autoClose = true;
        this.isMouseOver = false;
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
        this.value = null;
        this.updateValue = value => {
            this.value = value;
            this.onChange(value);
            this.checkValue(value);
        };
    }
    ngOnInit() {
        this.selectSub = this.selectSubject.subscribe(action => {
            if (action.type === 'update') {
                this.updateValue(action.value);
            }
        });
    }
    ngOnDestroy() {
        if (this.selectSub) {
            this.selectSub.unsubscribe();
        }
    }
    ngAfterViewInit() {
        this.updateCurrentLabel(this.value);
    }
    isLabelTemplate() {
        return this.label instanceof TemplateRef;
    }
    mouseover() {
        this.isMouseOver = true;
    }
    mouseleave() {
        this.isMouseOver = false;
    }
    writeValue(value) {
        this.value = value;
        this.selectSubject.next({ type: 'write', value });
        this.checkValue(value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    checkValue(value) {
        if (typeof (value) === 'string' && value.length > 0 || typeof (value) === 'number' || typeof (value) === 'boolean' || value) {
            this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
        }
        this.updateCurrentLabel(value);
    }
    updateCurrentLabel(value) {
        if (this.options && this.options.length) {
            const opt = this.options.find(item => item.value === value);
            if (opt) {
                this.activeElement.nativeElement.innerHTML = opt.content.nativeElement.innerHTML;
            }
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormCustomSelectComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormCustomSelectComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], FormCustomSelectComponent.prototype, "selectionTpl", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormCustomSelectComponent.prototype, "autoClose", void 0);
tslib_1.__decorate([
    ContentChildren(FormValidationMessageDirective),
    tslib_1.__metadata("design:type", QueryList)
], FormCustomSelectComponent.prototype, "messages", void 0);
tslib_1.__decorate([
    ContentChild(MultiSelectOptionDirective, { static: false }),
    tslib_1.__metadata("design:type", MultiSelectOptionDirective)
], FormCustomSelectComponent.prototype, "option", void 0);
tslib_1.__decorate([
    ContentChild(MultiSelectTitleDirective, { static: false }),
    tslib_1.__metadata("design:type", MultiSelectTitleDirective)
], FormCustomSelectComponent.prototype, "title", void 0);
tslib_1.__decorate([
    ContentChildren(FormSelectOptionComponent),
    tslib_1.__metadata("design:type", QueryList)
], FormCustomSelectComponent.prototype, "options", void 0);
tslib_1.__decorate([
    ViewChild('activeElement', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], FormCustomSelectComponent.prototype, "activeElement", void 0);
tslib_1.__decorate([
    HostListener('mouseenter'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], FormCustomSelectComponent.prototype, "mouseover", null);
tslib_1.__decorate([
    HostListener('mouseleave'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], FormCustomSelectComponent.prototype, "mouseleave", null);
FormCustomSelectComponent = FormCustomSelectComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'rb-form-custom-select',
        template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <button [rbDropdown]=\"dropdownContent\"\r\n          [id]=\"id\"\r\n          [autoClose]=\"autoClose\"\r\n          [disabled]=\"disabled !== undefined\"\r\n          (blur)=\"onTouched()\"\r\n          class=\"rb-select-btn input\">\r\n    <ng-container *ngIf=\"!options.length\">\r\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n    </ng-container>\r\n    <span #activeElement></span>\r\n  </button>\r\n\r\n  <label [for]=\"id\" class=\"label rb-select-label\">\r\n    {{!isLabelTemplate() ? label : ''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"select-icon rb-ic rb-ic-down\"></span>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n\r\n<ng-template #dropdownContent let-close=\"close\">\r\n  <ng-container *ngIf=\"options.length\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </ng-container>\r\n  <ng-container *ngTemplateOutlet=\"selectionTpl; context: {select: updateValue, close: close}\"></ng-container>\r\n</ng-template>\r\n",
        providers: [
            { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormCustomSelectComponent_1), multi: true },
            { provide: FORM_SELECT_SELECTOR, useFactory: customSelectSelectorFactory }
        ]
    }),
    tslib_1.__param(2, Inject(FORM_SELECT_SELECTOR)),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ElementRef,
        Subject])
], FormCustomSelectComponent);
export { FormCustomSelectComponent };
//# sourceMappingURL=data:application/json;base64,