import * as tslib_1 from "tslib";
var FormMultiCheckboxComponent_1;
import { Component, ContentChildren, ElementRef, forwardRef, Input, QueryList, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { emptyFunction } from '../forms-util';
let FormMultiCheckboxComponent = FormMultiCheckboxComponent_1 = class FormMultiCheckboxComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.id = 'multiCheckbox.' + Math.random();
        this.label = null;
        this.state = null;
        this.numStates = 2;
        this.stateLabels = ['stateNull', 'stateTrue', 'stateFalse'];
        this.statesValues = [null, true, false];
        this.stateLabel = this.stateLabels[0];
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
    }
    ngOnInit() {
        if (this.numStates === 2) {
            this.stateLabels = ['stateNull', 'stateTrue'];
            this.statesValues = [false, true];
            if (this.statesValues.indexOf(this.state) === -1) {
                this.state = this.statesValues[0];
            }
        }
        this.setState(this.state);
    }
    isLabelTemplate() {
        return this.label instanceof TemplateRef;
    }
    ngOnChanges(changes) {
        if (changes.state && !changes.state.firstChange) {
            this.state = changes.state.currentValue;
            this.setState(this.state);
        }
    }
    setState(stateValue) {
        const index = this.statesValues.indexOf(stateValue);
        this.stateLabel = this.stateLabels[index];
        this.renderer.setProperty(this.input.nativeElement, 'checked', this.stateLabel !== 'stateNull');
    }
    toggleState() {
        const index = this.stateLabels.indexOf(this.stateLabel);
        const newIndex = (index + 1) % this.stateLabels.length;
        this.state = this.statesValues[newIndex];
        this.setState(this.state);
        this.onChange(this.state);
    }
    writeValue(value) {
        this.setState(value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormMultiCheckboxComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormMultiCheckboxComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], FormMultiCheckboxComponent.prototype, "numStates", void 0);
tslib_1.__decorate([
    ViewChild('input', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], FormMultiCheckboxComponent.prototype, "input", void 0);
tslib_1.__decorate([
    ContentChildren(FormValidationMessageDirective),
    tslib_1.__metadata("design:type", QueryList)
], FormMultiCheckboxComponent.prototype, "messages", void 0);
tslib_1.__decorate([
    ViewChild('labelElement', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], FormMultiCheckboxComponent.prototype, "labelElement", void 0);
FormMultiCheckboxComponent = FormMultiCheckboxComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'rb-form-multi-checkbox',
        template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n  <label [for]=\"id + 'input'\" #labelElement [class]=\"stateLabel\">\r\n    <input type=\"checkbox\"\r\n           (change)=\"toggleState()\"\r\n           (blur)=\"onTouched()\"\r\n           class=\"checkbox-control\"\r\n           [id]=\"id + 'input'\"\r\n           #input>\r\n\r\n    <span class=\"checkbox-icon\">\r\n      <span class=\"check rb-ic rb-ic-checkmark\"></span>\r\n      <span class=\"cross rb-ic rb-ic-close\"></span>\r\n    </span>\r\n\r\n    <span class=\"label-text\">\r\n      {{!isLabelTemplate()?label:''}}\r\n      <ng-container *ngIf=\"isLabelTemplate()\">\r\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n      </ng-container>\r\n      <ng-content></ng-content>\r\n    </span>\r\n\r\n  </label>\r\n\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FormMultiCheckboxComponent_1), multi: true }]
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2])
], FormMultiCheckboxComponent);
export { FormMultiCheckboxComponent };
//# sourceMappingURL=data:application/json;base64,