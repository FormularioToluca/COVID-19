import * as tslib_1 from "tslib";
var FormNumberValidatorDirective_1;
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
let FormNumberValidatorDirective = FormNumberValidatorDirective_1 = class FormNumberValidatorDirective {
    constructor() {
    }
    validate(control) {
        if (control.value === '') {
            return null;
        }
        const value = typeof (control.value) === 'number' ? control.value : parseFloat(control.value);
        const errors = {};
        if (this.rbMin !== undefined && value < this.rbMin) {
            errors.rbMin = this.rbMin;
        }
        if (this.rbMax !== undefined && value > this.rbMax) {
            errors.rbMax = this.rbMax;
        }
        return Object.keys(errors).length ? errors : null;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], FormNumberValidatorDirective.prototype, "rbMin", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], FormNumberValidatorDirective.prototype, "rbMax", void 0);
FormNumberValidatorDirective = FormNumberValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: '[rbMin],[rbMax]',
        providers: [{
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => FormNumberValidatorDirective_1),
                multi: true
            }]
    }),
    tslib_1.__metadata("design:paramtypes", [])
], FormNumberValidatorDirective);
export { FormNumberValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1udW1iZXItdmFsaWRhdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJhdG9tcy9mb3JtLWZpZWxkcy92YWxpZGF0b3JzL2Zvcm0tbnVtYmVyLXZhbGlkYXRvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFtQixhQUFhLEVBQStCLE1BQU0sZ0JBQWdCLENBQUM7QUFVN0YsSUFBYSw0QkFBNEIsb0NBQXpDLE1BQWEsNEJBQTRCO0lBS3ZDO0lBQ0EsQ0FBQztJQUVELFFBQVEsQ0FBQyxPQUF3QjtRQUMvQixJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssRUFBRSxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5RixNQUFNLE1BQU0sR0FBcUIsRUFBRSxDQUFDO1FBQ3BDLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDbEQsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNsRCxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDM0I7UUFFRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNwRCxDQUFDO0NBR0YsQ0FBQTtBQXZCVTtJQUFSLEtBQUssRUFBRTs7MkRBQWU7QUFDZDtJQUFSLEtBQUssRUFBRTs7MkRBQWU7QUFIWiw0QkFBNEI7SUFSeEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQixTQUFTLEVBQUUsQ0FBQztnQkFDVixPQUFPLEVBQUUsYUFBYTtnQkFDdEIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyw4QkFBNEIsQ0FBQztnQkFDM0QsS0FBSyxFQUFFLElBQUk7YUFDWixDQUFDO0tBQ0gsQ0FBQzs7R0FDVyw0QkFBNEIsQ0F5QnhDO1NBekJZLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUywgVmFsaWRhdGlvbkVycm9ycywgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcmJNaW5dLFtyYk1heF0nLFxuICBwcm92aWRlcnM6IFt7XG4gICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBGb3JtTnVtYmVyVmFsaWRhdG9yRGlyZWN0aXZlKSxcbiAgICBtdWx0aTogdHJ1ZVxuICB9XVxufSlcbmV4cG9ydCBjbGFzcyBGb3JtTnVtYmVyVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcblxuICBASW5wdXQoKSByYk1pbjogbnVtYmVyO1xuICBASW5wdXQoKSByYk1heDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xuICAgIGlmIChjb250cm9sLnZhbHVlID09PSAnJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIChjb250cm9sLnZhbHVlKSA9PT0gJ251bWJlcicgPyBjb250cm9sLnZhbHVlIDogcGFyc2VGbG9hdChjb250cm9sLnZhbHVlKTtcbiAgICBjb25zdCBlcnJvcnM6IFZhbGlkYXRpb25FcnJvcnMgPSB7fTtcbiAgICBpZiAodGhpcy5yYk1pbiAhPT0gdW5kZWZpbmVkICYmIHZhbHVlIDwgdGhpcy5yYk1pbikge1xuICAgICAgZXJyb3JzLnJiTWluID0gdGhpcy5yYk1pbjtcbiAgICB9XG4gICAgaWYgKHRoaXMucmJNYXggIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+IHRoaXMucmJNYXgpIHtcbiAgICAgIGVycm9ycy5yYk1heCA9IHRoaXMucmJNYXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGVycm9ycykubGVuZ3RoID8gZXJyb3JzIDogbnVsbDtcbiAgfVxuXG5cbn1cbiJdfQ==