import * as tslib_1 from "tslib";
var FormFileValidatorDirective_1;
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
/* tslint:disable:directive-selector */
let FormFileValidatorDirective = FormFileValidatorDirective_1 = class FormFileValidatorDirective {
    constructor() {
    }
    ngOnChanges(changes) {
        if (this.onChange && (changes.min || changes.max || changes.maxSize)) {
            this.onChange();
        }
    }
    validate(c) {
        const errors = {};
        const minNumber = this.min ? parseInt(this.min, 10) : 0;
        const maxNumber = this.max ? parseInt(this.max, 10) : 0;
        const maxSize = this.maxSize ? parseInt(this.maxSize, 10) : 0;
        if (minNumber && (!c.value || Array.isArray(c.value) && c.value.length < minNumber)) {
            errors.min = true;
        }
        if (maxNumber && (!c.value || Array.isArray(c.value) && c.value.length > maxNumber)) {
            errors.max = true;
        }
        if (maxSize && Array.isArray(c.value)) {
            c.value.some((file) => {
                if (file.size > maxSize) {
                    errors.maxSize = file.name;
                    return true;
                }
                return false;
            });
        }
        return Object.keys(errors).length ? errors : null;
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormFileValidatorDirective.prototype, "min", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormFileValidatorDirective.prototype, "max", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormFileValidatorDirective.prototype, "maxSize", void 0);
FormFileValidatorDirective = FormFileValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: 'rb-form-file[min],rb-form-file[max],rb-form-file[min],rb-form-file[maxSize]',
        providers: [{
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => FormFileValidatorDirective_1),
                multi: true
            }]
    }),
    tslib_1.__metadata("design:paramtypes", [])
], FormFileValidatorDirective);
export { FormFileValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1maWxlLXZhbGlkYXRvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXRvbXMvZm9ybS1maWVsZHMvdmFsaWRhdG9ycy9mb3JtLWZpbGUtdmFsaWRhdG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFtQixhQUFhLEVBQStCLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0YsdUNBQXVDO0FBU3ZDLElBQWEsMEJBQTBCLGtDQUF2QyxNQUFhLDBCQUEwQjtJQVFyQztJQUNBLENBQUM7SUFHRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNwRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDakI7SUFDSCxDQUFDO0lBRUQsUUFBUSxDQUFDLENBQWtCO1FBQ3pCLE1BQU0sTUFBTSxHQUFxQixFQUFFLENBQUM7UUFDcEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUQsSUFBSSxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLEVBQUU7WUFDbkYsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7U0FDbkI7UUFDRCxJQUFJLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRTtZQUNuRixNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztTQUNuQjtRQUNELElBQUksT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3JDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBVSxFQUFFLEVBQUU7Z0JBQzFCLElBQUksSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLEVBQUU7b0JBQ3ZCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztvQkFDM0IsT0FBTyxJQUFJLENBQUM7aUJBQ2I7Z0JBQ0QsT0FBTyxLQUFLLENBQUM7WUFDZixDQUFDLENBQUMsQ0FBQztTQUNKO1FBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDcEQsQ0FBQztJQUVELHlCQUF5QixDQUFDLEVBQWM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztDQUNGLENBQUE7QUF4Q1U7SUFBUixLQUFLLEVBQUU7O3VEQUFhO0FBQ1o7SUFBUixLQUFLLEVBQUU7O3VEQUFhO0FBQ1o7SUFBUixLQUFLLEVBQUU7OzJEQUFpQjtBQU5kLDBCQUEwQjtJQVJ0QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsNkVBQTZFO1FBQ3ZGLFNBQVMsRUFBRSxDQUFDO2dCQUNWLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDRCQUEwQixDQUFDO2dCQUN6RCxLQUFLLEVBQUUsSUFBSTthQUNaLENBQUM7S0FDSCxDQUFDOztHQUNXLDBCQUEwQixDQTRDdEM7U0E1Q1ksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBJbnB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuLyogdHNsaW50OmRpc2FibGU6ZGlyZWN0aXZlLXNlbGVjdG9yICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdyYi1mb3JtLWZpbGVbbWluXSxyYi1mb3JtLWZpbGVbbWF4XSxyYi1mb3JtLWZpbGVbbWluXSxyYi1mb3JtLWZpbGVbbWF4U2l6ZV0nLFxuICBwcm92aWRlcnM6IFt7XG4gICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBGb3JtRmlsZVZhbGlkYXRvckRpcmVjdGl2ZSksXG4gICAgbXVsdGk6IHRydWVcbiAgfV1cbn0pXG5leHBvcnQgY2xhc3MgRm9ybUZpbGVWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uQ2hhbmdlcyB7XG5cbiAgcHJpdmF0ZSBvbkNoYW5nZTogKCkgPT4gdm9pZDtcblxuICBASW5wdXQoKSBtaW46IHN0cmluZztcbiAgQElucHV0KCkgbWF4OiBzdHJpbmc7XG4gIEBJbnB1dCgpIG1heFNpemU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmICh0aGlzLm9uQ2hhbmdlICYmIChjaGFuZ2VzLm1pbiB8fCBjaGFuZ2VzLm1heCB8fCBjaGFuZ2VzLm1heFNpemUpKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKCk7XG4gICAgfVxuICB9XG5cbiAgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xuICAgIGNvbnN0IGVycm9yczogVmFsaWRhdGlvbkVycm9ycyA9IHt9O1xuICAgIGNvbnN0IG1pbk51bWJlciA9IHRoaXMubWluID8gcGFyc2VJbnQodGhpcy5taW4sIDEwKSA6IDA7XG4gICAgY29uc3QgbWF4TnVtYmVyID0gdGhpcy5tYXggPyBwYXJzZUludCh0aGlzLm1heCwgMTApIDogMDtcbiAgICBjb25zdCBtYXhTaXplID0gdGhpcy5tYXhTaXplID8gcGFyc2VJbnQodGhpcy5tYXhTaXplLCAxMCkgOiAwO1xuICAgIGlmIChtaW5OdW1iZXIgJiYgKCFjLnZhbHVlIHx8IEFycmF5LmlzQXJyYXkoYy52YWx1ZSkgJiYgYy52YWx1ZS5sZW5ndGggPCBtaW5OdW1iZXIpKSB7XG4gICAgICBlcnJvcnMubWluID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG1heE51bWJlciAmJiAoIWMudmFsdWUgfHwgQXJyYXkuaXNBcnJheShjLnZhbHVlKSAmJiBjLnZhbHVlLmxlbmd0aCA+IG1heE51bWJlcikpIHtcbiAgICAgIGVycm9ycy5tYXggPSB0cnVlO1xuICAgIH1cbiAgICBpZiAobWF4U2l6ZSAmJiBBcnJheS5pc0FycmF5KGMudmFsdWUpKSB7XG4gICAgICBjLnZhbHVlLnNvbWUoKGZpbGU6IEZpbGUpID0+IHtcbiAgICAgICAgaWYgKGZpbGUuc2l6ZSA+IG1heFNpemUpIHtcbiAgICAgICAgICBlcnJvcnMubWF4U2l6ZSA9IGZpbGUubmFtZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGVycm9ycykubGVuZ3RoID8gZXJyb3JzIDogbnVsbDtcbiAgfVxuXG4gIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cbn1cbiJdfQ==