import * as tslib_1 from "tslib";
var FormCheckboxRequiredValidatorDirective_1;
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
/* tslint:disable:directive-selector */
let FormCheckboxRequiredValidatorDirective = FormCheckboxRequiredValidatorDirective_1 = class FormCheckboxRequiredValidatorDirective {
    constructor() {
        this.statesMode = 'check';
    }
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = value != null && value !== false && `${value}` !== 'false';
        if (this._onChange) {
            this._onChange();
        }
    }
    validate(c) {
        if (this.required) {
            return this.hasValue(c) ? null : { 'required': true };
        }
        return null;
    }
    hasValue(c) {
        if (typeof (c.value) === 'boolean') {
            return c.value === true;
        }
        if (typeof (c.value) === 'object' && c.value) {
            const values = Object.keys(c.value).map(key => c.value[key]);
            if (this.statesMode === 'optCheck') {
                return values.some(v => v !== null);
            }
            if (this.statesMode === 'check') {
                return values.some(v => v !== false);
            }
        }
        return true;
    }
    registerOnValidatorChange(fn) {
        this._onChange = fn;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], FormCheckboxRequiredValidatorDirective.prototype, "statesMode", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], FormCheckboxRequiredValidatorDirective.prototype, "required", null);
FormCheckboxRequiredValidatorDirective = FormCheckboxRequiredValidatorDirective_1 = tslib_1.__decorate([
    Directive({
        selector: 'rb-form-checkbox[required],rb-form-multi-select[required]',
        providers: [{
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => FormCheckboxRequiredValidatorDirective_1),
                multi: true
            }]
    }),
    tslib_1.__metadata("design:paramtypes", [])
], FormCheckboxRequiredValidatorDirective);
export { FormCheckboxRequiredValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jaGVja2JveC1yZXF1aXJlZC12YWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImF0b21zL2Zvcm0tZmllbGRzL3ZhbGlkYXRvcnMvZm9ybS1jaGVja2JveC1yZXF1aXJlZC12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBbUIsYUFBYSxFQUErQixNQUFNLGdCQUFnQixDQUFDO0FBRTdGLHVDQUF1QztBQVN2QyxJQUFhLHNDQUFzQyw4Q0FBbkQsTUFBYSxzQ0FBc0M7SUFNakQ7UUFGUyxlQUFVLEdBQXlCLE9BQU8sQ0FBQztJQUdwRCxDQUFDO0lBR0QsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLFFBQVEsQ0FBQyxLQUF1QjtRQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssSUFBSSxHQUFHLEtBQUssRUFBRSxLQUFLLE9BQU8sQ0FBQztRQUM1RSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELFFBQVEsQ0FBQyxDQUFrQjtRQUN6QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsVUFBVSxFQUFFLElBQUksRUFBQyxDQUFDO1NBQ3JEO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsUUFBUSxDQUFDLENBQWtCO1FBQ3pCLElBQUksT0FBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDakMsT0FBTyxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQztTQUN6QjtRQUNELElBQUksT0FBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRTtZQUMzQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDN0QsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFVBQVUsRUFBRTtnQkFDbEMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO2FBQ3JDO1lBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLE9BQU8sRUFBRTtnQkFDL0IsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDO2FBQ3RDO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxFQUFjO1FBQ3RDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7Q0FFRixDQUFBO0FBNUNVO0lBQVIsS0FBSyxFQUFFOzswRUFBNEM7QUFNcEQ7SUFEQyxLQUFLLEVBQUU7OztzRUFHUDtBQVpVLHNDQUFzQztJQVJsRCxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsMkRBQTJEO1FBQ3JFLFNBQVMsRUFBRSxDQUFDO2dCQUNWLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHdDQUFzQyxDQUFDO2dCQUNyRSxLQUFLLEVBQUUsSUFBSTthQUNaLENBQUM7S0FDSCxDQUFDOztHQUNXLHNDQUFzQyxDQWdEbEQ7U0FoRFksc0NBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBOR19WQUxJREFUT1JTLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbi8qIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1zZWxlY3RvciAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAncmItZm9ybS1jaGVja2JveFtyZXF1aXJlZF0scmItZm9ybS1tdWx0aS1zZWxlY3RbcmVxdWlyZWRdJyxcbiAgcHJvdmlkZXJzOiBbe1xuICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRm9ybUNoZWNrYm94UmVxdWlyZWRWYWxpZGF0b3JEaXJlY3RpdmUpLFxuICAgIG11bHRpOiB0cnVlXG4gIH1dXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1DaGVja2JveFJlcXVpcmVkVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcbiAgcHJpdmF0ZSBfcmVxdWlyZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgX29uQ2hhbmdlOiAoKSA9PiB2b2lkO1xuXG4gIEBJbnB1dCgpIHN0YXRlc01vZGU6ICdjaGVjaycgfCAnb3B0Q2hlY2snID0gJ2NoZWNrJztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGdldCByZXF1aXJlZCgpOiBib29sZWFuIHwgc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fcmVxdWlyZWQ7XG4gIH1cblxuICBzZXQgcmVxdWlyZWQodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9yZXF1aXJlZCA9IHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09IGZhbHNlICYmIGAke3ZhbHVlfWAgIT09ICdmYWxzZSc7XG4gICAgaWYgKHRoaXMuX29uQ2hhbmdlKSB7XG4gICAgICB0aGlzLl9vbkNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlKGM6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsIHtcbiAgICBpZiAodGhpcy5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzVmFsdWUoYykgPyBudWxsIDogeydyZXF1aXJlZCc6IHRydWV9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGhhc1ZhbHVlKGM6IEFic3RyYWN0Q29udHJvbCk6IGJvb2xlYW4ge1xuICAgIGlmICh0eXBlb2YoYy52YWx1ZSkgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIGMudmFsdWUgPT09IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YoYy52YWx1ZSkgPT09ICdvYmplY3QnICYmIGMudmFsdWUpIHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IE9iamVjdC5rZXlzKGMudmFsdWUpLm1hcChrZXkgPT4gYy52YWx1ZVtrZXldKTtcbiAgICAgIGlmICh0aGlzLnN0YXRlc01vZGUgPT09ICdvcHRDaGVjaycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5zb21lKHYgPT4gdiAhPT0gbnVsbCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZXNNb2RlID09PSAnY2hlY2snKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMuc29tZSh2ID0+IHYgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fb25DaGFuZ2UgPSBmbjtcbiAgfVxuXG59XG4iXX0=