import * as tslib_1 from "tslib";
import { Component, ElementRef, ViewChild, ViewContainerRef } from '@angular/core';
let ModalComponent = class ModalComponent {
    constructor(elementRef, viewContainerRef) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.options = {
            position: 'middle',
            showClose: true,
            backdropClose: true
        };
    }
    ngOnInit() {
        if (this.options.maxWidth) {
            this.elementRef.nativeElement.style.maxWidth = this.options.maxWidth;
        }
        if (this.options.position) {
            this.elementRef.nativeElement.classList.add(this.options.position);
        }
        if (this.contentComponentRef && this.box) {
            this.viewContainerRef.insert(this.contentComponentRef.hostView);
        }
    }
    ngAfterViewInit() {
        if (this.contentComponentRef && this.box) {
            this.box.nativeElement.appendChild(this.contentComponentRef.location.nativeElement);
        }
    }
};
tslib_1.__decorate([
    ViewChild('box', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], ModalComponent.prototype, "box", void 0);
ModalComponent = tslib_1.__decorate([
    Component({
        selector: 'rb-modal',
        template: "<div class=\"modal-box\" role=\"dialog\" #box>\n  <button class=\"close-btn rb-btn rb-passive-link\" (click)=\"close()\" *ngIf=\"options.showClose\"><rb-icon name=\"close\"></rb-icon></button>\n\n  <ng-container *ngIf=\"contentTpl\">\n    <ng-container *ngTemplateOutlet=\"contentTpl; context: {close: close}\"></ng-container>\n  </ng-container>\n  <ng-container *ngIf=\"contentComponent\">\n    <ng-container *ngComponentOutlet=\"contentComponent\"></ng-container>\n  </ng-container>\n  {{contentText ? contentText : ''}}\n</div>\n"
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, ViewContainerRef])
], ModalComponent);
export { ModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImF0b21zL21vZGFsL21vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQWdCLFVBQVUsRUFBNkIsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBYzNJLElBQWEsY0FBYyxHQUEzQixNQUFhLGNBQWM7SUFpQnpCLFlBQW9CLFVBQXNCLEVBQVUsZ0JBQWtDO1FBQWxFLGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBWHRGLFlBQU8sR0FBaUI7WUFDdEIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsU0FBUyxFQUFFLElBQUk7WUFDZixhQUFhLEVBQUUsSUFBSTtTQUNwQixDQUFDO0lBUUYsQ0FBQztJQUVELFFBQVE7UUFFTixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7U0FDdEU7UUFDRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNwRTtRQUVELElBQUksSUFBSSxDQUFDLG1CQUFtQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDeEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDakU7SUFDSCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLG1CQUFtQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDeEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDckY7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQXhCcUM7SUFBbkMsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztzQ0FBTSxVQUFVOzJDQUFDO0FBZnpDLGNBQWM7SUFKMUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFVBQVU7UUFDcEIsZ2lCQUFxQztLQUN0QyxDQUFDOzZDQWtCZ0MsVUFBVSxFQUE0QixnQkFBZ0I7R0FqQjNFLGNBQWMsQ0F1QzFCO1NBdkNZLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIENvbXBvbmVudFJlZiwgRWxlbWVudFJlZiwgT25Jbml0LCBUZW1wbGF0ZVJlZiwgVHlwZSwgVmlld0NoaWxkLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE1vZGFsT3B0aW9ucyB7XHJcbiAgcG9zaXRpb24/OiAnbWlkZGxlJyB8ICd0b3AnIHwgJ2JvdHRvbSc7XHJcbiAgc2hvd0Nsb3NlPzogYm9vbGVhbjsgIC8vIHNob3cgdGhlIGNsb3NlIGJ1dHRvbiBvbiB0b3AgcmlnaHRcclxuICBtYXhXaWR0aD86IHN0cmluZztcclxuICBzdGFja2VkPzogYm9vbGVhbjsgLy8gd2hldGhlciB0byBzdGFjayB0aGlzIG9uIHRvcCBvZiBhbm90aGVyIG9wZW4gbW9kYWxcclxuICBiYWNrZHJvcENsb3NlPzogYm9vbGVhbjsgLy8gY2xvc2UgaWYgYmFja2Ryb3AgaXMgY2xpY2tlZCBvciBFU0Mga2V5IGlzIHByZXNzZWRcclxufVxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdyYi1tb2RhbCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL21vZGFsLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTW9kYWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG5cclxuICBjb250ZW50VGV4dDogc3RyaW5nO1xyXG4gIGNvbnRlbnRUcGw6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgY29udGVudENvbXBvbmVudDogVHlwZTxhbnk+O1xyXG4gIGNvbnRlbnRDb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+O1xyXG4gIG9wdGlvbnM6IE1vZGFsT3B0aW9ucyA9IHtcclxuICAgIHBvc2l0aW9uOiAnbWlkZGxlJyxcclxuICAgIHNob3dDbG9zZTogdHJ1ZSxcclxuICAgIGJhY2tkcm9wQ2xvc2U6IHRydWVcclxuICB9O1xyXG4gIGNsb3NlOiAocmVhc29uPzogYW55KSA9PiB2b2lkO1xyXG5cclxuICBjb21wb25lbnRJbnN0YW5jZTogYW55O1xyXG5cclxuICBAVmlld0NoaWxkKCdib3gnLCB7IHN0YXRpYzogdHJ1ZSB9KSBib3g6IEVsZW1lbnRSZWY7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLm1heFdpZHRoKSB7XHJcbiAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLm1heFdpZHRoID0gdGhpcy5vcHRpb25zLm1heFdpZHRoO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wb3NpdGlvbikge1xyXG4gICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMub3B0aW9ucy5wb3NpdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29udGVudENvbXBvbmVudFJlZiAmJiB0aGlzLmJveCkge1xyXG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuaW5zZXJ0KHRoaXMuY29udGVudENvbXBvbmVudFJlZi5ob3N0Vmlldyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5jb250ZW50Q29tcG9uZW50UmVmICYmIHRoaXMuYm94KSB7XHJcbiAgICAgIHRoaXMuYm94Lm5hdGl2ZUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50Q29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=