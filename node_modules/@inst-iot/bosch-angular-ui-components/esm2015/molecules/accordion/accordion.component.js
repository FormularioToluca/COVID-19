import * as tslib_1 from "tslib";
import { Component, ContentChildren, Input, QueryList } from '@angular/core';
import { AccordionTitleComponent } from './accordion-title/accordion-title.component';
import { AccordionBodyComponent } from './accordion-body/accordion-body.component';
import { AccordionService } from './accordion.service';
/**
 * <rb-accordion> is the container for
 * <rb-accordion-title> and <rb-accordion-body>
 */
let AccordionComponent = class AccordionComponent {
    constructor(accordion) {
        this.accordion = accordion;
        /**
         * Whether only one can be opened.
         */
        this.openSingle = false;
        this.updateSub = null;
    }
    ngOnInit() {
        this.updateSub = this.accordion.updateState.subscribe(t => this.updateState(t));
    }
    ngOnDestroy() {
        if (this.updateSub) {
            this.updateSub.unsubscribe();
        }
    }
    updateState(title) {
        const titles = this.titles.toArray();
        const bodies = this.bodies.toArray();
        const index = titles.indexOf(title);
        if (index !== -1) {
            const component = bodies[index];
            if (title.open) {
                component.open();
            }
            else {
                component.close();
            }
            if (this.openSingle) {
                for (let i = 0; i < titles.length; i++) {
                    const title2 = titles[i];
                    const body = bodies[i];
                    if (i !== index && title2.open) {
                        title2.open = false;
                        body.close();
                    }
                }
            }
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], AccordionComponent.prototype, "openSingle", void 0);
tslib_1.__decorate([
    ContentChildren(AccordionTitleComponent),
    tslib_1.__metadata("design:type", QueryList)
], AccordionComponent.prototype, "titles", void 0);
tslib_1.__decorate([
    ContentChildren(AccordionBodyComponent),
    tslib_1.__metadata("design:type", QueryList)
], AccordionComponent.prototype, "bodies", void 0);
AccordionComponent = tslib_1.__decorate([
    Component({
        selector: 'rb-accordion',
        template: "<ng-content></ng-content>\r\n",
        providers: [AccordionService]
    }),
    tslib_1.__metadata("design:paramtypes", [AccordionService])
], AccordionComponent);
export { AccordionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJtb2xlY3VsZXMvYWNjb3JkaW9uL2FjY29yZGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBcUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXZEOzs7R0FHRztBQU1ILElBQWEsa0JBQWtCLEdBQS9CLE1BQWEsa0JBQWtCO0lBYTdCLFlBQW9CLFNBQTJCO1FBQTNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBWC9DOztXQUVHO1FBQ00sZUFBVSxHQUFHLEtBQUssQ0FBQztRQU1wQixjQUFTLEdBQUcsSUFBSSxDQUFDO0lBR3pCLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsS0FBOEI7UUFDeEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDaEIsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtnQkFDZCxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDbEI7aUJBQU07Z0JBQ0wsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ25CO1lBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDdEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN6QixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZCLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO3dCQUM5QixNQUFNLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQzt3QkFDcEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO3FCQUNkO2lCQUNGO2FBQ0Y7U0FDRjtJQUNILENBQUM7Q0FFRixDQUFBO0FBN0NVO0lBQVIsS0FBSyxFQUFFOztzREFBb0I7QUFHYztJQUF6QyxlQUFlLENBQUMsdUJBQXVCLENBQUM7c0NBQVMsU0FBUztrREFBMEI7QUFDNUM7SUFBeEMsZUFBZSxDQUFDLHNCQUFzQixDQUFDO3NDQUFTLFNBQVM7a0RBQXlCO0FBVHhFLGtCQUFrQjtJQUw5QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsY0FBYztRQUN4Qix5Q0FBeUM7UUFDekMsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7S0FDOUIsQ0FBQzs2Q0FjK0IsZ0JBQWdCO0dBYnBDLGtCQUFrQixDQWtEOUI7U0FsRFksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFjY29yZGlvblRpdGxlQ29tcG9uZW50IH0gZnJvbSAnLi9hY2NvcmRpb24tdGl0bGUvYWNjb3JkaW9uLXRpdGxlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEFjY29yZGlvbkJvZHlDb21wb25lbnQgfSBmcm9tICcuL2FjY29yZGlvbi1ib2R5L2FjY29yZGlvbi1ib2R5LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEFjY29yZGlvblNlcnZpY2UgfSBmcm9tICcuL2FjY29yZGlvbi5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiA8cmItYWNjb3JkaW9uPiBpcyB0aGUgY29udGFpbmVyIGZvclxyXG4gKiA8cmItYWNjb3JkaW9uLXRpdGxlPiBhbmQgPHJiLWFjY29yZGlvbi1ib2R5PlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdyYi1hY2NvcmRpb24nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9hY2NvcmRpb24uY29tcG9uZW50Lmh0bWwnLFxyXG4gIHByb3ZpZGVyczogW0FjY29yZGlvblNlcnZpY2VdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBY2NvcmRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgb25seSBvbmUgY2FuIGJlIG9wZW5lZC5cclxuICAgKi9cclxuICBASW5wdXQoKSBvcGVuU2luZ2xlID0gZmFsc2U7XHJcblxyXG5cclxuICBAQ29udGVudENoaWxkcmVuKEFjY29yZGlvblRpdGxlQ29tcG9uZW50KSB0aXRsZXM6IFF1ZXJ5TGlzdDxBY2NvcmRpb25UaXRsZUNvbXBvbmVudD47XHJcbiAgQENvbnRlbnRDaGlsZHJlbihBY2NvcmRpb25Cb2R5Q29tcG9uZW50KSBib2RpZXM6IFF1ZXJ5TGlzdDxBY2NvcmRpb25Cb2R5Q29tcG9uZW50PjtcclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVTdWIgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjY29yZGlvbjogQWNjb3JkaW9uU2VydmljZSkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnVwZGF0ZVN1YiA9IHRoaXMuYWNjb3JkaW9uLnVwZGF0ZVN0YXRlLnN1YnNjcmliZSh0ID0+IHRoaXMudXBkYXRlU3RhdGUodCkpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy51cGRhdGVTdWIpIHtcclxuICAgICAgdGhpcy51cGRhdGVTdWIudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZVN0YXRlKHRpdGxlOiBBY2NvcmRpb25UaXRsZUNvbXBvbmVudCkge1xyXG4gICAgY29uc3QgdGl0bGVzID0gdGhpcy50aXRsZXMudG9BcnJheSgpO1xyXG4gICAgY29uc3QgYm9kaWVzID0gdGhpcy5ib2RpZXMudG9BcnJheSgpO1xyXG4gICAgY29uc3QgaW5kZXggPSB0aXRsZXMuaW5kZXhPZih0aXRsZSk7XHJcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGJvZGllc1tpbmRleF07XHJcbiAgICAgIGlmICh0aXRsZS5vcGVuKSB7XHJcbiAgICAgICAgY29tcG9uZW50Lm9wZW4oKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb21wb25lbnQuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5vcGVuU2luZ2xlKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aXRsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IHRpdGxlMiA9IHRpdGxlc1tpXTtcclxuICAgICAgICAgIGNvbnN0IGJvZHkgPSBib2RpZXNbaV07XHJcbiAgICAgICAgICBpZiAoaSAhPT0gaW5kZXggJiYgdGl0bGUyLm9wZW4pIHtcclxuICAgICAgICAgICAgdGl0bGUyLm9wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgYm9keS5jbG9zZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19