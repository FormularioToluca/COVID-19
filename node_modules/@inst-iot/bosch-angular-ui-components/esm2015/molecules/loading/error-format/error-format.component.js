import * as tslib_1 from "tslib";
import { Component, Inject, Input, Optional } from '@angular/core';
import { DEFAULT_ERROR_FORMATTER, ERROR_FORMATTER } from '../error-format.model';
let ErrorFormatComponent = class ErrorFormatComponent {
    constructor(formatters) {
        this.opened = false;
        if (!formatters) {
            this.formatters = [DEFAULT_ERROR_FORMATTER];
        }
        else {
            this.formatters = formatters.slice();
            this.formatters.push(DEFAULT_ERROR_FORMATTER);
        }
    }
    ngOnInit() {
        this.identifyErrorData(this.error);
    }
    identifyErrorData(error) {
        if (this.formatters && this.formatters.length) {
            for (let i = 0; i < this.formatters.length; i++) {
                const formatter = this.formatters[i];
                const result = formatter.transform(error);
                if (result !== null) {
                    this.message = result;
                    if (formatter.getDetails) {
                        this.details = formatter.getDetails(error);
                    }
                    return result;
                }
            }
        }
        this.message = String(error);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], ErrorFormatComponent.prototype, "error", void 0);
ErrorFormatComponent = tslib_1.__decorate([
    Component({
        selector: 'rb-error-format',
        template: "<div class=\"error-message\">{{message}}</div>\n<a *ngIf=\"details\" href=\"javascript:\" class=\"rb-link rb-details-toggle\" [class.open]=\"opened\" (click)=\"opened=!opened\">Details</a>\n<pre *ngIf=\"opened\" class=\"error-details\">{{details}}</pre>\n",
        styles: [".error-details{word-wrap:break-word;word-break:break-all;white-space:pre-wrap}"]
    }),
    tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(ERROR_FORMATTER)),
    tslib_1.__metadata("design:paramtypes", [Array])
], ErrorFormatComponent);
export { ErrorFormatComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItZm9ybWF0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJtb2xlY3VsZXMvbG9hZGluZy9lcnJvci1mb3JtYXQvZXJyb3ItZm9ybWF0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFVLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsZUFBZSxFQUFrQixNQUFNLHVCQUF1QixDQUFDO0FBT2pHLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBWS9CLFlBQWlELFVBQTRCO1FBTjdFLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFPYixJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDN0M7YUFBTTtZQUNMLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3JDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDL0M7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELGlCQUFpQixDQUFDLEtBQUs7UUFDckIsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO1lBQzdDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDL0MsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDMUMsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO29CQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztvQkFDdEIsSUFBSSxTQUFTLENBQUMsVUFBVSxFQUFFO3dCQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQzVDO29CQUNELE9BQU8sTUFBTSxDQUFDO2lCQUNmO2FBQ0Y7U0FDRjtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7Q0FHRixDQUFBO0FBdkNVO0lBQVIsS0FBSyxFQUFFOzttREFBWTtBQUpULG9CQUFvQjtJQUxoQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsaUJBQWlCO1FBQzNCLDJRQUE0Qzs7S0FFN0MsQ0FBQztJQWFhLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBOztHQVpyQyxvQkFBb0IsQ0EyQ2hDO1NBM0NZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0LCBJbnB1dCwgT25Jbml0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgREVGQVVMVF9FUlJPUl9GT1JNQVRURVIsIEVSUk9SX0ZPUk1BVFRFUiwgRXJyb3JGb3JtYXR0ZXIgfSBmcm9tICcuLi9lcnJvci1mb3JtYXQubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdyYi1lcnJvci1mb3JtYXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vZXJyb3ItZm9ybWF0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZXJyb3ItZm9ybWF0LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgRXJyb3JGb3JtYXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIHByaXZhdGUgZm9ybWF0dGVyczogRXJyb3JGb3JtYXR0ZXJbXTtcblxuICBASW5wdXQoKSBlcnJvcjogYW55O1xuXG4gIG9wZW5lZCA9IGZhbHNlO1xuXG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICBkZXRhaWxzOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChFUlJPUl9GT1JNQVRURVIpIGZvcm1hdHRlcnM6IEVycm9yRm9ybWF0dGVyW10pIHtcbiAgICBpZiAoIWZvcm1hdHRlcnMpIHtcbiAgICAgIHRoaXMuZm9ybWF0dGVycyA9IFtERUZBVUxUX0VSUk9SX0ZPUk1BVFRFUl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9ybWF0dGVycyA9IGZvcm1hdHRlcnMuc2xpY2UoKTtcbiAgICAgIHRoaXMuZm9ybWF0dGVycy5wdXNoKERFRkFVTFRfRVJST1JfRk9STUFUVEVSKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmlkZW50aWZ5RXJyb3JEYXRhKHRoaXMuZXJyb3IpO1xuICB9XG5cbiAgaWRlbnRpZnlFcnJvckRhdGEoZXJyb3IpIHtcbiAgICBpZiAodGhpcy5mb3JtYXR0ZXJzICYmIHRoaXMuZm9ybWF0dGVycy5sZW5ndGgpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mb3JtYXR0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IHRoaXMuZm9ybWF0dGVyc1tpXTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZm9ybWF0dGVyLnRyYW5zZm9ybShlcnJvcik7XG4gICAgICAgIGlmIChyZXN1bHQgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSByZXN1bHQ7XG4gICAgICAgICAgaWYgKGZvcm1hdHRlci5nZXREZXRhaWxzKSB7XG4gICAgICAgICAgICB0aGlzLmRldGFpbHMgPSBmb3JtYXR0ZXIuZ2V0RGV0YWlscyhlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlID0gU3RyaW5nKGVycm9yKTtcbiAgfVxuXG5cbn1cbiJdfQ==