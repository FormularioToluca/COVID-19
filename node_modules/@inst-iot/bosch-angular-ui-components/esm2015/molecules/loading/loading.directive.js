import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { LoadingEntity } from './loading-utils';
import { LoadingStatusComponent } from './loading-status/loading-status.component';
let LoadingDirective = class LoadingDirective {
    constructor(templateRef, viewContainer, componentFactory) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.componentFactory = componentFactory;
        this.loadingRef = null;
        this.viewRef = null;
        this.rbLoadingSize = 1;
    }
    ngDoCheck() {
        if (this.loadingEntity) {
            this.updateView(this.loadingEntity.loading || this.loadingEntity.error);
        }
    }
    set rbLoading(state) {
        this.factory = this.componentFactory.resolveComponentFactory(LoadingStatusComponent);
        this.updateState(state);
    }
    updateState(state) {
        if (state instanceof LoadingEntity) {
            this.loadingEntity = state;
            state = !!(this.loadingEntity.loading || this.loadingEntity.error);
        }
        this.updateView(state);
    }
    updateView(state) {
        if (state) {
            if (!this.loadingRef) {
                this.viewContainer.clear();
                this.viewRef = null;
                this.loadingRef = this.viewContainer.createComponent(this.factory);
                this.loadingRef.instance.loadingEntity = this.loadingEntity;
                this.loadingRef.instance.size = this.rbLoadingSize;
            }
        }
        else {
            if (!this.viewRef) {
                this.viewContainer.clear();
                this.loadingRef = null;
                this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
            }
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], LoadingDirective.prototype, "rbLoadingSize", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], LoadingDirective.prototype, "rbLoading", null);
LoadingDirective = tslib_1.__decorate([
    Directive({
        selector: '[rbLoading]'
    }),
    tslib_1.__metadata("design:paramtypes", [TemplateRef,
        ViewContainerRef,
        ComponentFactoryResolver])
], LoadingDirective);
export { LoadingDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibW9sZWN1bGVzL2xvYWRpbmcvbG9hZGluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFFTCx3QkFBd0IsRUFBZ0IsU0FBUyxFQUE0QixLQUFLLEVBQUUsV0FBVyxFQUMvRixnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBS25GLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBUzNCLFlBQW9CLFdBQTZCLEVBQzdCLGFBQStCLEVBQy9CLGdCQUEwQztRQUYxQyxnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7UUFDN0Isa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBMEI7UUFUdEQsZUFBVSxHQUF5QyxJQUFJLENBQUM7UUFDeEQsWUFBTyxHQUE0QyxJQUFJLENBQUM7UUFJdkQsa0JBQWEsR0FBRyxDQUFDLENBQUM7SUFJdUMsQ0FBQztJQUNuRSxTQUFTO1FBQ1AsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6RTtJQUNILENBQUM7SUFHRCxJQUFJLFNBQVMsQ0FBQyxLQUFtQztRQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyx1QkFBdUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3JGLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFtQztRQUM3QyxJQUFJLEtBQUssWUFBWSxhQUFhLEVBQUU7WUFDbEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7WUFDM0IsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEU7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBYztRQUN2QixJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztnQkFDcEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ25FLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO2dCQUM1RCxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUNwRDtTQUVGO2FBQU07WUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDakIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDeEU7U0FFRjtJQUNILENBQUM7Q0FDRixDQUFBO0FBNUNVO0lBQVIsS0FBSyxFQUFFOzt1REFBbUI7QUFZM0I7SUFEQyxLQUFLLEVBQUU7OztpREFJUDtBQXRCVSxnQkFBZ0I7SUFINUIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGFBQWE7S0FDeEIsQ0FBQzs2Q0FVaUMsV0FBVztRQUNULGdCQUFnQjtRQUNiLHdCQUF3QjtHQVhuRCxnQkFBZ0IsQ0FtRDVCO1NBbkRZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudEZhY3RvcnksXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBEaXJlY3RpdmUsIERvQ2hlY2ssIEVtYmVkZGVkVmlld1JlZiwgSW5wdXQsIFRlbXBsYXRlUmVmLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9hZGluZ0VudGl0eSB9IGZyb20gJy4vbG9hZGluZy11dGlscyc7XG5pbXBvcnQgeyBMb2FkaW5nU3RhdHVzQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkaW5nLXN0YXR1cy9sb2FkaW5nLXN0YXR1cy5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcmJMb2FkaW5nXSdcbn0pXG5leHBvcnQgY2xhc3MgTG9hZGluZ0RpcmVjdGl2ZSBpbXBsZW1lbnRzIERvQ2hlY2sge1xuXG4gIHByaXZhdGUgbG9hZGluZ1JlZjogQ29tcG9uZW50UmVmPExvYWRpbmdTdGF0dXNDb21wb25lbnQ+ID0gbnVsbDtcbiAgcHJpdmF0ZSB2aWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8TG9hZGluZ1N0YXR1c0NvbXBvbmVudD4gPSBudWxsO1xuICBwcml2YXRlIGxvYWRpbmdFbnRpdHk6IExvYWRpbmdFbnRpdHk8YW55PjtcbiAgcHJpdmF0ZSBmYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5PExvYWRpbmdTdGF0dXNDb21wb25lbnQ+O1xuXG4gIEBJbnB1dCgpIHJiTG9hZGluZ1NpemUgPSAxO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgICAgICAgICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIpIHsgfVxuICBuZ0RvQ2hlY2soKSB7XG4gICAgaWYgKHRoaXMubG9hZGluZ0VudGl0eSkge1xuICAgICAgdGhpcy51cGRhdGVWaWV3KHRoaXMubG9hZGluZ0VudGl0eS5sb2FkaW5nIHx8IHRoaXMubG9hZGluZ0VudGl0eS5lcnJvcik7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IHJiTG9hZGluZyhzdGF0ZTogYm9vbGVhbiB8IExvYWRpbmdFbnRpdHk8YW55Pikge1xuICAgIHRoaXMuZmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeS5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShMb2FkaW5nU3RhdHVzQ29tcG9uZW50KTtcbiAgICB0aGlzLnVwZGF0ZVN0YXRlKHN0YXRlKTtcbiAgfVxuXG4gIHVwZGF0ZVN0YXRlKHN0YXRlOiBib29sZWFuIHwgTG9hZGluZ0VudGl0eTxhbnk+KSB7XG4gICAgaWYgKHN0YXRlIGluc3RhbmNlb2YgTG9hZGluZ0VudGl0eSkge1xuICAgICAgdGhpcy5sb2FkaW5nRW50aXR5ID0gc3RhdGU7XG4gICAgICBzdGF0ZSA9ICEhKHRoaXMubG9hZGluZ0VudGl0eS5sb2FkaW5nIHx8IHRoaXMubG9hZGluZ0VudGl0eS5lcnJvcik7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlVmlldyhzdGF0ZSk7XG4gIH1cblxuICB1cGRhdGVWaWV3KHN0YXRlOiBib29sZWFuKSB7XG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICBpZiAoIXRoaXMubG9hZGluZ1JlZikge1xuICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICAgICAgdGhpcy52aWV3UmVmID0gbnVsbDtcbiAgICAgICAgdGhpcy5sb2FkaW5nUmVmID0gdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUNvbXBvbmVudCh0aGlzLmZhY3RvcnkpO1xuICAgICAgICB0aGlzLmxvYWRpbmdSZWYuaW5zdGFuY2UubG9hZGluZ0VudGl0eSA9IHRoaXMubG9hZGluZ0VudGl0eTtcbiAgICAgICAgdGhpcy5sb2FkaW5nUmVmLmluc3RhbmNlLnNpemUgPSB0aGlzLnJiTG9hZGluZ1NpemU7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLnZpZXdSZWYpIHtcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgICAgIHRoaXMubG9hZGluZ1JlZiA9IG51bGw7XG4gICAgICAgIHRoaXMudmlld1JlZiA9IHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgICB9XG5cbiAgICB9XG4gIH1cbn1cbiJdfQ==