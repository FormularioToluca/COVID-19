import { InjectionToken } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
export const ERROR_FORMATTER = new InjectionToken('rbErrorFormatter');
export class DetailedError {
    constructor(message, details) {
        this.message = message;
        this.details = details;
        this.name = 'DetailedError';
    }
    toString() {
        return this.message;
    }
}
export class DefaultErrorFormatter {
    getDetails(error) {
        if (error instanceof DetailedError) {
            if (typeof (error.details) === 'object') {
                return JSON.stringify(error.details, null, 2);
            }
            return error.details;
        }
        if (error instanceof HttpErrorResponse) {
            if (error.error) {
                if (typeof (error.error) === 'object') {
                    return JSON.stringify(error.error, null, 2);
                }
                return String(error.error);
            }
        }
        return null;
    }
    transform(error) {
        if (error instanceof HttpErrorResponse) {
            let text = 'Error: ';
            if (error.message) {
                text += error.message;
            }
            return text;
        }
        if (error instanceof Error || error instanceof DetailedError) {
            return String(error);
        }
        return null;
    }
}
export const DEFAULT_ERROR_FORMATTER = new DefaultErrorFormatter();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItZm9ybWF0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbIm1vbGVjdWxlcy9sb2FkaW5nL2Vycm9yLWZvcm1hdC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQWlCLGtCQUFrQixDQUFDLENBQUM7QUFFdEYsTUFBTSxPQUFPLGFBQWE7SUFHeEIsWUFBbUIsT0FBTyxFQUFTLE9BQVE7UUFBeEIsWUFBTyxHQUFQLE9BQU8sQ0FBQTtRQUFTLFlBQU8sR0FBUCxPQUFPLENBQUM7UUFGM0MsU0FBSSxHQUFHLGVBQWUsQ0FBQztJQUd2QixDQUFDO0lBRU0sUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0NBQ0Y7QUFlRCxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLFVBQVUsQ0FBQyxLQUFVO1FBQ25CLElBQUksS0FBSyxZQUFZLGFBQWEsRUFBRTtZQUNsQyxJQUFJLE9BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUN0QyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDL0M7WUFDRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUM7U0FDdEI7UUFDRCxJQUFJLEtBQUssWUFBWSxpQkFBaUIsRUFBRTtZQUN0QyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7Z0JBQ2YsSUFBSSxPQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLFFBQVEsRUFBRTtvQkFDcEMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUM3QztnQkFDRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDNUI7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUFVO1FBQ2xCLElBQUksS0FBSyxZQUFZLGlCQUFpQixFQUFFO1lBQ3RDLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQztZQUNyQixJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDO2FBQ3ZCO1lBQ0QsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksS0FBSyxZQUFZLEtBQUssSUFBSSxLQUFLLFlBQVksYUFBYSxFQUFFO1lBQzVELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBRUY7QUFFRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLHFCQUFxQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuXHJcbmV4cG9ydCBjb25zdCBFUlJPUl9GT1JNQVRURVIgPSBuZXcgSW5qZWN0aW9uVG9rZW48RXJyb3JGb3JtYXR0ZXI+KCdyYkVycm9yRm9ybWF0dGVyJyk7XHJcblxyXG5leHBvcnQgY2xhc3MgRGV0YWlsZWRFcnJvciBpbXBsZW1lbnRzIEVycm9yIHtcclxuICBuYW1lID0gJ0RldGFpbGVkRXJyb3InO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbWVzc2FnZSwgcHVibGljIGRldGFpbHM/KSB7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yRm9ybWF0dGVyIGV4dGVuZHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgdGhlIGVycm9yIGNhbiBiZSBoYW5kbGVkLlxyXG4gICAqIElmIG51bGwgaXMgcmV0dXJuZWQsIHRoZSBuZXh0IEZvcm1hdHRlciB3aWxsIGJlIHRyaWVkLlxyXG4gICAqL1xyXG4gIHRyYW5zZm9ybShlcnJvcjogYW55KTogc3RyaW5nIHwgbnVsbDtcclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBkZXRhaWxzIG9mIGFuIGVycm9yXHJcbiAgICovXHJcbiAgZ2V0RGV0YWlscz8oZXJyb3I6IGFueSk6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERlZmF1bHRFcnJvckZvcm1hdHRlciBpbXBsZW1lbnRzIEVycm9yRm9ybWF0dGVyIHtcclxuICBnZXREZXRhaWxzKGVycm9yOiBhbnkpOiBzdHJpbmcge1xyXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRGV0YWlsZWRFcnJvcikge1xyXG4gICAgICBpZiAodHlwZW9mKGVycm9yLmRldGFpbHMpID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShlcnJvci5kZXRhaWxzLCBudWxsLCAyKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZXJyb3IuZGV0YWlscztcclxuICAgIH1cclxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgIGlmIChlcnJvci5lcnJvcikge1xyXG4gICAgICAgIGlmICh0eXBlb2YoZXJyb3IuZXJyb3IpID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGVycm9yLmVycm9yLCBudWxsLCAyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZyhlcnJvci5lcnJvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgdHJhbnNmb3JtKGVycm9yOiBhbnkpOiBzdHJpbmcgfCBudWxsIHtcclxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgIGxldCB0ZXh0ID0gJ0Vycm9yOiAnO1xyXG4gICAgICBpZiAoZXJyb3IubWVzc2FnZSkge1xyXG4gICAgICAgIHRleHQgKz0gZXJyb3IubWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGV4dDtcclxuICAgIH1cclxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgRGV0YWlsZWRFcnJvcikge1xyXG4gICAgICByZXR1cm4gU3RyaW5nKGVycm9yKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0VSUk9SX0ZPUk1BVFRFUiA9IG5ldyBEZWZhdWx0RXJyb3JGb3JtYXR0ZXIoKTtcclxuIl19