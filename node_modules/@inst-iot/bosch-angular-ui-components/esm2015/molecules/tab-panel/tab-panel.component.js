import * as tslib_1 from "tslib";
import { Component, ContentChildren, ElementRef, EventEmitter, HostListener, Inject, InjectionToken, Input, Optional, Output, QueryList, Renderer2, ViewChild } from '@angular/core';
import { TabPanelItemDirective } from './tab-panel-item.directive';
export const TAB_PANEL_RESOLVER = new InjectionToken('TabPanelResolver');
/**
 * A very powerful tab panel component.
 * It can handle dynamic tabs, the tab bar can accept all kind of types. See: TabPanelItemType
 * When you provide `outletName`, you should provide your router config with such an entry to enable the outlet routing:
 * children: [{path: ':id', outlet: 'yourOutletName', component: TabPanelComponent}]
 */
let TabPanelComponent = class TabPanelComponent {
    constructor(renderer, element, tabPanelResolver) {
        this.renderer = renderer;
        this.element = element;
        this.tabPanelResolver = tabPanelResolver;
        this.tabChanged = new EventEmitter();
        this.tabItems = [];
        /**
         * Whether tabs that were opened once, should be kept in the DOM
         * when switching away from them. Or should they be removed from
         * DOM when switched to another tab?
         */
        this.destroyTabs = false;
        this.renderHiddenTabs = false;
        this.lastHeight = 0;
    }
    set tabItemsQuery(tabItems) {
        this.tabItems = tabItems.toArray();
        if (this.outletName) {
            this.tabItems.forEach(tabItem => {
                const link = { outlets: {} };
                link.outlets[this.outletName] = [tabItem.id];
                tabItem.routerLink = [link];
            });
        }
        if (this.tabItems.length && this.tabItems.every(tabItem => !tabItem.active)) {
            if (this.tab) {
                this.showTab(this.tab);
            }
            else {
                this.showFirstTab();
            }
        }
        this.tabItemsLeft = this.tabItems.filter(tabItem => tabItem.position === 'left');
        this.tabItemsCenter = this.tabItems.filter(tabItem => tabItem.position === 'center');
        this.tabItemsRight = this.tabItems.filter(tabItem => tabItem.position === 'right');
    }
    ngAfterViewInit() {
        this.onResize();
    }
    ngOnChanges(changes) {
        if (changes.tab && changes.tab.currentValue && !changes.tab.firstChange) {
            const found = this.tabItems.find(tabItem => tabItem.id === changes.tab.currentValue);
            if (found && !found.active) {
                this.showTab(changes.tab.currentValue);
            }
        }
    }
    ngDoCheck() {
        if (this.element && this.element.nativeElement.classList.contains('full-width')) {
            this.onResize();
        }
    }
    showFirstTab() {
        const firstItem = this.tabItems.find(tabItem => tabItem.type === 'tab');
        if (firstItem) {
            this.showTab(firstItem.id);
        }
    }
    /**
     * Can be used to show a certain tab.
     */
    showTab(id) {
        const found = this.tabItems.find(tabItem => tabItem.id === id);
        if (!found) {
            // wait a tick
            setTimeout(() => {
                this.deactivateAndShowTab(id);
            });
        }
        else {
            this.deactivateAndShowTab(id);
        }
    }
    deactivateAndShowTab(id) {
        this.tabItems.forEach(tabItem => {
            if (tabItem.active && tabItem.id !== id) {
                tabItem.hide();
            }
            else if (tabItem.id === id) {
                tabItem.show();
                this.tabChanged.next(id);
            }
        });
    }
    onResize() {
        if (this.panelPlaceholder && this.tabPanel) {
            const tabPanelHeight = this.tabPanel.nativeElement.offsetHeight;
            if (Math.abs(this.lastHeight - tabPanelHeight) > 2) {
                this.lastHeight = tabPanelHeight;
                this.renderer.setStyle(this.panelPlaceholder.nativeElement, 'height', tabPanelHeight + 'px');
            }
        }
    }
};
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], TabPanelComponent.prototype, "tabChanged", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], TabPanelComponent.prototype, "tab", void 0);
tslib_1.__decorate([
    ViewChild('panelPlaceholder', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], TabPanelComponent.prototype, "panelPlaceholder", void 0);
tslib_1.__decorate([
    ViewChild('tabPanel', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], TabPanelComponent.prototype, "tabPanel", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TabPanelComponent.prototype, "destroyTabs", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], TabPanelComponent.prototype, "renderHiddenTabs", void 0);
tslib_1.__decorate([
    ContentChildren(TabPanelItemDirective),
    tslib_1.__metadata("design:type", QueryList),
    tslib_1.__metadata("design:paramtypes", [QueryList])
], TabPanelComponent.prototype, "tabItemsQuery", null);
tslib_1.__decorate([
    HostListener('window:resize'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], TabPanelComponent.prototype, "onResize", null);
TabPanelComponent = tslib_1.__decorate([
    Component({
        selector: 'rb-tab-panel',
        template: "<div class=\"tab-panel-container\">\r\n  <div class=\"tab-panel limit\" #tabPanel>\r\n    <rb-navigation type=\"tab\" class=\"tab-panel-left\">\r\n      <ng-container *ngFor=\"let tabItem of tabItemsLeft; template: tabTpl\"></ng-container>\r\n    </rb-navigation>\r\n    <rb-navigation type=\"tab\" class=\"tab-panel-center\">\r\n      <ng-container *ngFor=\"let tabItem of tabItemsCenter; template: tabTpl\"></ng-container>\r\n    </rb-navigation>\r\n    <rb-navigation type=\"tab\" class=\"tab-panel-right\">\r\n      <ng-container *ngFor=\"let tabItem of tabItemsRight; template: tabTpl\"></ng-container>\r\n    </rb-navigation>\r\n  </div>\r\n</div>\r\n<div class=\"tab-panel-placeholder\" #panelPlaceholder></div>\r\n\r\n<ng-container *ngFor=\"let tabItem of tabItems\">\r\n  <div class=\"tab-content\" *ngIf=\"destroyTabs && tabItem.active || !destroyTabs && tabItem.shown || renderHiddenTabs\"\r\n       [hidden]=\"!tabItem.active\">\r\n    <ng-container *ngTemplateOutlet=\"tabItem.templateRef; context: tabItem\"></ng-container>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #tabTpl let-tabItem>\r\n  <ng-container *ngIf=\"tabItem.type === 'dropdown'\">\r\n    <a href=\"javascript:\" class=\"rb-dropdown-toggle\"\r\n       [class.active]=\"tabItem.active\"\r\n       [rbDropdown]=\"tabItem.templateRef\"\r\n       [position]=\"tabItem.position\"\r\n       [autoClose]=\"tabItem.autoClose\">\r\n      <ng-container *ngIf=\"tabItem.titleStr\">\r\n        {{tabItem.titleStr}}\r\n      </ng-container>\r\n      <ng-container *ngIf=\"tabItem.titleTpl\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n      </ng-container>\r\n    </a>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'content'\">\r\n    <ng-container *ngIf=\"tabItem.titleStr\">\r\n      {{tabItem.titleStr}}\r\n    </ng-container>\r\n    <ng-container *ngIf=\"tabItem.titleTpl\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n    </ng-container>\r\n    <ng-container\r\n      *ngTemplateOutlet=\"tabItem.templateRef; context: tabItem\"></ng-container>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'custom'\">\r\n    <ng-container *ngIf=\"tabItem.titleStr\">\r\n      {{tabItem.titleStr}}\r\n    </ng-container>\r\n    <ng-container *ngIf=\"tabItem.titleTpl\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'tab'\">\r\n    <a href=\"javascript:\" [class.active]=\"tabItem.active\" (click)=\"showTab(tabItem.id)\">\r\n      <ng-container *ngIf=\"tabItem.titleStr\">\r\n        {{tabItem.titleStr}}\r\n      </ng-container>\r\n      <ng-container *ngIf=\"tabItem.titleTpl\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n      </ng-container>\r\n    </a>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'text'\">\r\n    <span class=\"text-item\">\r\n      <ng-container *ngIf=\"tabItem.titleStr\">\r\n        {{tabItem.titleStr}}\r\n      </ng-container>\r\n      <ng-container *ngIf=\"tabItem.titleTpl\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n      </ng-container>\r\n    </span>\r\n  </ng-container>\r\n</ng-template>\r\n"
    }),
    tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(TAB_PANEL_RESOLVER)),
    tslib_1.__metadata("design:paramtypes", [Renderer2,
        ElementRef, Object])
], TabPanelComponent);
export { TabPanelComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLXBhbmVsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJtb2xlY3VsZXMvdGFiLXBhbmVsL3RhYi1wYW5lbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFFTCxTQUFTLEVBQ1QsZUFBZSxFQUVmLFVBQVUsRUFDVixZQUFZLEVBQ1osWUFBWSxFQUNaLE1BQU0sRUFDTixjQUFjLEVBQUUsS0FBSyxFQUNyQixRQUFRLEVBQ1IsTUFBTSxFQUNOLFNBQVMsRUFDVCxTQUFTLEVBQ1QsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBVW5FLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFtQixrQkFBa0IsQ0FBQyxDQUFDO0FBRTNGOzs7OztHQUtHO0FBS0gsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBaUI7SUFpQzVCLFlBQW9CLFFBQW1CLEVBQ25CLE9BQW1CLEVBQ3FCLGdCQUFrQztRQUYxRSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDcUIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQWpDcEYsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFZbEQsYUFBUSxHQUE0QixFQUFFLENBQUM7UUFFdkM7Ozs7V0FJRztRQUVILGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBR3BCLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQU16QixlQUFVLEdBQUcsQ0FBQyxDQUFDO0lBS2YsQ0FBQztJQUd1QyxJQUFJLGFBQWEsQ0FBQyxRQUEwQztRQUNsRyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNuQyxJQUFJLElBQUksQ0FB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OztxREFBeUM7QUFLekM7SUFBUixLQUFLLEVBQUU7OzhDQUFhO0FBRTBCO0lBQTlDLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUMsQ0FBQztzQ0FBbUIsVUFBVTsyREFBQztBQUNyQztJQUF0QyxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBQyxDQUFDO3NDQUFXLFVBQVU7bURBQUM7QUFZNUQ7SUFEQyxLQUFLLEVBQUU7O3NEQUNZO0FBR3BCO0lBREMsS0FBSyxFQUFFOzsyREFDaUI7QUFjZTtJQUF2QyxlQUFlLENBQUMscUJBQXFCLENBQUM7c0NBQTZCLFNBQVM7NkNBQVQsU0FBUztzREFvQjVFO0FBd0REO0lBREMsWUFBWSxDQUFDLGVBQWUsQ0FBQzs7OztpREFTN0I7QUEzSFUsaUJBQWlCO0lBSjdCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxjQUFjO1FBQ3hCLGc2R0FBeUM7S0FDMUMsQ0FBQztJQW9DYSxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBOzZDQUZyQixTQUFTO1FBQ1YsVUFBVTtHQWxDNUIsaUJBQWlCLENBNkg3QjtTQTdIWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEFmdGVyVmlld0luaXQsXHJcbiAgQ29tcG9uZW50LFxyXG4gIENvbnRlbnRDaGlsZHJlbixcclxuICBEb0NoZWNrLFxyXG4gIEVsZW1lbnRSZWYsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIEhvc3RMaXN0ZW5lcixcclxuICBJbmplY3QsXHJcbiAgSW5qZWN0aW9uVG9rZW4sIElucHV0LCBPbkNoYW5nZXMsXHJcbiAgT3B0aW9uYWwsXHJcbiAgT3V0cHV0LFxyXG4gIFF1ZXJ5TGlzdCxcclxuICBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMsXHJcbiAgVmlld0NoaWxkXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRhYlBhbmVsSXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vdGFiLXBhbmVsLWl0ZW0uZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUYWJQYW5lbFJlc29sdmVyIHtcclxuICAvKipcclxuICAgKiBSZXNvbHZlcyBhIHRhYiBieSBpZCBhbmQgcmV0dXJucyBhbiBPYnNlcnZhYmxlLCB0aGF0IGVtaXRzIHRydWUsIHdoZW4gaXQgd2FzIGZvdW5kLlxyXG4gICAqL1xyXG4gIHJlc29sdmVUYWIoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBUQUJfUEFORUxfUkVTT0xWRVIgPSBuZXcgSW5qZWN0aW9uVG9rZW48VGFiUGFuZWxSZXNvbHZlcj4oJ1RhYlBhbmVsUmVzb2x2ZXInKTtcclxuXHJcbi8qKlxyXG4gKiBBIHZlcnkgcG93ZXJmdWwgdGFiIHBhbmVsIGNvbXBvbmVudC5cclxuICogSXQgY2FuIGhhbmRsZSBkeW5hbWljIHRhYnMsIHRoZSB0YWIgYmFyIGNhbiBhY2NlcHQgYWxsIGtpbmQgb2YgdHlwZXMuIFNlZTogVGFiUGFuZWxJdGVtVHlwZVxyXG4gKiBXaGVuIHlvdSBwcm92aWRlIGBvdXRsZXROYW1lYCwgeW91IHNob3VsZCBwcm92aWRlIHlvdXIgcm91dGVyIGNvbmZpZyB3aXRoIHN1Y2ggYW4gZW50cnkgdG8gZW5hYmxlIHRoZSBvdXRsZXQgcm91dGluZzpcclxuICogY2hpbGRyZW46IFt7cGF0aDogJzppZCcsIG91dGxldDogJ3lvdXJPdXRsZXROYW1lJywgY29tcG9uZW50OiBUYWJQYW5lbENvbXBvbmVudH1dXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3JiLXRhYi1wYW5lbCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3RhYi1wYW5lbC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRhYlBhbmVsQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgT25DaGFuZ2VzIHtcclxuXHJcbiAgQE91dHB1dCgpIHRhYkNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcclxuXHJcbiAgLyoqXHJcbiAgICogY2hhbmdlIHRoaXMgaW5wdXQgdG8gYW4gdGFiIGlkIHRvIG9wZW4gdGhhdCB0YWIuXHJcbiAgICovXHJcbiAgQElucHV0KCkgdGFiOiBzdHJpbmc7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ3BhbmVsUGxhY2Vob2xkZXInLCB7c3RhdGljOiB0cnVlfSkgcGFuZWxQbGFjZWhvbGRlcjogRWxlbWVudFJlZjtcclxuICBAVmlld0NoaWxkKCd0YWJQYW5lbCcsIHtzdGF0aWM6IHRydWV9KSB0YWJQYW5lbDogRWxlbWVudFJlZjtcclxuXHJcbiAgb3V0bGV0TmFtZTogc3RyaW5nO1xyXG5cclxuICB0YWJJdGVtczogVGFiUGFuZWxJdGVtRGlyZWN0aXZlW10gPSBbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciB0YWJzIHRoYXQgd2VyZSBvcGVuZWQgb25jZSwgc2hvdWxkIGJlIGtlcHQgaW4gdGhlIERPTVxyXG4gICAqIHdoZW4gc3dpdGNoaW5nIGF3YXkgZnJvbSB0aGVtLiBPciBzaG91bGQgdGhleSBiZSByZW1vdmVkIGZyb21cclxuICAgKiBET00gd2hlbiBzd2l0Y2hlZCB0byBhbm90aGVyIHRhYj9cclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIGRlc3Ryb3lUYWJzID0gZmFsc2U7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcmVuZGVySGlkZGVuVGFicyA9IGZhbHNlO1xyXG5cclxuICB0YWJJdGVtc0xlZnQ6IFRhYlBhbmVsSXRlbURpcmVjdGl2ZVtdO1xyXG4gIHRhYkl0ZW1zQ2VudGVyOiBUYWJQYW5lbEl0ZW1EaXJlY3RpdmVbXTtcclxuICB0YWJJdGVtc1JpZ2h0OiBUYWJQYW5lbEl0ZW1EaXJlY3RpdmVbXTtcclxuXHJcbiAgbGFzdEhlaWdodCA9IDA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgICAgICAgICAgICBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsXHJcbiAgICAgICAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChUQUJfUEFORUxfUkVTT0xWRVIpIHByaXZhdGUgdGFiUGFuZWxSZXNvbHZlcjogVGFiUGFuZWxSZXNvbHZlcikge1xyXG4gIH1cclxuXHJcblxyXG4gIEBDb250ZW50Q2hpbGRyZW4oVGFiUGFuZWxJdGVtRGlyZWN0aXZlKSBzZXQgdGFiSXRlbXNRdWVyeSh0YWJJdGVtczogUXVlcnlMaXN0PFRhYlBhbmVsSXRlbURpcmVjdGl2ZT4pIHtcclxuICAgIHRoaXMudGFiSXRlbXMgPSB0YWJJdGVtcy50b0FycmF5KCk7XHJcbiAgICBpZiAodGhpcy5vdXRsZXROYW1lKSB7XHJcbiAgICAgIHRoaXMudGFiSXRlbXMuZm9yRWFjaCh0YWJJdGVtID0+IHtcclxuICAgICAgICBjb25zdCBsaW5rID0ge291dGxldHM6IHt9fTtcclxuICAgICAgICBsaW5rLm91dGxldHNbdGhpcy5vdXRsZXROYW1lXSA9IFt0YWJJdGVtLmlkXTtcclxuICAgICAgICB0YWJJdGVtLnJvdXRlckxpbmsgPSBbbGlua107XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLnRhYkl0ZW1zLmxlbmd0aCAmJiB0aGlzLnRhYkl0ZW1zLmV2ZXJ5KHRhYkl0ZW0gPT4gIXRhYkl0ZW0uYWN0aXZlKSkge1xyXG4gICAgICBpZiAodGhpcy50YWIpIHtcclxuICAgICAgICB0aGlzLnNob3dUYWIodGhpcy50YWIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuc2hvd0ZpcnN0VGFiKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMudGFiSXRlbXNMZWZ0ID0gdGhpcy50YWJJdGVtcy5maWx0ZXIodGFiSXRlbSA9PiB0YWJJdGVtLnBvc2l0aW9uID09PSAnbGVmdCcpO1xyXG4gICAgdGhpcy50YWJJdGVtc0NlbnRlciA9IHRoaXMudGFiSXRlbXMuZmlsdGVyKHRhYkl0ZW0gPT4gdGFiSXRlbS5wb3NpdGlvbiA9PT0gJ2NlbnRlcicpO1xyXG4gICAgdGhpcy50YWJJdGVtc1JpZ2h0ID0gdGhpcy50YWJJdGVtcy5maWx0ZXIodGFiSXRlbSA9PiB0YWJJdGVtLnBvc2l0aW9uID09PSAncmlnaHQnKTtcclxuICB9XHJcblxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICB0aGlzLm9uUmVzaXplKCk7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICBpZiAoY2hhbmdlcy50YWIgJiYgY2hhbmdlcy50YWIuY3VycmVudFZhbHVlICYmICFjaGFuZ2VzLnRhYi5maXJzdENoYW5nZSkge1xyXG4gICAgICBjb25zdCBmb3VuZCA9IHRoaXMudGFiSXRlbXMuZmluZCh0YWJJdGVtID0+IHRhYkl0ZW0uaWQgPT09IGNoYW5nZXMudGFiLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgIGlmIChmb3VuZCAmJiAhZm91bmQuYWN0aXZlKSB7XHJcbiAgICAgICAgdGhpcy5zaG93VGFiKGNoYW5nZXMudGFiLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nRG9DaGVjaygpIHtcclxuICAgIGlmICh0aGlzLmVsZW1lbnQgJiYgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmdWxsLXdpZHRoJykpIHtcclxuICAgICAgdGhpcy5vblJlc2l6ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHNob3dGaXJzdFRhYigpIHtcclxuICAgIGNvbnN0IGZpcnN0SXRlbSA9IHRoaXMudGFiSXRlbXMuZmluZCh0YWJJdGVtID0+IHRhYkl0ZW0udHlwZSA9PT0gJ3RhYicpO1xyXG4gICAgaWYgKGZpcnN0SXRlbSkge1xyXG4gICAgICB0aGlzLnNob3dUYWIoZmlyc3RJdGVtLmlkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbiBiZSB1c2VkIHRvIHNob3cgYSBjZXJ0YWluIHRhYi5cclxuICAgKi9cclxuICBwdWJsaWMgc2hvd1RhYihpZDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBmb3VuZCA9IHRoaXMudGFiSXRlbXMuZmluZCh0YWJJdGVtID0+IHRhYkl0ZW0uaWQgPT09IGlkKTtcclxuICAgIGlmICghZm91bmQpIHtcclxuICAgICAgLy8gd2FpdCBhIHRpY2tcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlQW5kU2hvd1RhYihpZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5kZWFjdGl2YXRlQW5kU2hvd1RhYihpZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGRlYWN0aXZhdGVBbmRTaG93VGFiKGlkOiBzdHJpbmcpIHtcclxuICAgIHRoaXMudGFiSXRlbXMuZm9yRWFjaCh0YWJJdGVtID0+IHtcclxuICAgICAgaWYgKHRhYkl0ZW0uYWN0aXZlICYmIHRhYkl0ZW0uaWQgIT09IGlkKSB7XHJcbiAgICAgICAgdGFiSXRlbS5oaWRlKCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodGFiSXRlbS5pZCA9PT0gaWQpIHtcclxuICAgICAgICB0YWJJdGVtLnNob3coKTtcclxuICAgICAgICB0aGlzLnRhYkNoYW5nZWQubmV4dChpZCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScpXHJcbiAgb25SZXNpemUoKSB7XHJcbiAgICBpZiAodGhpcy5wYW5lbFBsYWNlaG9sZGVyICYmIHRoaXMudGFiUGFuZWwpIHtcclxuICAgICAgY29uc3QgdGFiUGFuZWxIZWlnaHQgPSB0aGlzLnRhYlBhbmVsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICBpZiAoTWF0aC5hYnModGhpcy5sYXN0SGVpZ2h0IC0gdGFiUGFuZWxIZWlnaHQpID4gMikge1xyXG4gICAgICAgIHRoaXMubGFzdEhlaWdodCA9IHRhYlBhbmVsSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5wYW5lbFBsYWNlaG9sZGVyLm5hdGl2ZUVsZW1lbnQsICdoZWlnaHQnLCB0YWJQYW5lbEhlaWdodCArICdweCcpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=