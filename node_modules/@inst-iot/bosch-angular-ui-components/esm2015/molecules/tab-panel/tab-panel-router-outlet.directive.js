import * as tslib_1 from "tslib";
import { ChildrenOutletContexts, RouterOutlet } from '@angular/router';
import { Attribute, Directive } from '@angular/core';
/**
 * Mocks the Router Outlet
 */
let TabPanelRouterOutletDirective = class TabPanelRouterOutletDirective extends RouterOutlet {
    constructor(_parentContexts, name) {
        super(_parentContexts, null, null, name, null);
        this._parentContexts = _parentContexts;
        this.__activatedRoute = null;
        this._name = name;
    }
    ngOnInit() {
        if (!this.__activated) {
            // If the outlet was not instantiated at the time the route got activated we need to populate
            // the outlet when it is initialized (ie inside a NgIf)
            const context = this._parentContexts.getContext(this._name);
            if (context && context.route) {
                if (context.attachRef) {
                    // `attachRef` is populated when there is an existing component to mount
                    this.attach(context.attachRef, context.route);
                }
                else {
                    // otherwise the component defined in the configuration is created
                    this.activateWith(context.route, context.resolver || null);
                }
            }
        }
    }
    get isActivated() {
        return this.__activated;
    }
    get component() {
        if (!this.__activated) {
            throw new Error('Outlet is not activated');
        }
        return null;
    }
    get activatedRoute() {
        if (!this.__activated) {
            throw new Error('Outlet is not activated');
        }
        return this.__activatedRoute;
    }
    get activatedRouteData() {
        if (this.__activatedRoute) {
            return this.__activatedRoute.snapshot.data;
        }
        return {};
    }
    /**
     * Called when the `RouteReuseStrategy` instructs to detach the subtree
     */
    detach() {
        if (!this.__activated) {
            throw new Error('Outlet is not activated');
        }
        this.__activated = null;
        this.__activatedRoute = null;
        return null;
    }
    /**
     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
     */
    attach(ref, activatedRoute) {
        this.__activated = true;
        this.__activatedRoute = activatedRoute;
        this.onActivate(activatedRoute);
    }
    deactivate() {
        if (this.__activated) {
            this.__activated = false;
            this.__activatedRoute = null;
        }
    }
    activateWith(activatedRoute, resolver) {
        console.log('activateWith', activatedRoute);
        if (this.isActivated) {
            throw new Error('Cannot activate an already activated outlet');
        }
        this.__activatedRoute = activatedRoute;
        this.__activated = true;
        this.onActivate(activatedRoute);
    }
    onActivate(activatedRoute) {
    }
};
TabPanelRouterOutletDirective = tslib_1.__decorate([
    Directive({
        // tslint:disable-next-line
        selector: 'rb-tab-panel-outlet'
    }),
    tslib_1.__param(1, Attribute('name')),
    tslib_1.__metadata("design:paramtypes", [ChildrenOutletContexts, String])
], TabPanelRouterOutletDirective);
export { TabPanelRouterOutletDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLXBhbmVsLXJvdXRlci1vdXRsZXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbIm1vbGVjdWxlcy90YWItcGFuZWwvdGFiLXBhbmVsLXJvdXRlci1vdXRsZXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWtCLHNCQUFzQixFQUFRLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdGLE9BQU8sRUFBRSxTQUFTLEVBQTBDLFNBQVMsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFFaEg7O0dBRUc7QUFLSCxJQUFhLDZCQUE2QixHQUExQyxNQUFhLDZCQUE4QixTQUFRLFlBQVk7SUFLN0QsWUFBb0IsZUFBdUMsRUFBcUIsSUFBWTtRQUMxRixLQUFLLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRDdCLG9CQUFlLEdBQWYsZUFBZSxDQUF3QjtRQUhuRCxxQkFBZ0IsR0FBMEIsSUFBSSxDQUFDO1FBS3JELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsNkZBQTZGO1lBQzdGLHVEQUF1RDtZQUN2RCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUQsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFDNUIsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO29CQUNyQix3RUFBd0U7b0JBQ3hFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQy9DO3FCQUFNO29CQUNMLGtFQUFrRTtvQkFDbEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUM7aUJBQzVEO2FBQ0Y7U0FDRjtJQUNILENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksU0FBUztRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUM1QztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELElBQUksY0FBYztRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLElBQUksQ0FBQyxnQkFBa0MsQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztTQUM1QztRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUM1QztRQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDN0IsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsR0FBc0IsRUFBRSxjQUE4QjtRQUMzRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsY0FBYyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFDekIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFRCxZQUFZLENBQUMsY0FBOEIsRUFBRSxRQUF5QztRQUNwRixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUM1QyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1NBQ2hFO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGNBQWMsQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxVQUFVLENBQUMsY0FBOEI7SUFDekMsQ0FBQztDQUNGLENBQUE7QUE1RlksNkJBQTZCO0lBSnpDLFNBQVMsQ0FBQztRQUNULDJCQUEyQjtRQUMzQixRQUFRLEVBQUUscUJBQXFCO0tBQ2hDLENBQUM7SUFNOEQsbUJBQUEsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBOzZDQUExQyxzQkFBc0I7R0FMaEQsNkJBQTZCLENBNEZ6QztTQTVGWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgQ2hpbGRyZW5PdXRsZXRDb250ZXh0cywgRGF0YSwgUm91dGVyT3V0bGV0IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgQXR0cmlidXRlLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiwgRGlyZWN0aXZlLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIE1vY2tzIHRoZSBSb3V0ZXIgT3V0bGV0XHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcclxuICBzZWxlY3RvcjogJ3JiLXRhYi1wYW5lbC1vdXRsZXQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUYWJQYW5lbFJvdXRlck91dGxldERpcmVjdGl2ZSBleHRlbmRzIFJvdXRlck91dGxldCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0IHtcclxuICBwcml2YXRlIF9fYWN0aXZhdGVkOiBib29sZWFuO1xyXG4gIHByaXZhdGUgX19hY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUgfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIF9uYW1lOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3BhcmVudENvbnRleHRzOiBDaGlsZHJlbk91dGxldENvbnRleHRzLCBAQXR0cmlidXRlKCduYW1lJykgbmFtZTogc3RyaW5nKSB7XHJcbiAgICBzdXBlcihfcGFyZW50Q29udGV4dHMsIG51bGwsIG51bGwsIG5hbWUsIG51bGwpO1xyXG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5fX2FjdGl2YXRlZCkge1xyXG4gICAgICAvLyBJZiB0aGUgb3V0bGV0IHdhcyBub3QgaW5zdGFudGlhdGVkIGF0IHRoZSB0aW1lIHRoZSByb3V0ZSBnb3QgYWN0aXZhdGVkIHdlIG5lZWQgdG8gcG9wdWxhdGVcclxuICAgICAgLy8gdGhlIG91dGxldCB3aGVuIGl0IGlzIGluaXRpYWxpemVkIChpZSBpbnNpZGUgYSBOZ0lmKVxyXG4gICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5fcGFyZW50Q29udGV4dHMuZ2V0Q29udGV4dCh0aGlzLl9uYW1lKTtcclxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5yb3V0ZSkge1xyXG4gICAgICAgIGlmIChjb250ZXh0LmF0dGFjaFJlZikge1xyXG4gICAgICAgICAgLy8gYGF0dGFjaFJlZmAgaXMgcG9wdWxhdGVkIHdoZW4gdGhlcmUgaXMgYW4gZXhpc3RpbmcgY29tcG9uZW50IHRvIG1vdW50XHJcbiAgICAgICAgICB0aGlzLmF0dGFjaChjb250ZXh0LmF0dGFjaFJlZiwgY29udGV4dC5yb3V0ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIG90aGVyd2lzZSB0aGUgY29tcG9uZW50IGRlZmluZWQgaW4gdGhlIGNvbmZpZ3VyYXRpb24gaXMgY3JlYXRlZFxyXG4gICAgICAgICAgdGhpcy5hY3RpdmF0ZVdpdGgoY29udGV4dC5yb3V0ZSwgY29udGV4dC5yZXNvbHZlciB8fCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBpc0FjdGl2YXRlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9fYWN0aXZhdGVkO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNvbXBvbmVudCgpOiBPYmplY3Qge1xyXG4gICAgaWYgKCF0aGlzLl9fYWN0aXZhdGVkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignT3V0bGV0IGlzIG5vdCBhY3RpdmF0ZWQnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGFjdGl2YXRlZFJvdXRlKCk6IEFjdGl2YXRlZFJvdXRlIHtcclxuICAgIGlmICghdGhpcy5fX2FjdGl2YXRlZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ091dGxldCBpcyBub3QgYWN0aXZhdGVkJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fX2FjdGl2YXRlZFJvdXRlIGFzIEFjdGl2YXRlZFJvdXRlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGFjdGl2YXRlZFJvdXRlRGF0YSgpOiBEYXRhIHtcclxuICAgIGlmICh0aGlzLl9fYWN0aXZhdGVkUm91dGUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX19hY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdC5kYXRhO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGBSb3V0ZVJldXNlU3RyYXRlZ3lgIGluc3RydWN0cyB0byBkZXRhY2ggdGhlIHN1YnRyZWVcclxuICAgKi9cclxuICBkZXRhY2goKTogQ29tcG9uZW50UmVmPGFueT4ge1xyXG4gICAgaWYgKCF0aGlzLl9fYWN0aXZhdGVkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignT3V0bGV0IGlzIG5vdCBhY3RpdmF0ZWQnKTtcclxuICAgIH1cclxuICAgIHRoaXMuX19hY3RpdmF0ZWQgPSBudWxsO1xyXG4gICAgdGhpcy5fX2FjdGl2YXRlZFJvdXRlID0gbnVsbDtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGBSb3V0ZVJldXNlU3RyYXRlZ3lgIGluc3RydWN0cyB0byByZS1hdHRhY2ggYSBwcmV2aW91c2x5IGRldGFjaGVkIHN1YnRyZWVcclxuICAgKi9cclxuICBhdHRhY2gocmVmOiBDb21wb25lbnRSZWY8YW55PiwgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlKSB7XHJcbiAgICB0aGlzLl9fYWN0aXZhdGVkID0gdHJ1ZTtcclxuICAgIHRoaXMuX19hY3RpdmF0ZWRSb3V0ZSA9IGFjdGl2YXRlZFJvdXRlO1xyXG4gICAgdGhpcy5vbkFjdGl2YXRlKGFjdGl2YXRlZFJvdXRlKTtcclxuICB9XHJcblxyXG4gIGRlYWN0aXZhdGUoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fX2FjdGl2YXRlZCkge1xyXG4gICAgICB0aGlzLl9fYWN0aXZhdGVkID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuX19hY3RpdmF0ZWRSb3V0ZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhY3RpdmF0ZVdpdGgoYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLCByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIHwgbnVsbCkge1xyXG4gICAgY29uc29sZS5sb2coJ2FjdGl2YXRlV2l0aCcsIGFjdGl2YXRlZFJvdXRlKTtcclxuICAgIGlmICh0aGlzLmlzQWN0aXZhdGVkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFjdGl2YXRlIGFuIGFscmVhZHkgYWN0aXZhdGVkIG91dGxldCcpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fX2FjdGl2YXRlZFJvdXRlID0gYWN0aXZhdGVkUm91dGU7XHJcbiAgICB0aGlzLl9fYWN0aXZhdGVkID0gdHJ1ZTtcclxuICAgIHRoaXMub25BY3RpdmF0ZShhY3RpdmF0ZWRSb3V0ZSk7XHJcbiAgfVxyXG5cclxuICBvbkFjdGl2YXRlKGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSkge1xyXG4gIH1cclxufVxyXG4iXX0=