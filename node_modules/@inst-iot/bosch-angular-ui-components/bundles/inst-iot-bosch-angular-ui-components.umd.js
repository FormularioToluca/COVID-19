(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/router'), require('rxjs/operators'), require('rxjs'), require('@angular/forms'), require('@angular/common/http'), require('flatpickr')) :
    typeof define === 'function' && define.amd ? define('@inst-iot/bosch-angular-ui-components', ['exports', '@angular/core', '@angular/common', '@angular/router', 'rxjs/operators', 'rxjs', '@angular/forms', '@angular/common/http', 'flatpickr'], factory) :
    (global = global || self, factory((global['inst-iot'] = global['inst-iot'] || {}, global['inst-iot']['bosch-angular-ui-components'] = {}), global.ng.core, global.ng.common, global.ng.router, global.rxjs.operators, global.rxjs, global.ng.forms, global.ng.common.http, global.flatpickrImport));
}(this, function (exports, core, common, router, operators, rxjs, forms, http, flatpickrImport) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    var MainNavItemsDirective = /** @class */ (function () {
        function MainNavItemsDirective(templateRef) {
            this.templateRef = templateRef;
        }
        MainNavItemsDirective = __decorate([
            core.Directive({
                selector: '[rbMainNavItems]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], MainNavItemsDirective);
        return MainNavItemsDirective;
    }());
    var SubNavItemsDirective = /** @class */ (function () {
        function SubNavItemsDirective(templateRef) {
            this.templateRef = templateRef;
        }
        SubNavItemsDirective = __decorate([
            core.Directive({
                selector: '[rbSubNavItems]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], SubNavItemsDirective);
        return SubNavItemsDirective;
    }());
    var MetaNavItemsDirective = /** @class */ (function () {
        function MetaNavItemsDirective(templateRef) {
            this.templateRef = templateRef;
        }
        MetaNavItemsDirective = __decorate([
            core.Directive({
                selector: '[rbMetaNavItems]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], MetaNavItemsDirective);
        return MetaNavItemsDirective;
    }());
    var ActionNavItemsDirective = /** @class */ (function () {
        function ActionNavItemsDirective(templateRef) {
            this.templateRef = templateRef;
        }
        ActionNavItemsDirective = __decorate([
            core.Directive({
                selector: '[rbActionNavItems]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], ActionNavItemsDirective);
        return ActionNavItemsDirective;
    }());

    var SubBrandHeaderDirective = /** @class */ (function () {
        function SubBrandHeaderDirective(templateRef) {
            this.templateRef = templateRef;
        }
        SubBrandHeaderDirective = __decorate([
            core.Directive({
                selector: '[rbSubBrandHeader]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], SubBrandHeaderDirective);
        return SubBrandHeaderDirective;
    }());
    var LogoHeaderDirective = /** @class */ (function () {
        function LogoHeaderDirective(templateRef) {
            this.templateRef = templateRef;
        }
        LogoHeaderDirective = __decorate([
            core.Directive({
                selector: '[rbLogoHeader]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], LogoHeaderDirective);
        return LogoHeaderDirective;
    }());

    var FullHeaderComponent = /** @class */ (function () {
        function FullHeaderComponent(router) {
            this.router = router;
            this.open = false;
            this.opened = false;
            this.fullHeight = null;
        }
        FullHeaderComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.router) {
                this.router.events.pipe(operators.filter(function (event) { return event instanceof router.NavigationEnd; })).subscribe(function (event) {
                    _this.open = false;
                });
            }
        };
        FullHeaderComponent.prototype.toggle = function () {
            this.open = !this.open;
            if (this.open) {
                this.opened = true;
            }
        };
        FullHeaderComponent.prototype.onScroll = function () {
            var header = this.headerElement.nativeElement;
            var placeholder = this.headerPlaceholderElement.nativeElement;
            var height = header.offsetHeight;
            var isSticky = header.classList.contains('sticky');
            if (!isSticky) {
                this.fullHeight = height;
            }
            if (window.pageYOffset > this.fullHeight && !isSticky) {
                header.classList.add('sticky');
                placeholder.classList.add('sticky');
                placeholder.style.height = this.fullHeight + 'px';
            }
            else if (window.pageYOffset <= this.fullHeight && isSticky) {
                header.classList.remove('sticky');
                placeholder.classList.remove('sticky');
            }
        };
        __decorate([
            core.ViewChild('header', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FullHeaderComponent.prototype, "headerElement", void 0);
        __decorate([
            core.ViewChild('placeholder', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FullHeaderComponent.prototype, "headerPlaceholderElement", void 0);
        __decorate([
            core.ContentChild(MainNavItemsDirective, { static: false }),
            __metadata("design:type", MainNavItemsDirective)
        ], FullHeaderComponent.prototype, "mainNavItems", void 0);
        __decorate([
            core.ContentChild(SubNavItemsDirective, { static: false }),
            __metadata("design:type", SubNavItemsDirective)
        ], FullHeaderComponent.prototype, "subNavItems", void 0);
        __decorate([
            core.ContentChild(MetaNavItemsDirective, { static: false }),
            __metadata("design:type", MetaNavItemsDirective)
        ], FullHeaderComponent.prototype, "metaNavItems", void 0);
        __decorate([
            core.ContentChild(ActionNavItemsDirective, { static: false }),
            __metadata("design:type", ActionNavItemsDirective)
        ], FullHeaderComponent.prototype, "actionNavItems", void 0);
        __decorate([
            core.ContentChild(SubBrandHeaderDirective, { static: false }),
            __metadata("design:type", SubBrandHeaderDirective)
        ], FullHeaderComponent.prototype, "subBrand", void 0);
        __decorate([
            core.ContentChild(LogoHeaderDirective, { static: false }),
            __metadata("design:type", LogoHeaderDirective)
        ], FullHeaderComponent.prototype, "customLogo", void 0);
        __decorate([
            core.HostListener('window:scroll'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], FullHeaderComponent.prototype, "onScroll", null);
        FullHeaderComponent = __decorate([
            core.Component({
                selector: 'rb-full-header',
                template: "<div class=\"header-placeholder\" #placeholder></div>\r\n<header class=\"header\" #header>\r\n  <div class=\"supergraphic bar\"></div>\r\n  <div class=\"header-content limit\">\r\n    <div class=\"logo\" *ngIf=\"customLogo\">\r\n      <ng-container *ngTemplateOutlet=\"customLogo.templateRef\"></ng-container>\r\n    </div>\r\n    <div class=\"logo\" *ngIf=\"!customLogo\">\r\n      <a href=\"https://www.bosch.com/\" target=\"_blank\">\r\n        <img src=\"assets/img/Bosch_EN_LV_RGB.png\" alt=\"Bosch - Invented for life\">\r\n      </a>\r\n    </div>\r\n    <div class=\"sub-brand\" *ngIf=\"subBrand\">\r\n      <div class=\"sub-brand-content\">\r\n        <ng-container *ngTemplateOutlet=\"subBrand.templateRef\"></ng-container>\r\n      </div>\r\n    </div>\r\n    <div class=\"small-nav\">\r\n      <button class=\"toggler\" [class.open]=\"open\" (click)=\"toggle()\">\r\n        <span class=\"bar\"></span>\r\n        <span class=\"bar\"></span>\r\n        <span class=\"bar\"></span>\r\n      </button>\r\n    </div>\r\n    <div class=\"main-nav\" [class.open]=\"open\" [class.opened]=\"opened\" *ngIf=\"mainNavItems\">\r\n      <rb-navigation type=\"main\" [itemsTemplate]=\"mainNavItems\"></rb-navigation>\r\n    </div>\r\n    <div class=\"action-nav\">\r\n      <rb-navigation type=\"action\" [itemsTemplate]=\"actionNavItems\"></rb-navigation>\r\n    </div>\r\n    <div class=\"sub-nav\" [class.open]=\"open\" [class.opened]=\"opened\" *ngIf=\"subNavItems\">\r\n      <rb-navigation type=\"sub\" [itemsTemplate]=\"subNavItems\"></rb-navigation>\r\n    </div>\r\n    <div class=\"meta-nav\" [class.open]=\"open\" [class.opened]=\"opened\" *ngIf=\"metaNavItems\">\r\n      <rb-navigation type=\"meta\" [itemsTemplate]=\"metaNavItems\"></rb-navigation>\r\n    </div>\r\n  </div>\r\n\r\n</header>\r\n"
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [router.Router])
        ], FullHeaderComponent);
        return FullHeaderComponent;
    }());

    var NavigationComponent = /** @class */ (function () {
        function NavigationComponent() {
            this.type = 'main'; // type of navigation
        }
        NavigationComponent.prototype.ngOnInit = function () {
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], NavigationComponent.prototype, "type", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], NavigationComponent.prototype, "itemsTemplate", void 0);
        NavigationComponent = __decorate([
            core.Component({
                selector: 'rb-navigation',
                template: "<nav [class]=\"'nav-'+type\">\n  <ng-container *ngTemplateOutlet=\"itemsTemplate?.templateRef\"></ng-container>\n  <ng-content></ng-content>\n</nav>\n"
            }),
            __metadata("design:paramtypes", [])
        ], NavigationComponent);
        return NavigationComponent;
    }());

    var NavigationModule = /** @class */ (function () {
        function NavigationModule() {
        }
        NavigationModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                declarations: [
                    NavigationComponent
                ],
                exports: [
                    NavigationComponent
                ]
            })
        ], NavigationModule);
        return NavigationModule;
    }());

    var FullHeaderModule = /** @class */ (function () {
        function FullHeaderModule() {
        }
        FullHeaderModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    NavigationModule,
                ],
                declarations: [
                    FullHeaderComponent,
                    MainNavItemsDirective,
                    SubNavItemsDirective,
                    MetaNavItemsDirective,
                    SubBrandHeaderDirective,
                    LogoHeaderDirective,
                    ActionNavItemsDirective
                ],
                exports: [
                    FullHeaderComponent,
                    MainNavItemsDirective,
                    SubNavItemsDirective,
                    MetaNavItemsDirective,
                    SubBrandHeaderDirective,
                    LogoHeaderDirective,
                    ActionNavItemsDirective
                ]
            })
        ], FullHeaderModule);
        return FullHeaderModule;
    }());

    /**
     * @Deprecated use the icon font with rb-ic css class
     */
    var IconComponent = /** @class */ (function () {
        function IconComponent() {
            this.basePath = 'assets/img/icons.svg';
        }
        IconComponent.prototype.ngOnInit = function () {
            // if it is MSIE
            if (!!document['documentMode'] && window['XMLHttpRequest']) {
                if (!document.getElementById('rb-icons')) {
                    var iconsEl_1 = document.createElement('div');
                    iconsEl_1.id = 'rb-icons';
                    iconsEl_1.style.display = 'none';
                    document.body.appendChild(iconsEl_1);
                    var http_1 = new window['XMLHttpRequest']();
                    http_1.onreadystatechange = function () {
                        if (http_1.readyState == 4 && http_1.status == 200) {
                            iconsEl_1.innerHTML = http_1.responseText;
                        }
                    };
                    http_1.open('GET', this.basePath, true);
                    http_1.send();
                }
                this.basePath = '';
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], IconComponent.prototype, "name", void 0);
        IconComponent = __decorate([
            core.Component({
                selector: 'rb-icon',
                template: "<!--<img [src]=\"'assets/images/icons/'+name+'.svg'\" [alt]=\"name\">-->\n\n<svg viewBox=\"0 0 100 100\" class=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <use [attr.xlink:href]=\"basePath+'#'+name\"></use>\n</svg>\n",
                styles: ["svg{height:1em;width:1em}"]
            }),
            __metadata("design:paramtypes", [])
        ], IconComponent);
        return IconComponent;
    }());

    var IconModule = /** @class */ (function () {
        function IconModule() {
        }
        IconModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                declarations: [IconComponent],
                exports: [IconComponent]
            })
        ], IconModule);
        return IconModule;
    }());

    var FooterNavComponent = /** @class */ (function () {
        function FooterNavComponent(renderer) {
            this.renderer = renderer;
        }
        FooterNavComponent.prototype.ngOnInit = function () {
            this.checkSticky();
        };
        FooterNavComponent.prototype.ngDoCheck = function () {
            this.checkSticky();
        };
        FooterNavComponent.prototype.onResize = function () {
            this.checkSticky();
        };
        FooterNavComponent.prototype.checkSticky = function () {
            var footer = this.footerEl.nativeElement;
            var footerHeight = footer.offsetHeight;
            var windowHeight = window.innerHeight;
            var bottomBorder = footer.offsetTop + footer.offsetHeight;
            var realContentHeight = document.body.firstElementChild.offsetHeight;
            var sticky = footer.classList.contains('sticky');
            if (!sticky && bottomBorder < windowHeight) {
                this.renderer.addClass(footer, 'sticky');
                this.renderer.setStyle(this.placeholderEl.nativeElement, 'height', footerHeight + 'px');
            }
            else if (sticky && realContentHeight >= windowHeight) {
                this.renderer.removeClass(footer, 'sticky');
            }
        };
        __decorate([
            core.ViewChild('footer', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FooterNavComponent.prototype, "footerEl", void 0);
        __decorate([
            core.ViewChild('placeholder', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FooterNavComponent.prototype, "placeholderEl", void 0);
        __decorate([
            core.HostListener('window:resize'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], FooterNavComponent.prototype, "onResize", null);
        FooterNavComponent = __decorate([
            core.Component({
                selector: 'rb-footer-nav',
                template: "<footer #footer>\n  <ng-content></ng-content>\n  <div class=\"supergraphic bar\"></div>\n</footer>\n<div class=\"footer-placeholder\" #placeholder></div>\n"
            }),
            __metadata("design:paramtypes", [core.Renderer2])
        ], FooterNavComponent);
        return FooterNavComponent;
    }());

    var FooterNavModule = /** @class */ (function () {
        function FooterNavModule() {
        }
        FooterNavModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                declarations: [FooterNavComponent],
                exports: [FooterNavComponent]
            })
        ], FooterNavModule);
        return FooterNavModule;
    }());

    function getAbsolutePosition(el) {
        var pos = { x: 0, y: 0 };
        var checkEl = el;
        while (checkEl) {
            pos.x += checkEl.offsetLeft;
            pos.y += checkEl.offsetTop;
            checkEl = checkEl.offsetParent;
        }
        return pos;
    }

    var PopoverComponent = /** @class */ (function () {
        function PopoverComponent() {
            this.primaryPos = 'bottom';
            this.close = new core.EventEmitter();
            this.mouseIn = false;
            this.initialized = false;
            this.context = {
                close: this.doClose.bind(this)
            };
        }
        PopoverComponent.prototype.onMouseEnter = function () {
            this.mouseIn = true;
        };
        PopoverComponent.prototype.onMouseLeave = function () {
            this.mouseIn = false;
        };
        PopoverComponent.prototype.onAnyClick = function () {
            if (!this.mouseIn && this.initialized) {
                this.close.next('click');
            }
        };
        PopoverComponent.prototype.onResize = function () {
            this.positionToAnchor();
        };
        PopoverComponent.prototype.ngOnInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.initialized = true;
                _this.positionToAnchor();
            });
            this.positionToAnchor();
        };
        PopoverComponent.prototype.ngAfterViewInit = function () {
            this.positionToAnchor();
        };
        PopoverComponent.prototype.doClose = function () {
            this.close.next();
        };
        PopoverComponent.prototype.positionToAnchor = function () {
            if (!this.anchor || !this.popoverElementRef) {
                return;
            }
            var a = this.anchor instanceof HTMLElement ? this.anchor : this.anchor.nativeElement;
            var pop = this.popoverElementRef.nativeElement;
            var arrow = this.arrowElementRef.nativeElement;
            var anchorPos = getAbsolutePosition(a);
            if (this.primaryPos === 'top' || this.primaryPos === 'bottom') {
                anchorPos.x += a.offsetWidth / 2;
                var isBottom = this.primaryPos === 'bottom';
                var pos = {
                    x: anchorPos.x - pop.offsetWidth / 2,
                    y: 0
                };
                if (!isBottom) {
                    pos.y = anchorPos.y - pop.offsetHeight - arrow.offsetHeight / 2;
                    if (pos.y < 0) {
                        isBottom = true;
                    }
                }
                if (isBottom) {
                    pos.y = anchorPos.y + a.offsetHeight + arrow.offsetHeight / 2;
                    arrow.classList.remove('bottom');
                }
                else {
                    arrow.classList.add('bottom');
                }
                if (pos.x + pop.offsetWidth > window.innerWidth) {
                    pos.x = window.innerWidth - pop.offsetWidth;
                }
                if (pos.x < 0) {
                    pos.x = 0;
                }
                var popParentPos = getAbsolutePosition(pop.offsetParent);
                pos.y -= popParentPos.y;
                pos.x -= popParentPos.x;
                pop.style.top = pos.y + 'px';
                pop.style.left = pos.x + 'px';
                var arrowX = anchorPos.x - (pos.x + popParentPos.x) - arrow.offsetWidth / 2;
                arrow.style.left = arrowX + 'px';
            }
            if (this.primaryPos === 'left' || this.primaryPos === 'right') {
                anchorPos.y += a.offsetHeight / 2;
                var isRight = this.primaryPos === 'right';
                var pos = {
                    x: 0,
                    y: anchorPos.y - pop.offsetHeight / 2,
                };
                if (!isRight) {
                    pos.x = anchorPos.x - pop.offsetWidth - arrow.offsetWidth / 2;
                    if (pos.x < 0) {
                        isRight = true;
                    }
                }
                if (isRight) {
                    pos.x = anchorPos.x + a.offsetWidth + arrow.offsetWidth / 2;
                    arrow.classList.remove('right');
                    arrow.classList.add('left');
                }
                else {
                    arrow.classList.add('right');
                    arrow.classList.remove('left');
                }
                if (pos.y < 0) {
                    pos.y = 0;
                }
                var popParentPos = getAbsolutePosition(pop.offsetParent);
                pos.y -= popParentPos.y;
                pos.x -= popParentPos.x;
                pop.style.top = pos.y + 'px';
                pop.style.left = pos.x + 'px';
                var arrowY = anchorPos.y - (pos.y + popParentPos.y) - arrow.offsetHeight / 2;
                arrow.style.top = arrowY + 'px';
            }
        };
        PopoverComponent.prototype.isTemplate = function () {
            return this.content instanceof core.TemplateRef;
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], PopoverComponent.prototype, "anchor", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], PopoverComponent.prototype, "content", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], PopoverComponent.prototype, "primaryPos", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PopoverComponent.prototype, "close", void 0);
        __decorate([
            core.ViewChild('popover', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PopoverComponent.prototype, "popoverElementRef", void 0);
        __decorate([
            core.ViewChild('arrow', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], PopoverComponent.prototype, "arrowElementRef", void 0);
        __decorate([
            core.HostListener('mouseenter'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], PopoverComponent.prototype, "onMouseEnter", null);
        __decorate([
            core.HostListener('mouseleave'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], PopoverComponent.prototype, "onMouseLeave", null);
        __decorate([
            core.HostListener('window:click'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], PopoverComponent.prototype, "onAnyClick", null);
        __decorate([
            core.HostListener('window:resize'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], PopoverComponent.prototype, "onResize", null);
        PopoverComponent = __decorate([
            core.Component({
                selector: 'rb-popover',
                template: "<div class=\"rb-popover\" #popover>\r\n  <div class=\"rb-popover-arrow\" #arrow></div>\r\n  <div class=\"rb-popover-content\" *ngIf=\"isTemplate()\">\r\n    <ng-container *ngTemplateOutlet=\"content; context: context\"></ng-container>\r\n  </div>\r\n  <div class=\"rb-popover-content-text\" *ngIf=\"!isTemplate()\">\r\n    {{content}}\r\n  </div>\r\n</div>\r\n"
            }),
            __metadata("design:paramtypes", [])
        ], PopoverComponent);
        return PopoverComponent;
    }());

    var PopoverDirective = /** @class */ (function () {
        function PopoverDirective(factoryResolver, viewContainerRef) {
            this.factoryResolver = factoryResolver;
            this.viewContainerRef = viewContainerRef;
            this.position = 'bottom';
            this.componentRef = null;
            this.closeSub = null;
        }
        PopoverDirective.prototype.ngOnDestroy = function () {
            this.closePopOver();
        };
        Object.defineProperty(PopoverDirective.prototype, "template", {
            set: function (tpl) {
                this.content = tpl;
            },
            enumerable: true,
            configurable: true
        });
        PopoverDirective.prototype.onClick = function (e) {
            e.preventDefault();
            this.openPopOver();
        };
        PopoverDirective.prototype.openPopOver = function () {
            var _this = this;
            if (this.componentRef) {
                this.closePopOver();
                return;
            }
            var componentFactory = this.factoryResolver.resolveComponentFactory(PopoverComponent);
            this.componentRef = this.viewContainerRef.createComponent(componentFactory);
            this.componentRef.instance.anchor = this.anchor || this.viewContainerRef.element;
            this.componentRef.instance.content = this.content;
            this.componentRef.instance.primaryPos = this.position;
            this.closeSub = this.componentRef.instance.close.subscribe(function () {
                _this.closePopOver();
            });
            this.viewContainerRef.element.nativeElement.classList.add('open');
        };
        PopoverDirective.prototype.closePopOver = function () {
            if (this.componentRef) {
                if (this.closeSub) {
                    this.closeSub.unsubscribe();
                }
                this.viewContainerRef.element.nativeElement.classList.remove('open');
                var viewIndex = this.viewContainerRef.indexOf(this.componentRef.hostView);
                if (viewIndex !== -1) {
                    this.viewContainerRef.remove(viewIndex);
                }
                this.componentRef = null;
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], PopoverDirective.prototype, "position", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], PopoverDirective.prototype, "anchor", void 0);
        __decorate([
            core.Input('rbPopover'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PopoverDirective.prototype, "template", null);
        __decorate([
            core.HostListener('click', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [MouseEvent]),
            __metadata("design:returntype", void 0)
        ], PopoverDirective.prototype, "onClick", null);
        PopoverDirective = __decorate([
            core.Directive({
                selector: '[rbPopover]',
                exportAs: 'rbPopover'
            }),
            __metadata("design:paramtypes", [core.ComponentFactoryResolver,
                core.ViewContainerRef])
        ], PopoverDirective);
        return PopoverDirective;
    }());

    var TooltipDirective = /** @class */ (function () {
        function TooltipDirective(factoryResolver, viewContainerRef) {
            this.factoryResolver = factoryResolver;
            this.viewContainerRef = viewContainerRef;
            this.position = 'top';
            /**
             * Disables that the tooltip stays open when clicked.
             * Instead the tooltip is closed.
             */
            this.noFix = false;
            this.componentRef = null;
            this.closeSub = null;
            this.fixed = false;
        }
        TooltipDirective.prototype.ngOnDestroy = function () {
            this.closeTooltip();
        };
        Object.defineProperty(TooltipDirective.prototype, "template", {
            set: function (tpl) {
                this.content = tpl;
            },
            enumerable: true,
            configurable: true
        });
        TooltipDirective.prototype.onClick = function (e) {
            if (this.noFix === false) {
                e.preventDefault();
                e.stopPropagation();
                this.fixed = true;
                this.openTooltip();
            }
        };
        TooltipDirective.prototype.onEnter = function (e) {
            e.preventDefault();
            this.openTooltip();
        };
        TooltipDirective.prototype.onLeave = function (e) {
            if (!this.fixed) {
                e.preventDefault();
                this.closeTooltip();
            }
        };
        TooltipDirective.prototype.openTooltip = function () {
            var _this = this;
            if (this.componentRef) {
                this.updateComponentState();
                return;
            }
            var componentFactory = this.factoryResolver.resolveComponentFactory(PopoverComponent);
            this.componentRef = this.viewContainerRef.createComponent(componentFactory);
            var instance = this.componentRef.instance;
            instance.anchor = this.anchor || this.viewContainerRef.element;
            instance.content = this.content;
            instance.primaryPos = this.position;
            if (this.context) {
                Object.assign(instance.context, this.context);
            }
            instance.context.fixed = this.fixed;
            this.updateComponentState();
            this.closeSub = instance.close.subscribe(function () {
                _this.closeTooltip();
            });
            this.viewContainerRef.element.nativeElement.classList.add('open');
        };
        TooltipDirective.prototype.updateComponentState = function () {
            var instance = this.componentRef.instance;
            instance.context.fixed = this.fixed;
            if (this.fixed) {
                this.viewContainerRef.element.nativeElement.classList.add('open-fixed');
                instance.popoverElementRef.nativeElement.classList.add('open-fixed');
            }
        };
        TooltipDirective.prototype.closeTooltip = function () {
            this.fixed = false;
            if (this.componentRef) {
                if (this.closeSub) {
                    this.closeSub.unsubscribe();
                }
                this.viewContainerRef.element.nativeElement.classList.remove('open');
                this.viewContainerRef.element.nativeElement.classList.remove('open-fixed');
                var viewIndex = this.viewContainerRef.indexOf(this.componentRef.hostView);
                if (viewIndex !== -1) {
                    this.viewContainerRef.remove(viewIndex);
                }
                this.componentRef = null;
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], TooltipDirective.prototype, "position", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], TooltipDirective.prototype, "noFix", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], TooltipDirective.prototype, "context", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], TooltipDirective.prototype, "anchor", void 0);
        __decorate([
            core.Input('rbTooltip'),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], TooltipDirective.prototype, "template", null);
        __decorate([
            core.HostListener('click', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [MouseEvent]),
            __metadata("design:returntype", void 0)
        ], TooltipDirective.prototype, "onClick", null);
        __decorate([
            core.HostListener('mouseenter', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [MouseEvent]),
            __metadata("design:returntype", void 0)
        ], TooltipDirective.prototype, "onEnter", null);
        __decorate([
            core.HostListener('mouseleave', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [MouseEvent]),
            __metadata("design:returntype", void 0)
        ], TooltipDirective.prototype, "onLeave", null);
        TooltipDirective = __decorate([
            core.Directive({
                selector: '[rbTooltip]',
                exportAs: 'rbPopover'
            }),
            __metadata("design:paramtypes", [core.ComponentFactoryResolver,
                core.ViewContainerRef])
        ], TooltipDirective);
        return TooltipDirective;
    }());

    var PopoverModule = /** @class */ (function () {
        function PopoverModule() {
        }
        PopoverModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                declarations: [PopoverComponent, PopoverDirective, TooltipDirective],
                exports: [PopoverComponent, PopoverDirective, TooltipDirective],
                entryComponents: [PopoverComponent]
            })
        ], PopoverModule);
        return PopoverModule;
    }());

    var DropdownComponent = /** @class */ (function () {
        function DropdownComponent() {
            this.primaryPos = 'left';
            this.autoClose = true;
            this.hugContent = false;
            this.close = new core.EventEmitter();
            this.shown = false;
            this.updateContext({});
        }
        DropdownComponent.prototype.onAnyClick = function () {
            if (this.shown) {
                this.doClose('click');
            }
        };
        DropdownComponent.prototype.onClick = function (event) {
            event.stopPropagation();
            if (this.shown && this.autoClose) {
                this.doClose('click');
            }
        };
        DropdownComponent.prototype.onResize = function () {
            this.positionToAnchor();
        };
        DropdownComponent.prototype.ngOnInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.positionToAnchor();
            });
            this.positionToAnchor();
        };
        DropdownComponent.prototype.show = function () {
            var _this = this;
            setTimeout(function () {
                _this.shown = true;
            });
            this.popoverElementRef.nativeElement.classList.add('open');
            this.positionToAnchor();
        };
        DropdownComponent.prototype.hide = function () {
            this.shown = false;
            this.popoverElementRef.nativeElement.classList.remove('open');
        };
        DropdownComponent.prototype.ngAfterViewChecked = function () {
            this.positionToAnchor();
        };
        DropdownComponent.prototype.positionToAnchor = function () {
            if (!this.anchor || !this.popoverElementRef) {
                return;
            }
            var a = this.anchor.nativeElement;
            var pop = this.popoverElementRef.nativeElement;
            var anchorPos = getAbsolutePosition(a);
            var viewTop = window.pageYOffset;
            var viewBottom = window.innerHeight + window.pageYOffset;
            var isBottom = true;
            if (!this.hugContent) {
                pop.style.minWidth = a.offsetWidth + 'px';
            }
            var pos = {
                x: anchorPos.x,
                y: 0
            };
            if (this.primaryPos === 'center') {
                pos.x += a.offsetWidth / 2 - pop.offsetWidth / 2;
            }
            if (this.primaryPos === 'right') {
                pos.x += a.offsetWidth - pop.offsetWidth;
            }
            pos.y = anchorPos.y + a.offsetHeight;
            if (pos.y + pop.offsetHeight > viewBottom) {
                isBottom = false;
            }
            if (!isBottom) {
                pos.y = anchorPos.y - pop.offsetHeight;
                if (pos.y < 0) {
                    isBottom = true;
                }
            }
            if (isBottom) {
                pos.y = anchorPos.y + a.offsetHeight;
            }
            if (pos.x + pop.offsetWidth > window.innerWidth) {
                pos.x = window.innerWidth - pop.offsetWidth;
            }
            if (pos.x < 0) {
                pos.x = 0;
            }
            var popParentPos = getAbsolutePosition(pop.offsetParent);
            pos.y -= popParentPos.y;
            pos.x -= popParentPos.x;
            pop.style.top = pos.y + 'px';
            pop.style.left = pos.x + 'px';
        };
        DropdownComponent.prototype.doClose = function (reason) {
            this.close.next(reason);
        };
        DropdownComponent.prototype.updateContext = function (ctx) {
            this.context = __assign({}, ctx, { close: this.doClose.bind(this) });
        };
        __decorate([
            core.Input(),
            __metadata("design:type", core.ElementRef)
        ], DropdownComponent.prototype, "anchor", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", core.TemplateRef)
        ], DropdownComponent.prototype, "content", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], DropdownComponent.prototype, "primaryPos", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DropdownComponent.prototype, "autoClose", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DropdownComponent.prototype, "hugContent", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], DropdownComponent.prototype, "close", void 0);
        __decorate([
            core.ViewChild('dropdown', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], DropdownComponent.prototype, "popoverElementRef", void 0);
        __decorate([
            core.HostListener('window:click'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], DropdownComponent.prototype, "onAnyClick", null);
        __decorate([
            core.HostListener('click', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [MouseEvent]),
            __metadata("design:returntype", void 0)
        ], DropdownComponent.prototype, "onClick", null);
        __decorate([
            core.HostListener('window:resize'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], DropdownComponent.prototype, "onResize", null);
        DropdownComponent = __decorate([
            core.Component({
                selector: 'rb-dropdown',
                template: "<div class=\"dropdown\" #dropdown>\n  <div class=\"dropdown-content\">\n    <ng-container *ngTemplateOutlet=\"content; context: context\"></ng-container>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [])
        ], DropdownComponent);
        return DropdownComponent;
    }());

    var DropdownDirective = /** @class */ (function () {
        function DropdownDirective(factoryResolver, viewContainerRef) {
            this.factoryResolver = factoryResolver;
            this.viewContainerRef = viewContainerRef;
            this.position = 'left';
            this.autoClose = true;
            this.renderOnInit = false;
            this.hugContent = false;
            this.openOnClick = true;
            this.componentRef = null;
            this.closeSub = null;
        }
        DropdownDirective.prototype.ngOnDestroy = function () {
            this.closeDropdown();
        };
        DropdownDirective.prototype.ngOnInit = function () {
            if (this.renderOnInit) {
                this.renderDropdown();
            }
        };
        Object.defineProperty(DropdownDirective.prototype, "template", {
            set: function (tpl) {
                this.tpl = tpl;
            },
            enumerable: true,
            configurable: true
        });
        DropdownDirective.prototype.onClick = function (e) {
            if (!this.openOnClick) {
                return;
            }
            e.preventDefault();
            this.openDropdown();
        };
        Object.defineProperty(DropdownDirective.prototype, "context", {
            set: function (ctx) {
                this._context = ctx;
                if (this.componentRef) {
                    this.componentRef.instance.updateContext(ctx);
                }
            },
            enumerable: true,
            configurable: true
        });
        DropdownDirective.prototype.renderDropdown = function () {
            var _this = this;
            var componentFactory = this.factoryResolver.resolveComponentFactory(DropdownComponent);
            this.componentRef = this.viewContainerRef.createComponent(componentFactory);
            this.componentRef.instance.anchor = this.viewContainerRef.element;
            this.componentRef.instance.content = this.tpl;
            this.componentRef.instance.primaryPos = this.position;
            this.componentRef.instance.autoClose = this.autoClose;
            this.componentRef.instance.hugContent = this.hugContent;
            this.closeSub = this.componentRef.instance.close.subscribe(function () {
                _this.closeDropdown();
            });
            if (this._context) {
                this.componentRef.instance.updateContext(this._context);
            }
        };
        DropdownDirective.prototype.openDropdown = function () {
            if (this.componentRef && !this.renderOnInit || this.renderOnInit && this.componentRef.instance.shown) {
                this.closeDropdown();
                return;
            }
            if (!this.renderOnInit) {
                this.renderDropdown();
            }
            this.componentRef.instance.show();
            this.viewContainerRef.element.nativeElement.classList.add('open');
        };
        DropdownDirective.prototype.closeDropdown = function () {
            if (this.componentRef) {
                this.componentRef.instance.hide();
                this.viewContainerRef.element.nativeElement.classList.remove('open');
                if (!this.renderOnInit) {
                    if (this.closeSub) {
                        this.closeSub.unsubscribe();
                    }
                    var viewIndex = this.viewContainerRef.indexOf(this.componentRef.hostView);
                    if (viewIndex !== -1) {
                        this.viewContainerRef.remove(viewIndex);
                    }
                    this.componentRef = null;
                }
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], DropdownDirective.prototype, "position", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DropdownDirective.prototype, "autoClose", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DropdownDirective.prototype, "renderOnInit", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DropdownDirective.prototype, "hugContent", void 0);
        __decorate([
            core.Input('rbDropdown'),
            __metadata("design:type", core.TemplateRef),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], DropdownDirective.prototype, "template", null);
        __decorate([
            core.HostListener('click', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [MouseEvent]),
            __metadata("design:returntype", void 0)
        ], DropdownDirective.prototype, "onClick", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DropdownDirective.prototype, "context", null);
        DropdownDirective = __decorate([
            core.Directive({
                selector: '[rbDropdown]',
                exportAs: 'rbDropdown'
            }),
            __metadata("design:paramtypes", [core.ComponentFactoryResolver,
                core.ViewContainerRef])
        ], DropdownDirective);
        return DropdownDirective;
    }());

    var DropdownModule = /** @class */ (function () {
        function DropdownModule() {
        }
        DropdownModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                declarations: [DropdownComponent, DropdownDirective],
                entryComponents: [DropdownComponent],
                exports: [DropdownComponent, DropdownDirective]
            })
        ], DropdownModule);
        return DropdownModule;
    }());

    var LanguageSelectorComponent = /** @class */ (function () {
        function LanguageSelectorComponent() {
            this.languageChange = new core.EventEmitter();
        }
        LanguageSelectorComponent.prototype.ngOnInit = function () {
        };
        LanguageSelectorComponent.prototype.selectLanguage = function (l) {
            this.language = l.id;
            this.languageChange.next(this.language);
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], LanguageSelectorComponent.prototype, "languages", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], LanguageSelectorComponent.prototype, "language", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], LanguageSelectorComponent.prototype, "languageChange", void 0);
        LanguageSelectorComponent = __decorate([
            core.Component({
                selector: 'rb-language-selector',
                template: "<a href=\"javascript:\" [rbDropdown]=\"items\" [position]=\"'right'\" class=\"language-selector-link language rb-dropdown-toggle\">\n  {{language}}\n</a>\n<ng-template #items>\n  <ul class=\"link-list\">\n    <li *ngFor=\"let l of languages\">\n      <a href=\"javascript:\" (click)=\"selectLanguage(l)\" [class.active]=\"l.id === language\">\n        <span class=\"language\">{{l.id}}</span> | {{l.name}}\n      </a>\n    </li>\n  </ul>\n</ng-template>\n"
            }),
            __metadata("design:paramtypes", [])
        ], LanguageSelectorComponent);
        return LanguageSelectorComponent;
    }());

    var LanguageSelectorModule = /** @class */ (function () {
        function LanguageSelectorModule() {
        }
        LanguageSelectorModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    DropdownModule,
                    IconModule
                ],
                declarations: [LanguageSelectorComponent],
                exports: [LanguageSelectorComponent]
            })
        ], LanguageSelectorModule);
        return LanguageSelectorModule;
    }());

    var LoadingSpinnerComponent = /** @class */ (function () {
        function LoadingSpinnerComponent() {
            this.size = 1;
        }
        LoadingSpinnerComponent.prototype.ngOnInit = function () {
        };
        LoadingSpinnerComponent.prototype.getHeight = function () {
            return this.calculate(60);
        };
        LoadingSpinnerComponent.prototype.getWidth = function () {
            return this.calculate(60);
        };
        LoadingSpinnerComponent.prototype.calculate = function (defaultVal) {
            if (this.size > 0 && this.size < 3) {
                return (defaultVal * this.size) + 'px';
            }
            else {
                return defaultVal + 'px';
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LoadingSpinnerComponent.prototype, "size", void 0);
        LoadingSpinnerComponent = __decorate([
            core.Component({
                selector: 'rb-loading-spinner',
                template: "<div class=\"rb-loader\" [ngStyle]=\"{width: getWidth(), height: getHeight()}\">\n  <div class=\"block1\"></div>\n  <div class=\"block2\"></div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [])
        ], LoadingSpinnerComponent);
        return LoadingSpinnerComponent;
    }());

    var LoadingSpinnerModule = /** @class */ (function () {
        function LoadingSpinnerModule() {
        }
        LoadingSpinnerModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                declarations: [LoadingSpinnerComponent],
                exports: [LoadingSpinnerComponent]
            })
        ], LoadingSpinnerModule);
        return LoadingSpinnerModule;
    }());

    /**
     * When you define routes, add data: {title: 'myTitle'} to define what is displayed in the breadcrumbs.
     * If the title property is not enough for you to determine what should be displayed, you can
     * just extend this service and provide your own. This is probably necessary when you use some i18n tooling.
     *
     * You need to provide this service to use the rb-breadcrumbs component.
     * e.g. BreadcrumbsModule.forRoot()
     */
    var BreadcrumbsService = /** @class */ (function () {
        function BreadcrumbsService(router, activeRoute) {
            this.router = router;
            this.activeRoute = activeRoute;
            this.initAutomatedRouteRecognition();
        }
        BreadcrumbsService.prototype.initAutomatedRouteRecognition = function () {
            var _this = this;
            this.router.events.pipe(operators.filter(function (event) { return event instanceof router.NavigationEnd; }))
                .subscribe(function () { return _this.refresh(); });
            this.breadcrumbs = new rxjs.BehaviorSubject(this.identifyRoute());
        };
        BreadcrumbsService.prototype.refresh = function () {
            this.breadcrumbs.next(this.identifyRoute());
        };
        BreadcrumbsService.prototype.identifyRoute = function () {
            var breadcrumbs = [];
            var path = ['/'];
            // Traverse route snapshots to get the breadcrumbs path
            for (var route = this.activeRoute.snapshot; route; route = route.firstChild) {
                if (route.outlet === 'primary') {
                    path.push.apply(path, __spread(route.url.map(function (segment) { return segment.path; })));
                }
                var element = this.getBreadCrumbElement(route, path);
                if (element) {
                    breadcrumbs.push(element);
                }
            }
            return breadcrumbs;
        };
        BreadcrumbsService.prototype.getBreadCrumbElement = function (route, path) {
            var element = {
                urlSegments: path.slice(0),
                title: '...'
            };
            if (route.outlet === 'primary' && route.data && route.data['title']) {
                element.title = typeof (route.data['title']) === 'function' ? route.data['title'](route) : route.data['title'];
                return element;
            }
            return null;
        };
        BreadcrumbsService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [router.Router,
                router.ActivatedRoute])
        ], BreadcrumbsService);
        return BreadcrumbsService;
    }());

    var BreadcrumbsComponent = /** @class */ (function () {
        function BreadcrumbsComponent(breadcrumbsService) {
            this.breadcrumbsService = breadcrumbsService;
            this.breadcrumbs = [];
            /**
             * Minimal amount of entries the breadcrumb must have to be displayed
             */
            this.minElements = 0;
            this.sub = null;
        }
        BreadcrumbsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.sub = this.breadcrumbsService.breadcrumbs.subscribe(function (list) {
                _this.breadcrumbs = list;
            });
        };
        BreadcrumbsComponent.prototype.ngOnDestroy = function () {
            if (this.sub) {
                this.sub.unsubscribe();
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], BreadcrumbsComponent.prototype, "minElements", void 0);
        BreadcrumbsComponent = __decorate([
            core.Component({
                selector: 'rb-breadcrumbs',
                template: "<ng-container *ngIf=\"breadcrumbs.length >= minElements\">\n  <div class=\"limit breadcrumbs-container\">\n    <ul class=\"breadcrumbs\">\n      <li *ngFor=\"let data of breadcrumbs\">\n        <a [routerLink]=\"data.urlSegments\">{{data.title}}</a>\n      </li>\n    </ul>\n    <div class=\"breadcrumbs-right\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n  <hr class=\"no-margin\">\n</ng-container>\n"
            }),
            __metadata("design:paramtypes", [BreadcrumbsService])
        ], BreadcrumbsComponent);
        return BreadcrumbsComponent;
    }());

    var BreadcrumbsModule = /** @class */ (function () {
        function BreadcrumbsModule() {
        }
        BreadcrumbsModule_1 = BreadcrumbsModule;
        BreadcrumbsModule.forRoot = function () {
            return {
                ngModule: BreadcrumbsModule_1,
                providers: [
                    BreadcrumbsService
                ]
            };
        };
        var BreadcrumbsModule_1;
        BreadcrumbsModule = BreadcrumbsModule_1 = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    router.RouterModule
                ],
                declarations: [BreadcrumbsComponent],
                exports: [BreadcrumbsComponent]
            })
        ], BreadcrumbsModule);
        return BreadcrumbsModule;
    }());

    var FormValidationMessageDirective = /** @class */ (function () {
        function FormValidationMessageDirective(templateRef) {
            this.templateRef = templateRef;
            this.onTouched = false;
        }
        Object.defineProperty(FormValidationMessageDirective.prototype, "rbFormValidationMessage", {
            set: function (name) {
                this.name = name;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormValidationMessageDirective.prototype, "rbFormValidationMessageOnTouched", {
            set: function (onTouched) {
                this.onTouched = onTouched;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], FormValidationMessageDirective.prototype, "rbFormValidationMessage", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], FormValidationMessageDirective.prototype, "rbFormValidationMessageOnTouched", null);
        FormValidationMessageDirective = __decorate([
            core.Directive({
                selector: '[rbFormValidationMessage]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], FormValidationMessageDirective);
        return FormValidationMessageDirective;
    }());

    function emptyFunction(arg) {
    }

    var CUSTOM_VALUE_CONVERTER = new core.InjectionToken('formInputCustomValueConverter');
    var FormInputComponent = /** @class */ (function () {
        function FormInputComponent(renderer, elementRef, valueConverter, cd) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.valueConverter = valueConverter;
            this.cd = cd;
            this.placeholder = '';
            this.label = null;
            this.type = 'text';
            this.id = 'input.' + Math.random();
            this.onChange = emptyFunction;
            this.onTouched = emptyFunction;
        }
        FormInputComponent_1 = FormInputComponent;
        FormInputComponent.prototype.ngAfterViewInit = function () {
            if (this.autofocus) {
                this.focus();
            }
            if (this.autocomplete !== undefined) {
                this.input.nativeElement.autocomplete = this.autocomplete;
            }
        };
        FormInputComponent.prototype.focus = function () {
            this.input.nativeElement.focus();
        };
        FormInputComponent.prototype.updateIcon = function (icon) {
            this.icon = icon;
            this.cd.detectChanges();
        };
        FormInputComponent.prototype.isReadonly = function () {
            return !!(this.readonly === '' || this.readonly);
        };
        FormInputComponent.prototype.updateValue = function (value) {
            this.checkValue(value);
            if (this.valueConverter) {
                this.onChange(this.valueConverter.valueToModel(value));
            }
            else {
                this.onChange(value);
            }
        };
        FormInputComponent.prototype.checkValue = function (value) {
            if (typeof (value) === 'string' && value.length > 0) {
                this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
            }
            else {
                this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
            }
        };
        FormInputComponent.prototype.isLabelTemplate = function () {
            return this.label instanceof core.TemplateRef;
        };
        FormInputComponent.prototype.writeValue = function (value) {
            if (this.valueConverter) {
                value = this.valueConverter.modelToValue(value);
            }
            if (value === null || value === undefined) {
                value = '';
            }
            else {
                value = String(value);
            }
            this.checkValue(value);
            this.renderer.setProperty(this.input.nativeElement, 'value', value);
        };
        FormInputComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        FormInputComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        FormInputComponent.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
        };
        Object.defineProperty(FormInputComponent.prototype, "maxlength", {
            set: function (maxLength) {
                if (maxLength) {
                    this.renderer.setAttribute(this.input.nativeElement, 'maxlength', maxLength);
                }
                else {
                    this.renderer.removeAttribute(this.input.nativeElement, 'maxlength');
                }
            },
            enumerable: true,
            configurable: true
        });
        var FormInputComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormInputComponent.prototype, "name", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormInputComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormInputComponent.prototype, "label", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormInputComponent.prototype, "type", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormInputComponent.prototype, "readonly", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormInputComponent.prototype, "autocomplete", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormInputComponent.prototype, "icon", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], FormInputComponent.prototype, "autofocus", void 0);
        __decorate([
            core.ContentChildren(FormValidationMessageDirective),
            __metadata("design:type", core.QueryList)
        ], FormInputComponent.prototype, "messages", void 0);
        __decorate([
            core.ViewChild('input', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FormInputComponent.prototype, "input", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], FormInputComponent.prototype, "maxlength", null);
        FormInputComponent = FormInputComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-input',
                template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <input [type]=\"type\" [id]=\"id + 'input'\"\r\n         class=\"input\"\r\n         [class.with-icon]=\"icon\"\r\n         [placeholder]=\"placeholder\"\r\n         [autofocus]=\"autofocus\"\r\n         (blur)=\"onTouched()\"\r\n         (input)=\"updateValue($event.target.value)\"\r\n         [readonly]=\"isReadonly()\"\r\n         #input>\r\n  <span *ngIf=\"icon\" [ngClass]=\"'input-icon '+icon\"></span>\r\n  <label class=\"label\" [for]=\"id + 'input'\">\r\n    {{!isLabelTemplate() ? label : ''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormInputComponent_1; }), multi: true }],
                exportAs: 'rbFormInput',
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __param(2, core.Optional()), __param(2, core.Self()), __param(2, core.Inject(CUSTOM_VALUE_CONVERTER)),
            __metadata("design:paramtypes", [core.Renderer2,
                core.ElementRef, Object, core.ChangeDetectorRef])
        ], FormInputComponent);
        return FormInputComponent;
    }());

    var FormCheckboxComponent = /** @class */ (function () {
        function FormCheckboxComponent(renderer) {
            this.renderer = renderer;
            this.id = 'checkbox.' + Math.random();
            this.label = null;
            this.onChange = emptyFunction;
            this.onTouched = emptyFunction;
        }
        FormCheckboxComponent_1 = FormCheckboxComponent;
        FormCheckboxComponent.prototype.updateValue = function (value) {
            this.onChange(value);
        };
        FormCheckboxComponent.prototype.isLabelTemplate = function () {
            return this.label instanceof core.TemplateRef;
        };
        FormCheckboxComponent.prototype.writeValue = function (value) {
            this.renderer.setProperty(this.input.nativeElement, 'checked', value);
        };
        FormCheckboxComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        FormCheckboxComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        FormCheckboxComponent.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
        };
        var FormCheckboxComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], FormCheckboxComponent.prototype, "required", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], FormCheckboxComponent.prototype, "noValidation", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormCheckboxComponent.prototype, "name", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormCheckboxComponent.prototype, "label", void 0);
        __decorate([
            core.ViewChild('input', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FormCheckboxComponent.prototype, "input", void 0);
        __decorate([
            core.ContentChildren(FormValidationMessageDirective),
            __metadata("design:type", core.QueryList)
        ], FormCheckboxComponent.prototype, "messages", void 0);
        FormCheckboxComponent = FormCheckboxComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-checkbox',
                template: "<div class=\"input-wrapper\" [class.disabled]=\"input.disabled\">\r\n  <label [for]=\"id + 'input'\">\r\n    <input type=\"checkbox\" class=\"checkbox-control\"\r\n           (blur)=\"onTouched()\" (change)=\"updateValue($event.target.checked)\"\r\n           [id]=\"id + 'input'\" #input>\r\n\r\n    <span class=\"checkbox-icon\">\r\n      <span class=\"check rb-ic rb-ic-checkmark\"></span>\r\n    </span>\r\n\r\n    <span class=\"label-text\">\r\n      {{!isLabelTemplate()?label:''}}\r\n      <ng-container *ngIf=\"isLabelTemplate()\">\r\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n      </ng-container>\r\n      <ng-content></ng-content>\r\n    </span>\r\n\r\n  </label>\r\n\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormCheckboxComponent_1; }), multi: true }]
            }),
            __metadata("design:paramtypes", [core.Renderer2])
        ], FormCheckboxComponent);
        return FormCheckboxComponent;
    }());

    var FormSelectComponent = /** @class */ (function (_super) {
        __extends(FormSelectComponent, _super);
        function FormSelectComponent(renderer, elementRef, valueConverter, cd) {
            return _super.call(this, renderer, elementRef, valueConverter, cd) || this;
        }
        FormSelectComponent_1 = FormSelectComponent;
        var FormSelectComponent_1;
        FormSelectComponent = FormSelectComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-select',
                template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <select class=\"input select\"\r\n          [id]=\"id + 'input'\"\r\n          (blur)=\"onTouched()\"\r\n          (change)=\"updateValue($event.target.value)\" #input>\r\n    <ng-content></ng-content>\r\n  </select>\r\n\r\n  <label [for]=\"id + 'input'\" class=\"label select-label\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"select-icon rb-ic rb-ic-down\"></span>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormSelectComponent_1; }), multi: true }]
            }),
            __param(2, core.Optional()), __param(2, core.Self()), __param(2, core.Inject(CUSTOM_VALUE_CONVERTER)),
            __metadata("design:paramtypes", [core.Renderer2,
                core.ElementRef, Object, core.ChangeDetectorRef])
        ], FormSelectComponent);
        return FormSelectComponent;
    }(FormInputComponent));

    var FormTextareaComponent = /** @class */ (function (_super) {
        __extends(FormTextareaComponent, _super);
        function FormTextareaComponent(renderer, elementRef, valueConverter, cd) {
            return _super.call(this, renderer, elementRef, valueConverter, cd) || this;
        }
        FormTextareaComponent_1 = FormTextareaComponent;
        var FormTextareaComponent_1;
        FormTextareaComponent = FormTextareaComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-textarea',
                template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <textarea [id]=\"id + 'input'\" class=\"textarea\"\r\n            (blur)=\"onTouched()\" (input)=\"updateValue($event.target.value)\"\r\n            [readonly]=\"isReadonly()\"\r\n            [placeholder]=\"placeholder\"\r\n            #input></textarea>\r\n\r\n  <label [for]=\"id + 'input'\" class=\"label\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormTextareaComponent_1; }), multi: true }],
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }),
            __param(2, core.Optional()), __param(2, core.Self()), __param(2, core.Inject(CUSTOM_VALUE_CONVERTER)),
            __metadata("design:paramtypes", [core.Renderer2, core.ElementRef, Object, core.ChangeDetectorRef])
        ], FormTextareaComponent);
        return FormTextareaComponent;
    }(FormInputComponent));

    var MultiSelectOptionDirective = /** @class */ (function () {
        function MultiSelectOptionDirective(templateRef) {
            this.templateRef = templateRef;
        }
        MultiSelectOptionDirective = __decorate([
            core.Directive({
                selector: '[rbFormMultiSelectOption]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], MultiSelectOptionDirective);
        return MultiSelectOptionDirective;
    }());
    var MultiSelectTitleDirective = /** @class */ (function () {
        function MultiSelectTitleDirective(templateRef) {
            this.templateRef = templateRef;
        }
        MultiSelectTitleDirective = __decorate([
            core.Directive({
                selector: '[rbFormMultiSelectTitle]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], MultiSelectTitleDirective);
        return MultiSelectTitleDirective;
    }());
    /**
     * Use this component to have multiple selections.
     * The value is a map of id -> state.
     * The items are an array of objects.
     * To identify the id of an object from the items array, provide the idField.
     */
    var FormMultiSelectComponent = /** @class */ (function () {
        function FormMultiSelectComponent(renderer, elementRef) {
            var _this = this;
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.label = null;
            this.id = 'multiSelect.' + Math.random();
            this.selectAllLabel = 'Select all';
            this.isMouseOver = false;
            /**
             * Property name of the property that contains the unique value of an item
             * Otherwise the JSON rep is used as value
             */
            this.idField = null;
            /**
             * What states should be offered per item
             * check: just checked(true) and unchecked(false)
             * optCheck: unchecked(null), include(true), exclude(false)
             */
            this.statesMode = 'check';
            this.numStates = 2;
            this._states = {
                'check': [false, true],
                'optCheck': [null, false, true]
            };
            this.maxItemsPreview = 3;
            this.allStates = null;
            this.countNotDefState = 0;
            this.firstNotDefStateItem = null;
            this._value = {};
            this.titleContext = {
                $implicit: null,
                count: 0,
                firstItem: null,
                states: null
            };
            this.onChange = emptyFunction;
            this.onTouched = emptyFunction;
            this.getItemTrackId = function (i, item) {
                return _this.getItemId(item.item);
            };
        }
        FormMultiSelectComponent_1 = FormMultiSelectComponent;
        FormMultiSelectComponent.prototype.ngOnInit = function () {
            var states = this.getStates();
            this.numStates = states.length;
            this.allStates = states[0];
        };
        FormMultiSelectComponent.prototype.isLabelTemplate = function () {
            return this.label instanceof core.TemplateRef;
        };
        Object.defineProperty(FormMultiSelectComponent.prototype, "items", {
            set: function (items) {
                var _this = this;
                var states = this.getStates();
                this._items = items.map(function (item) {
                    var id = _this.getItemId(item);
                    var state = states[0];
                    if (_this._value && _this._value[id] !== undefined) {
                        state = _this._value[id];
                    }
                    return {
                        item: item,
                        state: state
                    };
                });
                this.doOnChanges();
            },
            enumerable: true,
            configurable: true
        });
        FormMultiSelectComponent.prototype.getItemId = function (item) {
            if (this.idField && item) {
                return item[this.idField];
            }
            else {
                return JSON.stringify(item);
            }
        };
        FormMultiSelectComponent.prototype.getStates = function () {
            return this._states[this.statesMode];
        };
        FormMultiSelectComponent.prototype.allStatesChange = function (state) {
            this.allStates = state;
            if (!this._items) {
                return;
            }
            this._items.forEach(function (item) {
                item.state = state;
            });
            this.notifyChanges();
        };
        FormMultiSelectComponent.prototype.updateStateOfItem = function (item, state) {
            item.state = state;
            if (this._items.some(function (d) { return d.state !== state; })) {
                var states = this.getStates();
                this.allStates = states[0];
            }
            else {
                this.allStates = state;
            }
            this.notifyChanges();
        };
        FormMultiSelectComponent.prototype.getCurrentStatesObject = function () {
            var _this = this;
            var states = {};
            this._items.forEach(function (item) {
                var id = _this.getItemId(item.item);
                states[id] = item.state;
            });
            return states;
        };
        FormMultiSelectComponent.prototype.doOnChanges = function () {
            var _this = this;
            this.firstNotDefStateItem = null;
            this.countNotDefState = 0;
            var states = this.getStates();
            if (!this._items) {
                return;
            }
            this._items.forEach(function (item) {
                if (item.state !== states[0]) {
                    _this.countNotDefState++;
                    if (_this.firstNotDefStateItem === null) {
                        _this.firstNotDefStateItem = item;
                    }
                }
            });
            this.titleContext = {
                $implicit: this._items,
                count: this.countNotDefState,
                firstItem: this.firstNotDefStateItem,
                states: this._value
            };
            if (this.countNotDefState === 0 && this.selectAllLabel === '') {
                this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
            }
            else {
                this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
            }
        };
        FormMultiSelectComponent.prototype.notifyChanges = function () {
            this.doOnChanges();
            this.onChange(this.getCurrentStatesObject());
        };
        FormMultiSelectComponent.prototype.mouseover = function () {
            this.isMouseOver = true;
        };
        FormMultiSelectComponent.prototype.mouseleave = function () {
            this.isMouseOver = false;
        };
        FormMultiSelectComponent.prototype.writeValue = function (items) {
            var _this = this;
            this._value = items;
            if (items) {
                var states_1 = this.getStates();
                this._items.forEach(function (item) {
                    var id = _this.getItemId(item.item);
                    if (items[id] !== undefined) {
                        item.state = items[id];
                    }
                    else {
                        item.state = states_1[0];
                    }
                });
            }
            this.doOnChanges();
        };
        FormMultiSelectComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        FormMultiSelectComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        FormMultiSelectComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        var FormMultiSelectComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormMultiSelectComponent.prototype, "name", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormMultiSelectComponent.prototype, "label", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormMultiSelectComponent.prototype, "selectAllLabel", void 0);
        __decorate([
            core.ContentChildren(FormValidationMessageDirective),
            __metadata("design:type", core.QueryList)
        ], FormMultiSelectComponent.prototype, "messages", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormMultiSelectComponent.prototype, "idField", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormMultiSelectComponent.prototype, "statesMode", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormMultiSelectComponent.prototype, "maxItemsPreview", void 0);
        __decorate([
            core.ContentChild(MultiSelectOptionDirective, { static: false }),
            __metadata("design:type", MultiSelectOptionDirective)
        ], FormMultiSelectComponent.prototype, "option", void 0);
        __decorate([
            core.ContentChild(MultiSelectTitleDirective, { static: false }),
            __metadata("design:type", MultiSelectTitleDirective)
        ], FormMultiSelectComponent.prototype, "title", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], FormMultiSelectComponent.prototype, "items", null);
        __decorate([
            core.HostListener('mouseenter'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], FormMultiSelectComponent.prototype, "mouseover", null);
        __decorate([
            core.HostListener('mouseleave'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], FormMultiSelectComponent.prototype, "mouseleave", null);
        FormMultiSelectComponent = FormMultiSelectComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-multi-select',
                template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <button [rbDropdown]=\"dropdownContent\"\r\n          [id]=\"id\"\r\n          [autoClose]=\"false\"\r\n          [disabled]=\"disabled !== undefined\"\r\n          (blur)=\"onTouched()\"\r\n          class=\"rb-select-btn input\">\r\n\r\n    <ng-container *ngIf=\"title\">\r\n      <ng-container *ngTemplateOutlet=\"title.templateRef; context: titleContext\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!title\">\r\n      <ng-container *ngIf=\"titleContext.count === 1\">\r\n        <ng-container *ngIf=\"option\">\r\n          <ng-container\r\n            *ngTemplateOutlet=\"option.templateRef; context: {$implicit: titleContext.firstItem.item}\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!option\">\r\n          {{titleContext.firstItem.item | json}}\r\n        </ng-container>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"titleContext.count > 1\">{{titleContext.count}} items selected</ng-container>\r\n    </ng-container>\r\n\r\n  </button>\r\n\r\n  <label [for]=\"id\" class=\"label rb-select-label\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"select-icon rb-ic rb-ic-down\"></span>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n\r\n\r\n<ng-template #dropdownContent>\r\n  <ng-container *ngIf=\"selectAllLabel\">\r\n    <rb-form-multi-checkbox [numStates]=\"numStates\"\r\n                            class=\"list-item-input\"\r\n                            [ngModel]=\"allStates\"\r\n                            (ngModelChange)=\"allStatesChange($event)\">\r\n      {{selectAllLabel}}\r\n    </rb-form-multi-checkbox>\r\n    <hr class=\"no-margin\">\r\n  </ng-container>\r\n\r\n  <div class=\"dropdown-limited\">\r\n    <ng-container *ngFor=\"let item of _items; trackBy: getItemTrackId\">\r\n      <rb-form-multi-checkbox [numStates]=\"numStates\"\r\n                              class=\"list-item-input\"\r\n                              [ngModel]=\"item.state\"\r\n                              (ngModelChange)=\"updateStateOfItem(item, $event)\">\r\n        <ng-container *ngIf=\"option\">\r\n          <ng-container *ngTemplateOutlet=\"option.templateRef; context: {$implicit: item.item}\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!option\">\r\n          {{item.item | json}}\r\n        </ng-container>\r\n      </rb-form-multi-checkbox>\r\n    </ng-container>\r\n  </div>\r\n\r\n</ng-template>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormMultiSelectComponent_1; }), multi: true }]
            }),
            __metadata("design:paramtypes", [core.Renderer2, core.ElementRef])
        ], FormMultiSelectComponent);
        return FormMultiSelectComponent;
    }());

    var FormMultiCheckboxComponent = /** @class */ (function () {
        function FormMultiCheckboxComponent(renderer) {
            this.renderer = renderer;
            this.id = 'multiCheckbox.' + Math.random();
            this.label = null;
            this.state = null;
            this.numStates = 2;
            this.stateLabels = ['stateNull', 'stateTrue', 'stateFalse'];
            this.statesValues = [null, true, false];
            this.stateLabel = this.stateLabels[0];
            this.onChange = emptyFunction;
            this.onTouched = emptyFunction;
        }
        FormMultiCheckboxComponent_1 = FormMultiCheckboxComponent;
        FormMultiCheckboxComponent.prototype.ngOnInit = function () {
            if (this.numStates === 2) {
                this.stateLabels = ['stateNull', 'stateTrue'];
                this.statesValues = [false, true];
                if (this.statesValues.indexOf(this.state) === -1) {
                    this.state = this.statesValues[0];
                }
            }
            this.setState(this.state);
        };
        FormMultiCheckboxComponent.prototype.isLabelTemplate = function () {
            return this.label instanceof core.TemplateRef;
        };
        FormMultiCheckboxComponent.prototype.ngOnChanges = function (changes) {
            if (changes.state && !changes.state.firstChange) {
                this.state = changes.state.currentValue;
                this.setState(this.state);
            }
        };
        FormMultiCheckboxComponent.prototype.setState = function (stateValue) {
            var index = this.statesValues.indexOf(stateValue);
            this.stateLabel = this.stateLabels[index];
            this.renderer.setProperty(this.input.nativeElement, 'checked', this.stateLabel !== 'stateNull');
        };
        FormMultiCheckboxComponent.prototype.toggleState = function () {
            var index = this.stateLabels.indexOf(this.stateLabel);
            var newIndex = (index + 1) % this.stateLabels.length;
            this.state = this.statesValues[newIndex];
            this.setState(this.state);
            this.onChange(this.state);
        };
        FormMultiCheckboxComponent.prototype.writeValue = function (value) {
            this.setState(value);
        };
        FormMultiCheckboxComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        FormMultiCheckboxComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        FormMultiCheckboxComponent.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
        };
        var FormMultiCheckboxComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormMultiCheckboxComponent.prototype, "name", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormMultiCheckboxComponent.prototype, "label", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormMultiCheckboxComponent.prototype, "numStates", void 0);
        __decorate([
            core.ViewChild('input', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FormMultiCheckboxComponent.prototype, "input", void 0);
        __decorate([
            core.ContentChildren(FormValidationMessageDirective),
            __metadata("design:type", core.QueryList)
        ], FormMultiCheckboxComponent.prototype, "messages", void 0);
        __decorate([
            core.ViewChild('labelElement', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FormMultiCheckboxComponent.prototype, "labelElement", void 0);
        FormMultiCheckboxComponent = FormMultiCheckboxComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-multi-checkbox',
                template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n  <label [for]=\"id + 'input'\" #labelElement [class]=\"stateLabel\">\r\n    <input type=\"checkbox\"\r\n           (change)=\"toggleState()\"\r\n           (blur)=\"onTouched()\"\r\n           class=\"checkbox-control\"\r\n           [id]=\"id + 'input'\"\r\n           #input>\r\n\r\n    <span class=\"checkbox-icon\">\r\n      <span class=\"check rb-ic rb-ic-checkmark\"></span>\r\n      <span class=\"cross rb-ic rb-ic-close\"></span>\r\n    </span>\r\n\r\n    <span class=\"label-text\">\r\n      {{!isLabelTemplate()?label:''}}\r\n      <ng-container *ngIf=\"isLabelTemplate()\">\r\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n      </ng-container>\r\n      <ng-content></ng-content>\r\n    </span>\r\n\r\n  </label>\r\n\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormMultiCheckboxComponent_1; }), multi: true }]
            }),
            __metadata("design:paramtypes", [core.Renderer2])
        ], FormMultiCheckboxComponent);
        return FormMultiCheckboxComponent;
    }());

    var FormFileComponent = /** @class */ (function () {
        function FormFileComponent(renderer, elementRef) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.label = null;
            this.placeholder = '';
            this.filesChange = new core.EventEmitter();
            this.id = 'file.' + Math.random();
            this.onChange = emptyFunction;
            this.onTouched = emptyFunction;
            this.filePreview = '';
        }
        FormFileComponent_1 = FormFileComponent;
        FormFileComponent.prototype.checkSelectedFiles = function () {
            var fileNames = [];
            var files = [];
            for (var i = 0; i < this.file.nativeElement.files.length; i++) {
                var file = this.file.nativeElement.files[i];
                files.push(file);
                if (file.name) {
                    fileNames.push(file.name);
                }
            }
            if (files.length === 0) {
                this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
            }
            else {
                this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
            }
            this.filePreview = fileNames.join(', ');
            if (this.filePreview.length > 100) {
                this.filePreview = this.filePreview.substr(0, 97) + '... (' + fileNames.length + ')';
            }
            console.log('files', files);
            this.onChange(files);
        };
        FormFileComponent.prototype.isLabelTemplate = function () {
            return this.label instanceof core.TemplateRef;
        };
        FormFileComponent.prototype.writeValue = function (value) {
            // console.warn('unsupported write to rb-form-file', value);
        };
        FormFileComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        FormFileComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        FormFileComponent.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.file.nativeElement, 'disabled', isDisabled);
        };
        var FormFileComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormFileComponent.prototype, "label", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormFileComponent.prototype, "name", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormFileComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], FormFileComponent.prototype, "filesChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormFileComponent.prototype, "accept", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormFileComponent.prototype, "multiple", void 0);
        __decorate([
            core.ViewChild('file', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FormFileComponent.prototype, "file", void 0);
        __decorate([
            core.ContentChildren(FormValidationMessageDirective),
            __metadata("design:type", core.QueryList)
        ], FormFileComponent.prototype, "messages", void 0);
        FormFileComponent = FormFileComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-file',
                template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <input type=\"file\"\r\n         [id]=\"id + 'input'\"\r\n         [placeholder]=\"placeholder\"\r\n         [multiple]=\"multiple !== undefined\"\r\n         [accept]=\"accept\"\r\n         class=\"file-input with-icon\"\r\n         #file\r\n         (change)=\"checkSelectedFiles()\"\r\n         (blur)=\"onTouched()\">\r\n  <span class=\"input-icon no-pointer\">\r\n    <span class=\"rb-ic rb-ic-upload\"></span>\r\n  </span>\r\n\r\n  <label class=\"rb-btn rb-select-btn input\" [for]=\"id + 'input'\">{{filePreview}}</label>\r\n\r\n  <label class=\"label\" [for]=\"id + 'input'\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormFileComponent_1; }), multi: true }]
            }),
            __metadata("design:paramtypes", [core.Renderer2, core.ElementRef])
        ], FormFileComponent);
        return FormFileComponent;
    }());

    var FormErrorsComponent = /** @class */ (function () {
        function FormErrorsComponent(control, cd) {
            this.control = control;
            this.cd = cd;
            this.errors = [];
        }
        FormErrorsComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.control) {
                this.sub = this.control.statusChanges.subscribe(function (value) {
                    _this.errors = _this.getErrors();
                    _this.cd.markForCheck();
                });
            }
        };
        FormErrorsComponent.prototype.ngOnDestroy = function () {
            if (this.sub) {
                this.sub.unsubscribe();
            }
        };
        FormErrorsComponent.prototype.ngDoCheck = function () {
            this.errors = this.getErrors();
        };
        FormErrorsComponent.prototype.getErrors = function () {
            var e_1, _a;
            var errors = [];
            if (this.control && this.control.errors && (this.control.touched || this.control.dirty)) {
                var errorKeys = Object.keys(this.control.errors);
                var _loop_1 = function (key) {
                    var message = this_1.messages.find(function (item) { return item.name === key; });
                    if (message && (message.onTouched || !message.onTouched && this_1.control.dirty)) {
                        errors.push({
                            name: key,
                            data: this_1.control.errors[key],
                            message: message.templateRef
                        });
                    }
                };
                var this_1 = this;
                try {
                    for (var errorKeys_1 = __values(errorKeys), errorKeys_1_1 = errorKeys_1.next(); !errorKeys_1_1.done; errorKeys_1_1 = errorKeys_1.next()) {
                        var key = errorKeys_1_1.value;
                        _loop_1(key);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (errorKeys_1_1 && !errorKeys_1_1.done && (_a = errorKeys_1.return)) _a.call(errorKeys_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return errors;
        };
        FormErrorsComponent.prototype.getItemName = function (i, item) {
            return item.name;
        };
        __decorate([
            core.Input(),
            __metadata("design:type", core.QueryList)
        ], FormErrorsComponent.prototype, "messages", void 0);
        FormErrorsComponent = __decorate([
            core.Component({
                selector: 'rb-form-errors',
                template: "<div class=\"error-messages\" *ngIf=\"control && control.invalid && errors.length\">\n  <div *ngFor=\"let item of errors; trackBy: getItemName\">\n    <ng-container *ngTemplateOutlet=\"item.message; context: item\"></ng-container>\n  </div>\n</div>\n"
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [forms.NgControl,
                core.ChangeDetectorRef])
        ], FormErrorsComponent);
        return FormErrorsComponent;
    }());

    /* tslint:disable:directive-selector */
    var FormCheckboxRequiredValidatorDirective = /** @class */ (function () {
        function FormCheckboxRequiredValidatorDirective() {
            this.statesMode = 'check';
        }
        FormCheckboxRequiredValidatorDirective_1 = FormCheckboxRequiredValidatorDirective;
        Object.defineProperty(FormCheckboxRequiredValidatorDirective.prototype, "required", {
            get: function () {
                return this._required;
            },
            set: function (value) {
                this._required = value != null && value !== false && "" + value !== 'false';
                if (this._onChange) {
                    this._onChange();
                }
            },
            enumerable: true,
            configurable: true
        });
        FormCheckboxRequiredValidatorDirective.prototype.validate = function (c) {
            if (this.required) {
                return this.hasValue(c) ? null : { 'required': true };
            }
            return null;
        };
        FormCheckboxRequiredValidatorDirective.prototype.hasValue = function (c) {
            if (typeof (c.value) === 'boolean') {
                return c.value === true;
            }
            if (typeof (c.value) === 'object' && c.value) {
                var values = Object.keys(c.value).map(function (key) { return c.value[key]; });
                if (this.statesMode === 'optCheck') {
                    return values.some(function (v) { return v !== null; });
                }
                if (this.statesMode === 'check') {
                    return values.some(function (v) { return v !== false; });
                }
            }
            return true;
        };
        FormCheckboxRequiredValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
            this._onChange = fn;
        };
        var FormCheckboxRequiredValidatorDirective_1;
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormCheckboxRequiredValidatorDirective.prototype, "statesMode", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], FormCheckboxRequiredValidatorDirective.prototype, "required", null);
        FormCheckboxRequiredValidatorDirective = FormCheckboxRequiredValidatorDirective_1 = __decorate([
            core.Directive({
                selector: 'rb-form-checkbox[required],rb-form-multi-select[required]',
                providers: [{
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return FormCheckboxRequiredValidatorDirective_1; }),
                        multi: true
                    }]
            }),
            __metadata("design:paramtypes", [])
        ], FormCheckboxRequiredValidatorDirective);
        return FormCheckboxRequiredValidatorDirective;
    }());

    /* tslint:disable:directive-selector */
    var FormFileValidatorDirective = /** @class */ (function () {
        function FormFileValidatorDirective() {
        }
        FormFileValidatorDirective_1 = FormFileValidatorDirective;
        FormFileValidatorDirective.prototype.ngOnChanges = function (changes) {
            if (this.onChange && (changes.min || changes.max || changes.maxSize)) {
                this.onChange();
            }
        };
        FormFileValidatorDirective.prototype.validate = function (c) {
            var errors = {};
            var minNumber = this.min ? parseInt(this.min, 10) : 0;
            var maxNumber = this.max ? parseInt(this.max, 10) : 0;
            var maxSize = this.maxSize ? parseInt(this.maxSize, 10) : 0;
            if (minNumber && (!c.value || Array.isArray(c.value) && c.value.length < minNumber)) {
                errors.min = true;
            }
            if (maxNumber && (!c.value || Array.isArray(c.value) && c.value.length > maxNumber)) {
                errors.max = true;
            }
            if (maxSize && Array.isArray(c.value)) {
                c.value.some(function (file) {
                    if (file.size > maxSize) {
                        errors.maxSize = file.name;
                        return true;
                    }
                    return false;
                });
            }
            return Object.keys(errors).length ? errors : null;
        };
        FormFileValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
            this.onChange = fn;
        };
        var FormFileValidatorDirective_1;
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormFileValidatorDirective.prototype, "min", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormFileValidatorDirective.prototype, "max", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormFileValidatorDirective.prototype, "maxSize", void 0);
        FormFileValidatorDirective = FormFileValidatorDirective_1 = __decorate([
            core.Directive({
                selector: 'rb-form-file[min],rb-form-file[max],rb-form-file[min],rb-form-file[maxSize]',
                providers: [{
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return FormFileValidatorDirective_1; }),
                        multi: true
                    }]
            }),
            __metadata("design:paramtypes", [])
        ], FormFileValidatorDirective);
        return FormFileValidatorDirective;
    }());

    var FORM_SELECT_SELECTOR = new core.InjectionToken('formCustomSelectSelectorSubject');

    var FormSelectOptionComponent = /** @class */ (function () {
        function FormSelectOptionComponent(selectSubject, elementRef) {
            this.selectSubject = selectSubject;
            this.elementRef = elementRef;
            this.active = false;
        }
        FormSelectOptionComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.sub = this.selectSubject.subscribe(function (action) {
                _this.active = action.value === _this.value;
            });
        };
        FormSelectOptionComponent.prototype.ngOnDestroy = function () {
            if (this.sub) {
                this.sub.unsubscribe();
            }
        };
        FormSelectOptionComponent.prototype.select = function () {
            this.selectSubject.next({ type: 'update', value: this.value });
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormSelectOptionComponent.prototype, "value", void 0);
        __decorate([
            core.ViewChild('innerLink', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FormSelectOptionComponent.prototype, "content", void 0);
        FormSelectOptionComponent = __decorate([
            core.Component({
                selector: 'rb-form-select-option',
                template: "<a href=\"javascript:\" class=\"rb-dropdown-item\" [class.active]=\"active\" (click)=\"select()\" #innerLink>\r\n  <ng-content></ng-content>\r\n</a>\r\n"
            }),
            __param(0, core.Inject(FORM_SELECT_SELECTOR)),
            __metadata("design:paramtypes", [rxjs.Subject,
                core.ElementRef])
        ], FormSelectOptionComponent);
        return FormSelectOptionComponent;
    }());

    function customSelectSelectorFactory() {
        return new rxjs.Subject();
    }
    /**
     * This component offers a select field, that can be heavily customized.
     * The easy way would to just add options like this:
     * <rb-form-select-option [value]=""></rb-form-select-option>
     *
     * But you can also provide a selectionTpl which is a ng-template that is used to show the options in the dropdown.
     * It gets a context, that contains a select() function that can be used to provide the value for the ngModel.
     */
    var FormCustomSelectComponent = /** @class */ (function () {
        function FormCustomSelectComponent(renderer, elementRef, selectSubject) {
            var _this = this;
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.selectSubject = selectSubject;
            this.label = null;
            this.id = 'customSelectValue.' + Math.random();
            this.selectionTpl = null;
            this.autoClose = true;
            this.isMouseOver = false;
            this.onChange = emptyFunction;
            this.onTouched = emptyFunction;
            this.value = null;
            this.updateValue = function (value) {
                _this.value = value;
                _this.onChange(value);
                _this.checkValue(value);
            };
        }
        FormCustomSelectComponent_1 = FormCustomSelectComponent;
        FormCustomSelectComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.selectSub = this.selectSubject.subscribe(function (action) {
                if (action.type === 'update') {
                    _this.updateValue(action.value);
                }
            });
        };
        FormCustomSelectComponent.prototype.ngOnDestroy = function () {
            if (this.selectSub) {
                this.selectSub.unsubscribe();
            }
        };
        FormCustomSelectComponent.prototype.ngAfterViewInit = function () {
            this.updateCurrentLabel(this.value);
        };
        FormCustomSelectComponent.prototype.isLabelTemplate = function () {
            return this.label instanceof core.TemplateRef;
        };
        FormCustomSelectComponent.prototype.mouseover = function () {
            this.isMouseOver = true;
        };
        FormCustomSelectComponent.prototype.mouseleave = function () {
            this.isMouseOver = false;
        };
        FormCustomSelectComponent.prototype.writeValue = function (value) {
            this.value = value;
            this.selectSubject.next({ type: 'write', value: value });
            this.checkValue(value);
        };
        FormCustomSelectComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        FormCustomSelectComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        FormCustomSelectComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        FormCustomSelectComponent.prototype.checkValue = function (value) {
            if (typeof (value) === 'string' && value.length > 0 || typeof (value) === 'number' || typeof (value) === 'boolean' || value) {
                this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
            }
            else {
                this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
            }
            this.updateCurrentLabel(value);
        };
        FormCustomSelectComponent.prototype.updateCurrentLabel = function (value) {
            if (this.options && this.options.length) {
                var opt = this.options.find(function (item) { return item.value === value; });
                if (opt) {
                    this.activeElement.nativeElement.innerHTML = opt.content.nativeElement.innerHTML;
                }
            }
        };
        var FormCustomSelectComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormCustomSelectComponent.prototype, "name", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormCustomSelectComponent.prototype, "label", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", core.TemplateRef)
        ], FormCustomSelectComponent.prototype, "selectionTpl", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormCustomSelectComponent.prototype, "autoClose", void 0);
        __decorate([
            core.ContentChildren(FormValidationMessageDirective),
            __metadata("design:type", core.QueryList)
        ], FormCustomSelectComponent.prototype, "messages", void 0);
        __decorate([
            core.ContentChild(MultiSelectOptionDirective, { static: false }),
            __metadata("design:type", MultiSelectOptionDirective)
        ], FormCustomSelectComponent.prototype, "option", void 0);
        __decorate([
            core.ContentChild(MultiSelectTitleDirective, { static: false }),
            __metadata("design:type", MultiSelectTitleDirective)
        ], FormCustomSelectComponent.prototype, "title", void 0);
        __decorate([
            core.ContentChildren(FormSelectOptionComponent),
            __metadata("design:type", core.QueryList)
        ], FormCustomSelectComponent.prototype, "options", void 0);
        __decorate([
            core.ViewChild('activeElement', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FormCustomSelectComponent.prototype, "activeElement", void 0);
        __decorate([
            core.HostListener('mouseenter'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], FormCustomSelectComponent.prototype, "mouseover", null);
        __decorate([
            core.HostListener('mouseleave'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], FormCustomSelectComponent.prototype, "mouseleave", null);
        FormCustomSelectComponent = FormCustomSelectComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-custom-select',
                template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <button [rbDropdown]=\"dropdownContent\"\r\n          [id]=\"id\"\r\n          [autoClose]=\"autoClose\"\r\n          [disabled]=\"disabled !== undefined\"\r\n          (blur)=\"onTouched()\"\r\n          class=\"rb-select-btn input\">\r\n    <ng-container *ngIf=\"!options.length\">\r\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n    </ng-container>\r\n    <span #activeElement></span>\r\n  </button>\r\n\r\n  <label [for]=\"id\" class=\"label rb-select-label\">\r\n    {{!isLabelTemplate() ? label : ''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"select-icon rb-ic rb-ic-down\"></span>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n\r\n<ng-template #dropdownContent let-close=\"close\">\r\n  <ng-container *ngIf=\"options.length\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </ng-container>\r\n  <ng-container *ngTemplateOutlet=\"selectionTpl; context: {select: updateValue, close: close}\"></ng-container>\r\n</ng-template>\r\n",
                providers: [
                    { provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormCustomSelectComponent_1; }), multi: true },
                    { provide: FORM_SELECT_SELECTOR, useFactory: customSelectSelectorFactory }
                ]
            }),
            __param(2, core.Inject(FORM_SELECT_SELECTOR)),
            __metadata("design:paramtypes", [core.Renderer2,
                core.ElementRef,
                rxjs.Subject])
        ], FormCustomSelectComponent);
        return FormCustomSelectComponent;
    }());

    var FormChipsInputComponent = /** @class */ (function () {
        function FormChipsInputComponent(renderer, elementRef) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.chips = [];
            this.chipInput = '';
            this.id = 'input.' + Math.random();
            this.disabled = false;
            this.activeIndex = null;
            this.mouseIn = false;
            this.deletingLast = false;
            this.label = null;
            this.placeholder = '';
            this.chipAdded = new core.EventEmitter();
            this.chipDeleted = new core.EventEmitter();
            this.onChange = emptyFunction;
            this.onTouched = emptyFunction;
        }
        FormChipsInputComponent_1 = FormChipsInputComponent;
        Object.defineProperty(FormChipsInputComponent.prototype, "setFocus", {
            set: function (val) {
                if (this.input && 'nativeElement' in this.input) {
                    this.input.nativeElement.focus();
                }
            },
            enumerable: true,
            configurable: true
        });
        FormChipsInputComponent.prototype.onMouseEnter = function () {
            this.mouseIn = true;
        };
        FormChipsInputComponent.prototype.onMouseLeave = function () {
            this.mouseIn = false;
        };
        FormChipsInputComponent.prototype.onAnyClick = function () {
            if (this.activeIndex !== null && !this.mouseIn) {
                this.activeIndex = null;
            }
        };
        FormChipsInputComponent.prototype.onKeydownHandler = function (event) {
            if (this.activeIndex !== null && !this.deletingLast && event.key === 'Backspace') {
                event.preventDefault();
                this.removeAtIndex(this.activeIndex);
            }
        };
        FormChipsInputComponent.prototype.isLabelTemplate = function () {
            return this.label instanceof core.TemplateRef;
        };
        FormChipsInputComponent.prototype.writeValue = function (value) {
            this.chips = value || [];
            this.checkState();
            this.renderer.setProperty(this.input.nativeElement, 'value', '');
        };
        FormChipsInputComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        FormChipsInputComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        FormChipsInputComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
            this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
        };
        FormChipsInputComponent.prototype.checkState = function () {
            if (this.chips && this.chips.length > 0) {
                this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
            }
            else {
                this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
            }
        };
        FormChipsInputComponent.prototype.submit = function () {
            if (this.chipInput !== '') {
                this.addChip(this.chipInput);
                this.chipInput = '';
            }
        };
        FormChipsInputComponent.prototype.onKeyDown = function (e) {
            if (e.key === 'Backspace' && this.chipInput === '') {
                e.preventDefault();
                if (this.activeIndex !== null) {
                    this.removeLast();
                    this.checkState();
                }
                else {
                    this.deletingLast = true;
                    this.activeIndex = this.chips.length - 1;
                }
            }
        };
        FormChipsInputComponent.prototype.onBlur = function () {
            if (this.chipInput !== '') {
                this.addChip(this.chipInput);
                this.chipInput = '';
            }
            this.onTouched();
        };
        FormChipsInputComponent.prototype.addChip = function (chip) {
            this.chips.push(chip.trim());
            this.onChange(this.chips);
            this.checkState();
            this.chipAdded.next(chip);
        };
        FormChipsInputComponent.prototype.removeChip = function (chip) {
            var index = this.chips.indexOf(chip);
            if (index !== -1) {
                this.chips.splice(index, 1);
                this.onChange(this.chips);
                this.checkState();
                this.chipDeleted.next(chip);
            }
        };
        FormChipsInputComponent.prototype.removeLast = function () {
            var lastChip = this.chips[this.chips.length - 1];
            this.chips.splice(-1, 1);
            this.activeIndex = null;
            this.deletingLast = false;
            this.onChange(this.chips);
            this.chipDeleted.next(lastChip);
        };
        FormChipsInputComponent.prototype.removeAtIndex = function (i) {
            var chipAtIndex = this.chips[i];
            this.chips.splice(i, 1);
            this.activeIndex = null;
            this.onChange(this.chips);
            this.chipDeleted.next(chipAtIndex);
        };
        var FormChipsInputComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormChipsInputComponent.prototype, "label", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormChipsInputComponent.prototype, "placeholder", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], FormChipsInputComponent.prototype, "setFocus", null);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], FormChipsInputComponent.prototype, "chipAdded", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], FormChipsInputComponent.prototype, "chipDeleted", void 0);
        __decorate([
            core.ContentChildren(FormValidationMessageDirective),
            __metadata("design:type", core.QueryList)
        ], FormChipsInputComponent.prototype, "messages", void 0);
        __decorate([
            core.ViewChild('input', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FormChipsInputComponent.prototype, "input", void 0);
        __decorate([
            core.ViewChild('chipcontainer', { static: false }),
            __metadata("design:type", core.ElementRef)
        ], FormChipsInputComponent.prototype, "chipcontainer", void 0);
        __decorate([
            core.HostListener('mouseenter'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], FormChipsInputComponent.prototype, "onMouseEnter", null);
        __decorate([
            core.HostListener('mouseleave'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], FormChipsInputComponent.prototype, "onMouseLeave", null);
        __decorate([
            core.HostListener('window:click'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], FormChipsInputComponent.prototype, "onAnyClick", null);
        __decorate([
            core.HostListener('document:keydown', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [KeyboardEvent]),
            __metadata("design:returntype", void 0)
        ], FormChipsInputComponent.prototype, "onKeydownHandler", null);
        FormChipsInputComponent = FormChipsInputComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-chips-input',
                template: "<div class=\"input-wrapper d-flex\" [class.no-label]=\"!label\">\r\n  <div class=\"chips\">\r\n    <ng-container *ngFor=\"let chip of chips; let i = index\">\r\n      <div (click)=\"activeIndex = i\" [ngClass]=\"{'disabled': disabled, 'selected': activeIndex === i}\"\r\n           class=\"rb-chip mr-1\">\r\n        <span>{{chip}}</span>\r\n        <a href=\"javascript:\" (click)=\"removeChip(chip)\" style=\"margin-left: 4px;\"><span\r\n          class=\"rb-ic rb-ic-close\"></span></a>\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n  <form (ngSubmit)=\"submit()\" class=\"flex-grow-1\">\r\n    <input #input class=\"input chips-input\" [id]=\"id\" (click)=\"activeIndex = null\"\r\n           (keydown)=\"onKeyDown($event)\"\r\n           (blur)=\"onBlur()\"\r\n           [(ngModel)]=\"chipInput\"\r\n           [placeholder]=\"placeholder\"\r\n           [ngStyle]=\"{'margin-left': chips.length == 0 ? 0 : '1rem'}\"\r\n           name=\"chipInput\"\r\n           type=\"text\"\r\n           minlength=\"1\">\r\n    <label class=\"label\" [for]=\"id\">{{!isLabelTemplate() ? label : ''}}</label>\r\n    <span class=\"input-background\"></span>\r\n  </form>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormChipsInputComponent_1; }), multi: true }]
            }),
            __metadata("design:paramtypes", [core.Renderer2, core.ElementRef])
        ], FormChipsInputComponent);
        return FormChipsInputComponent;
    }());

    /* tslint:disable:directive-selector */
    var FormChipsInputPatternValidatorDirective = /** @class */ (function () {
        function FormChipsInputPatternValidatorDirective() {
        }
        FormChipsInputPatternValidatorDirective_1 = FormChipsInputPatternValidatorDirective;
        FormChipsInputPatternValidatorDirective.prototype.validate = function (c) {
            var _this = this;
            var hasInvalid = false;
            if (c.value && this.pattern) {
                c.value.forEach(function (el) {
                    if (!el.match(_this.pattern)) {
                        hasInvalid = true;
                    }
                });
                if (hasInvalid) {
                    return { 'pattern': true };
                }
                else {
                    return null;
                }
            }
            return null;
        };
        var FormChipsInputPatternValidatorDirective_1;
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormChipsInputPatternValidatorDirective.prototype, "pattern", void 0);
        FormChipsInputPatternValidatorDirective = FormChipsInputPatternValidatorDirective_1 = __decorate([
            core.Directive({
                selector: 'rb-form-chips-input[pattern]',
                providers: [{
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return FormChipsInputPatternValidatorDirective_1; }),
                        multi: true
                    }]
            }),
            __metadata("design:paramtypes", [])
        ], FormChipsInputPatternValidatorDirective);
        return FormChipsInputPatternValidatorDirective;
    }());

    var NumberConverterDirective = /** @class */ (function () {
        function NumberConverterDirective() {
        }
        NumberConverterDirective_1 = NumberConverterDirective;
        NumberConverterDirective.prototype.modelToValue = function (model) {
            return model === null || model === undefined ? '' : String(model);
        };
        NumberConverterDirective.prototype.valueToModel = function (value) {
            if (value === 'null' || value === '') {
                return null;
            }
            return parseFloat(value);
        };
        var NumberConverterDirective_1;
        NumberConverterDirective = NumberConverterDirective_1 = __decorate([
            core.Directive({
                selector: '[rbNumberConverter]',
                providers: [{ provide: CUSTOM_VALUE_CONVERTER, useExisting: core.forwardRef(function () { return NumberConverterDirective_1; }) }]
            })
        ], NumberConverterDirective);
        return NumberConverterDirective;
    }());

    var JsonConverterDirective = /** @class */ (function () {
        function JsonConverterDirective() {
        }
        JsonConverterDirective_1 = JsonConverterDirective;
        JsonConverterDirective.prototype.modelToValue = function (model) {
            return JSON.stringify(model);
        };
        JsonConverterDirective.prototype.valueToModel = function (value) {
            try {
                return JSON.parse(value);
            }
            catch (e) {
                console.warn('Could not parse JSON', value, e);
                return null;
            }
        };
        var JsonConverterDirective_1;
        JsonConverterDirective = JsonConverterDirective_1 = __decorate([
            core.Directive({
                selector: '[rbJsonConverter]',
                providers: [{ provide: CUSTOM_VALUE_CONVERTER, useExisting: core.forwardRef(function () { return JsonConverterDirective_1; }) }]
            })
        ], JsonConverterDirective);
        return JsonConverterDirective;
    }());

    var FormInputAutocompleteListComponent = /** @class */ (function () {
        function FormInputAutocompleteListComponent() {
        }
        __decorate([
            core.ViewChild('tpl', { static: true }),
            __metadata("design:type", core.TemplateRef)
        ], FormInputAutocompleteListComponent.prototype, "template", void 0);
        FormInputAutocompleteListComponent = __decorate([
            core.Component({
                selector: 'rb-form-input-autocomplete-list',
                template: "<ng-template #tpl let-list=\"list\" let-active=\"active\" let-focus=\"focus\" let-select=\"select\">\r\n  <a href=\"javascript:\"\r\n     *ngFor=\"let value of list\" (click)=\"select(value)\"\r\n     class=\"rb-dropdown-item\"\r\n     [class.active]=\"active === value\"\r\n     [class.focus]=\"focus === value\">{{value}}</a>\r\n</ng-template>\r\n"
            })
        ], FormInputAutocompleteListComponent);
        return FormInputAutocompleteListComponent;
    }());

    var FormInputAutocompleteDirective = /** @class */ (function (_super) {
        __extends(FormInputAutocompleteDirective, _super);
        function FormInputAutocompleteDirective(_factoryResolver, injector, viewContainerRef, control, inputs) {
            var _this = _super.call(this, _factoryResolver, viewContainerRef) || this;
            _this._factoryResolver = _factoryResolver;
            _this.injector = injector;
            _this.control = control;
            /**
             * Should the dropdown open on initial click without any value change
             */
            _this.rbInitialOpen = false;
            _this.rbDebounceTime = 500;
            _this.destroy = new rxjs.Subject();
            _this.loading = false;
            _this.error = null;
            _this.lastResult = null;
            _this.focus = null;
            _this.input = null;
            _this.noSearchFor = null;
            if (inputs) {
                _this.input = inputs[0];
            }
            _this.openOnClick = false;
            return _this;
        }
        FormInputAutocompleteDirective.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            if (this.rbInitialOpen) {
                this.openOnClick = true;
            }
            if (!this.rbAutocompleteList) {
                var factory = this._factoryResolver.resolveComponentFactory(FormInputAutocompleteListComponent);
                var component = factory.create(this.injector);
                this.instance = component.instance;
                this.rbAutocompleteList = component.instance.template;
            }
            this.template = this.rbAutocompleteList;
            this.updateLoading(false, null);
            var changes = 0;
            var resolvedValue = null;
            this.control.valueChanges.pipe(operators.debounceTime(this.rbDebounceTime), operators.switchMap(function (value) {
                changes++;
                if (changes === 1 && !_this.rbInitialOpen || resolvedValue === value || _this.noSearchFor === value) {
                    return rxjs.NEVER;
                }
                resolvedValue = value;
                _this.updateLoading(true, null);
                var result = _this.rbFormInputAutocomplete(value);
                if (result) {
                    return result.pipe(operators.tap(function () { return _this.updateLoading(false, null); }, function (err) { return _this.updateLoading(false, err); }, function () { return _this.updateLoading(false, null); }), operators.catchError(function (err) { return rxjs.of(null); }), operators.takeUntil(_this.control.valueChanges.pipe(operators.skip(1))));
                }
                else {
                    _this.updateLoading(false, null);
                    return rxjs.of(null);
                }
            }), operators.takeUntil(this.destroy)).subscribe(function (results) {
                _this.openOnClick = true;
                _this.lastResult = results;
                if (results !== null && !results.includes(resolvedValue)) {
                    _this.focus = null;
                }
                _this.updateContext(_this.control.value);
                if (results !== null && (!_this.componentRef || !_this.componentRef.instance.shown) && changes > 1) {
                    _this.openDropdown();
                }
                if (results === null) {
                    _this.closeDropdown();
                }
            });
        };
        FormInputAutocompleteDirective.prototype.ngAfterViewInit = function () {
            if (this.input && this.input.input) {
                this.input.input.nativeElement.autocomplete = 'off';
            }
        };
        FormInputAutocompleteDirective.prototype.updateLoading = function (loading, error) {
            this.loading = loading;
            this.error = error;
            if (this.error) {
                var errors = this.control.errors || {};
                errors['autocomplete'] = this.error;
                this.control.control.setErrors(errors);
            }
            if (this.input && this.loading) {
                this.input.updateIcon('rb-ic rb-ic-spin rb-ic-refresh');
            }
            if (this.input && !this.loading) {
                this.input.updateIcon(this.rbInitialOpen ? 'select-icon rb-ic rb-ic-down' : null);
            }
            if (this.input && this.error) {
                this.input.updateIcon('rb-ic rb-ic-alert-warning u-TextColor--red');
            }
        };
        FormInputAutocompleteDirective.prototype.select = function (value) {
            this.noSearchFor = value;
            this.control.control.setValue(value);
            this.focus = value;
            this.closeDropdown();
            this.updateContext(value);
        };
        FormInputAutocompleteDirective.prototype.onKeyUp = function (e) {
            if (e.key === 'ArrowDown' || e.key === 'Down') {
                e.preventDefault();
                this.moveFocus(1);
            }
            if (e.key === 'ArrowUp' || e.key === 'Up') {
                e.preventDefault();
                this.moveFocus(-1);
            }
            if (e.key === 'Enter' && this.componentRef && this.componentRef.instance.shown) {
                e.preventDefault();
                this.select(this.focus);
            }
        };
        FormInputAutocompleteDirective.prototype.moveFocus = function (by) {
            var list = this.lastResult || [];
            if (!list.length) {
                this.focus = null;
                this.updateContext(this.control.value);
                return;
            }
            var focusIndex = list.indexOf(this.focus);
            if (focusIndex === -1) {
                focusIndex = 0;
            }
            else {
                focusIndex += by;
                if (focusIndex === -1) {
                    focusIndex = list.length - 1;
                }
                if (focusIndex === list.length) {
                    focusIndex = 0;
                }
            }
            this.focus = list[focusIndex];
            this.updateContext(this.control.value);
        };
        FormInputAutocompleteDirective.prototype.updateContext = function (value) {
            this.context = {
                list: this.lastResult,
                active: value,
                focus: this.focus,
                select: this.select.bind(this)
            };
        };
        FormInputAutocompleteDirective.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this.destroy.complete();
            this.input = null;
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Function)
        ], FormInputAutocompleteDirective.prototype, "rbFormInputAutocomplete", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", core.TemplateRef)
        ], FormInputAutocompleteDirective.prototype, "rbAutocompleteList", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormInputAutocompleteDirective.prototype, "rbInitialOpen", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormInputAutocompleteDirective.prototype, "rbDebounceTime", void 0);
        __decorate([
            core.HostListener('keyup', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [KeyboardEvent]),
            __metadata("design:returntype", void 0)
        ], FormInputAutocompleteDirective.prototype, "onKeyUp", null);
        FormInputAutocompleteDirective = __decorate([
            core.Directive({
                selector: '[rbFormInputAutocomplete]',
            }),
            __param(3, core.Self()),
            __param(4, core.Self()), __param(4, core.Optional()), __param(4, core.Inject(forms.NG_VALUE_ACCESSOR)),
            __metadata("design:paramtypes", [core.ComponentFactoryResolver,
                core.Injector,
                core.ViewContainerRef,
                forms.NgControl, Array])
        ], FormInputAutocompleteDirective);
        return FormInputAutocompleteDirective;
    }(DropdownDirective));

    var FormRadioComponent = /** @class */ (function () {
        function FormRadioComponent(renderer) {
            this.renderer = renderer;
            this.id = 'radio.' + Math.random();
            this.label = null;
            this.onChange = emptyFunction;
            this.onTouched = emptyFunction;
        }
        FormRadioComponent_1 = FormRadioComponent;
        FormRadioComponent.prototype.updateValue = function (isChecked) {
            if (isChecked) {
                this.onChange(this.value);
            }
        };
        FormRadioComponent.prototype.isLabelTemplate = function () {
            return this.label instanceof core.TemplateRef;
        };
        FormRadioComponent.prototype.writeValue = function (value) {
            if (value === this.value) {
                this.renderer.setProperty(this.input.nativeElement, 'checked', true);
            }
        };
        FormRadioComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        FormRadioComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        FormRadioComponent.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
        };
        FormRadioComponent.prototype.isReadonly = function () {
            return !!(this.readonly === '' || this.readonly);
        };
        var FormRadioComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], FormRadioComponent.prototype, "required", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean)
        ], FormRadioComponent.prototype, "noValidation", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormRadioComponent.prototype, "name", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormRadioComponent.prototype, "label", void 0);
        __decorate([
            core.ViewChild('input', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FormRadioComponent.prototype, "input", void 0);
        __decorate([
            core.ContentChildren(FormValidationMessageDirective),
            __metadata("design:type", core.QueryList)
        ], FormRadioComponent.prototype, "messages", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormRadioComponent.prototype, "value", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormRadioComponent.prototype, "readonly", void 0);
        FormRadioComponent = FormRadioComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-radio',
                template: "<div class=\"input-wrapper\">\r\n  <input type=\"radio\" [id]=\"id + 'input'\" [name]=\"name\" [readonly]=\"readonly\"\r\n         (click)=\"updateValue($event.target.checked)\" #input>\r\n  <label [for]=\"id + 'input'\">  {{!isLabelTemplate() ? label : ''}}</label>\r\n</div>\r\n\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormRadioComponent_1; }), multi: true }]
            }),
            __metadata("design:paramtypes", [core.Renderer2])
        ], FormRadioComponent);
        return FormRadioComponent;
    }());

    var FormNumberValidatorDirective = /** @class */ (function () {
        function FormNumberValidatorDirective() {
        }
        FormNumberValidatorDirective_1 = FormNumberValidatorDirective;
        FormNumberValidatorDirective.prototype.validate = function (control) {
            if (control.value === '') {
                return null;
            }
            var value = typeof (control.value) === 'number' ? control.value : parseFloat(control.value);
            var errors = {};
            if (this.rbMin !== undefined && value < this.rbMin) {
                errors.rbMin = this.rbMin;
            }
            if (this.rbMax !== undefined && value > this.rbMax) {
                errors.rbMax = this.rbMax;
            }
            return Object.keys(errors).length ? errors : null;
        };
        var FormNumberValidatorDirective_1;
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], FormNumberValidatorDirective.prototype, "rbMin", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], FormNumberValidatorDirective.prototype, "rbMax", void 0);
        FormNumberValidatorDirective = FormNumberValidatorDirective_1 = __decorate([
            core.Directive({
                selector: '[rbMin],[rbMax]',
                providers: [{
                        provide: forms.NG_VALIDATORS,
                        useExisting: core.forwardRef(function () { return FormNumberValidatorDirective_1; }),
                        multi: true
                    }]
            }),
            __metadata("design:paramtypes", [])
        ], FormNumberValidatorDirective);
        return FormNumberValidatorDirective;
    }());

    var FormFieldsModule = /** @class */ (function () {
        function FormFieldsModule() {
        }
        FormFieldsModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    IconModule,
                    DropdownModule
                ],
                declarations: [
                    FormInputComponent,
                    FormValidationMessageDirective,
                    FormCheckboxComponent,
                    FormRadioComponent,
                    FormSelectComponent,
                    FormTextareaComponent,
                    FormMultiSelectComponent,
                    FormMultiCheckboxComponent,
                    MultiSelectTitleDirective,
                    MultiSelectOptionDirective,
                    FormFileComponent,
                    FormErrorsComponent,
                    FormCheckboxRequiredValidatorDirective,
                    FormFileValidatorDirective,
                    FormCustomSelectComponent,
                    FormChipsInputComponent,
                    FormChipsInputPatternValidatorDirective,
                    NumberConverterDirective,
                    JsonConverterDirective,
                    FormSelectOptionComponent,
                    FormInputAutocompleteDirective,
                    FormInputAutocompleteListComponent,
                    FormNumberValidatorDirective
                ],
                entryComponents: [
                    FormInputAutocompleteListComponent
                ],
                exports: [
                    FormInputComponent,
                    FormValidationMessageDirective,
                    FormRadioComponent,
                    FormCheckboxComponent,
                    FormSelectComponent,
                    FormTextareaComponent,
                    FormMultiSelectComponent,
                    FormMultiCheckboxComponent,
                    MultiSelectTitleDirective,
                    MultiSelectOptionDirective,
                    FormFileComponent,
                    FormCheckboxRequiredValidatorDirective,
                    FormFileValidatorDirective,
                    FormCustomSelectComponent,
                    FormChipsInputComponent,
                    FormChipsInputPatternValidatorDirective,
                    NumberConverterDirective,
                    JsonConverterDirective,
                    FormSelectOptionComponent,
                    FormErrorsComponent,
                    FormInputAutocompleteDirective,
                    FormNumberValidatorDirective
                ]
            })
        ], FormFieldsModule);
        return FormFieldsModule;
    }());

    var ModalComponent = /** @class */ (function () {
        function ModalComponent(elementRef, viewContainerRef) {
            this.elementRef = elementRef;
            this.viewContainerRef = viewContainerRef;
            this.options = {
                position: 'middle',
                showClose: true,
                backdropClose: true
            };
        }
        ModalComponent.prototype.ngOnInit = function () {
            if (this.options.maxWidth) {
                this.elementRef.nativeElement.style.maxWidth = this.options.maxWidth;
            }
            if (this.options.position) {
                this.elementRef.nativeElement.classList.add(this.options.position);
            }
            if (this.contentComponentRef && this.box) {
                this.viewContainerRef.insert(this.contentComponentRef.hostView);
            }
        };
        ModalComponent.prototype.ngAfterViewInit = function () {
            if (this.contentComponentRef && this.box) {
                this.box.nativeElement.appendChild(this.contentComponentRef.location.nativeElement);
            }
        };
        __decorate([
            core.ViewChild('box', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], ModalComponent.prototype, "box", void 0);
        ModalComponent = __decorate([
            core.Component({
                selector: 'rb-modal',
                template: "<div class=\"modal-box\" role=\"dialog\" #box>\n  <button class=\"close-btn rb-btn rb-passive-link\" (click)=\"close()\" *ngIf=\"options.showClose\"><rb-icon name=\"close\"></rb-icon></button>\n\n  <ng-container *ngIf=\"contentTpl\">\n    <ng-container *ngTemplateOutlet=\"contentTpl; context: {close: close}\"></ng-container>\n  </ng-container>\n  <ng-container *ngIf=\"contentComponent\">\n    <ng-container *ngComponentOutlet=\"contentComponent\"></ng-container>\n  </ng-container>\n  {{contentText ? contentText : ''}}\n</div>\n"
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.ViewContainerRef])
        ], ModalComponent);
        return ModalComponent;
    }());

    var ModalService = /** @class */ (function () {
        function ModalService(factoryResolver, injector, appRef) {
            var _this = this;
            this.factoryResolver = factoryResolver;
            this.injector = injector;
            this.appRef = appRef;
            this.openComponents = [];
            var el = document.querySelector('.rb-modal-backdrop');
            if (el) {
                this.backdrop = el;
            }
            else {
                this.backdrop = document.body.appendChild(document.createElement('div'));
                this.backdrop.className = 'rb-modal-backdrop';
                var isDown_1 = false;
                this.backdrop.addEventListener('mousedown', function (e) {
                    if (e.target === _this.backdrop) {
                        isDown_1 = true;
                    }
                });
                this.backdrop.addEventListener('mouseup', function (e) {
                    if (isDown_1 && e.target === _this.backdrop) {
                        _this.nonButtonClose();
                    }
                    isDown_1 = false;
                });
            }
            this.componentFactory = this.factoryResolver.resolveComponentFactory(ModalComponent);
        }
        Object.defineProperty(ModalService.prototype, "appRoot", {
            get: function () {
                return this.appRef.components[0].location.nativeElement;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Opens a component in a modal. Creates the component instance.
         * Provide an injector in case the ModalService is not instantiated with the Injector that knows the Component.
         */
        ModalService.prototype.openComponent = function (component, options, injector) {
            var factoryResolver = (injector || this.injector).get(core.ComponentFactoryResolver);
            var factory = factoryResolver.resolveComponentFactory(component);
            var componentRef = factory.create(injector || this.injector);
            var result = this.open(componentRef, options);
            return {
                result: result,
                instance: componentRef.instance
            };
        };
        ModalService.prototype.open = function (content, options) {
            var _this = this;
            return new Promise(function (resolve) {
                if (_this.openComponents.length && options && options.stacked) {
                    _this.lastOpenModalElement().classList.add('hidden');
                }
                else {
                    _this.close();
                }
                if (!_this.openComponents.length) {
                    document.body.classList.add('rb-modal-open');
                    if (_this.appRef.components.length) {
                        _this.appRoot.classList.add('rb-modal-frost');
                    }
                    _this.ensureListeners();
                }
                _this.backdrop.classList.remove('large-fix');
                var componentRef = _this.componentFactory.create(_this.injector);
                if (content instanceof core.TemplateRef) {
                    componentRef.instance.contentTpl = content;
                }
                else if (typeof (content) === 'string') {
                    componentRef.instance.contentText = content;
                }
                else if (content instanceof core.ComponentRef) {
                    componentRef.instance.contentComponentRef = content;
                }
                else if (typeof (content) === 'function') {
                    componentRef.instance.contentComponent = content;
                }
                componentRef.instance.close = _this.close.bind(_this);
                if (options) {
                    Object.assign(componentRef.instance.options, options);
                }
                _this.appRef.attachView(componentRef.hostView);
                _this.backdrop.appendChild(componentRef.location.nativeElement);
                componentRef.location.nativeElement.focus();
                // Fix for IE
                setTimeout(function () {
                    if (componentRef.location.nativeElement.offsetTop < 0) {
                        _this.backdrop.classList.add('large-fix');
                    }
                }, 10);
                _this.openComponents.push({
                    componentRef: componentRef,
                    onClose: resolve
                });
            });
        };
        ModalService.prototype.close = function (reason) {
            var openModal = this.openComponents.pop();
            if (!openModal) {
                return;
            }
            this.appRef.detachView(openModal.componentRef.hostView);
            openModal.componentRef.destroy();
            if (!this.openComponents.length) {
                document.body.classList.remove('rb-modal-open');
                if (this.appRef.components.length) {
                    this.appRoot.classList.remove('rb-modal-frost');
                }
                this.removeListeners();
            }
            else {
                this.lastOpenModalElement().classList.remove('hidden');
            }
            if (openModal.onClose) {
                openModal.onClose(reason);
            }
        };
        ModalService.prototype.nonButtonClose = function () {
            var instance = this.lastOpenModalInstance();
            if (instance && instance.options.backdropClose || !instance) {
                this.close();
            }
        };
        ModalService.prototype.ensureListeners = function () {
            var _this = this;
            if (!this.keyListener) {
                this.keyListener = function (e) {
                    // ESC pressed
                    if (e.key === 'Escape') {
                        _this.nonButtonClose();
                    }
                };
            }
            document.addEventListener('keyup', this.keyListener, true);
            if (!this.focusListener) {
                this.focusListener = function (e) {
                    // Focus changes
                    if (_this.appRoot.contains(document.activeElement)) {
                        var firstFocusable = _this.backdrop.querySelector('a,button');
                        firstFocusable.focus();
                    }
                };
            }
            document.addEventListener('focus', this.focusListener, true);
        };
        ModalService.prototype.removeListeners = function () {
            if (this.keyListener) {
                document.removeEventListener('keyup', this.keyListener, true);
            }
            if (this.focusListener) {
                document.removeEventListener('focus', this.focusListener, true);
            }
        };
        ModalService.prototype.lastOpenModal = function () {
            return this.openComponents[this.openComponents.length - 1];
        };
        ModalService.prototype.lastOpenModalElement = function () {
            var modal = this.lastOpenModal();
            if (modal) {
                return modal.componentRef.location.nativeElement;
            }
        };
        ModalService.prototype.lastOpenModalInstance = function () {
            var modal = this.lastOpenModal();
            if (modal) {
                return modal.componentRef.instance;
            }
        };
        ModalService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [core.ComponentFactoryResolver,
                core.Injector,
                core.ApplicationRef])
        ], ModalService);
        return ModalService;
    }());

    var ModalDirective = /** @class */ (function () {
        function ModalDirective(modalService, factoryResolver, injector, appRef) {
            this.modalService = modalService;
            this.showClose = true;
            this.position = 'middle';
            this.backdropClose = true;
            this.stacked = false;
            if (!this.modalService) {
                this.modalService = new ModalService(factoryResolver, injector, appRef);
            }
        }
        ModalDirective.prototype.click = function (event) {
            event.preventDefault();
            this.modalService.open(this.content, {
                showClose: this.showClose,
                position: this.position,
                maxWidth: this.maxWidth,
                backdropClose: this.backdropClose,
                stacked: this.stacked
            });
        };
        Object.defineProperty(ModalDirective.prototype, "rbModal", {
            set: function (content) {
                this.content = content;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], ModalDirective.prototype, "showClose", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], ModalDirective.prototype, "position", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], ModalDirective.prototype, "maxWidth", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], ModalDirective.prototype, "backdropClose", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], ModalDirective.prototype, "stacked", void 0);
        __decorate([
            core.HostListener('click', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [MouseEvent]),
            __metadata("design:returntype", void 0)
        ], ModalDirective.prototype, "click", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], ModalDirective.prototype, "rbModal", null);
        ModalDirective = __decorate([
            core.Directive({
                selector: '[rbModal]'
            }),
            __param(0, core.Optional()),
            __metadata("design:paramtypes", [ModalService,
                core.ComponentFactoryResolver,
                core.Injector,
                core.ApplicationRef])
        ], ModalDirective);
        return ModalDirective;
    }());

    var DialogComponent = /** @class */ (function () {
        function DialogComponent(modalService) {
            this.modalService = modalService;
            this.showButtons = true;
        }
        DialogComponent.prototype.ngOnInit = function () {
        };
        DialogComponent.prototype.close = function (reason) {
            this.modalService.close(reason);
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], DialogComponent.prototype, "dialogTitle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], DialogComponent.prototype, "okBtnLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], DialogComponent.prototype, "cancelBtnLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DialogComponent.prototype, "showButtons", void 0);
        DialogComponent = __decorate([
            core.Component({
                selector: 'rb-dialog',
                template: "<h2 class=\"dialog-title\">{{dialogTitle}}</h2>\n<ng-content></ng-content>\n<div class=\"dialog-buttons\" *ngIf=\"showButtons\">\n  <button class=\"rb-btn\" (click)=\"close()\">{{cancelBtnLabel ? cancelBtnLabel : 'Cancel'}}</button>&nbsp;\n  <button class=\"rb-btn rb-primary\" (click)=\"close(true)\">{{okBtnLabel ? okBtnLabel : 'OK'}}</button>\n</div>\n"
            }),
            __metadata("design:paramtypes", [ModalService])
        ], DialogComponent);
        return DialogComponent;
    }());

    var AlertComponent = /** @class */ (function () {
        function AlertComponent(modalService) {
            this.modalService = modalService;
            this.type = 'success';
        }
        AlertComponent.prototype.ngOnInit = function () {
        };
        AlertComponent.prototype.close = function (reason) {
            this.modalService.close(reason);
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AlertComponent.prototype, "alertTitle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AlertComponent.prototype, "okBtnLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AlertComponent.prototype, "cancelBtnLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], AlertComponent.prototype, "type", void 0);
        AlertComponent = __decorate([
            core.Component({
                selector: 'rb-alert',
                template: "<rb-icon [name]=\"type + '-filled'\"></rb-icon>\n<h2 class=\"dialog-title\">{{alertTitle}}</h2>\n<div class=\"dialog-text\">\n  <ng-content></ng-content>\n</div>\n<div class=\"dialog-buttons\">\n  <button class=\"rb-btn\" (click)=\"close(true)\" *ngIf=\"okBtnLabel\">{{okBtnLabel}}</button>\n  <button class=\"rb-btn\" (click)=\"close()\" *ngIf=\"cancelBtnLabel\">{{cancelBtnLabel}}</button>\n</div>\n"
            }),
            __metadata("design:paramtypes", [ModalService])
        ], AlertComponent);
        return AlertComponent;
    }());

    var ModalModule = /** @class */ (function () {
        function ModalModule() {
        }
        ModalModule_1 = ModalModule;
        ModalModule.forRoot = function () {
            return {
                ngModule: ModalModule_1,
                providers: [
                    ModalService
                ]
            };
        };
        var ModalModule_1;
        ModalModule = ModalModule_1 = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    IconModule
                ],
                declarations: [
                    ModalComponent,
                    ModalDirective,
                    DialogComponent,
                    AlertComponent
                ],
                exports: [
                    ModalComponent,
                    ModalDirective,
                    DialogComponent,
                    AlertComponent
                ],
                entryComponents: [
                    ModalComponent
                ]
            })
        ], ModalModule);
        return ModalModule;
    }());

    var TabPanelTitleDirective = /** @class */ (function () {
        function TabPanelTitleDirective(templateRef) {
            this.templateRef = templateRef;
        }
        TabPanelTitleDirective = __decorate([
            core.Directive({
                selector: '[rbTabPanelTitle]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], TabPanelTitleDirective);
        return TabPanelTitleDirective;
    }());

    var tabItemNum = 0;
    var TabPanelItemDirective = /** @class */ (function () {
        function TabPanelItemDirective(templateRef) {
            this.templateRef = templateRef;
            this.rbTabPanelItemPosition = 'left';
            this.rbTabPanelItemType = 'tab';
            this.rbTabPanelItemAutoClose = true; // dropdown option
            this.routerLink = null;
            this.active = false;
            this.shown = 0;
            this.titleTpl = null;
            this.titleStr = null;
            this.id = 'tabItem' + (tabItemNum++);
        }
        Object.defineProperty(TabPanelItemDirective.prototype, "titleItem", {
            set: function (title) {
                if (title && !this.titleTpl) {
                    this.titleTpl = title.templateRef;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPanelItemDirective.prototype, "rbTabPanelItemDetails", {
            set: function (details) {
                this.details = details;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPanelItemDirective.prototype, "rbTabPanelItemId", {
            set: function (id) {
                this.id = id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPanelItemDirective.prototype, "rbTabPanelItem", {
            set: function (title) {
                if (title instanceof core.TemplateRef) {
                    this.titleTpl = title;
                }
                else {
                    this.titleStr = title;
                }
            },
            enumerable: true,
            configurable: true
        });
        TabPanelItemDirective.prototype.show = function () {
            this.active = true;
            this.shown++;
        };
        TabPanelItemDirective.prototype.hide = function () {
            this.active = false;
        };
        Object.defineProperty(TabPanelItemDirective.prototype, "position", {
            get: function () {
                return this.rbTabPanelItemPosition;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPanelItemDirective.prototype, "type", {
            get: function () {
                return this.rbTabPanelItemType;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPanelItemDirective.prototype, "autoClose", {
            get: function () {
                return this.rbTabPanelItemAutoClose;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], TabPanelItemDirective.prototype, "rbTabPanelItemPosition", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], TabPanelItemDirective.prototype, "rbTabPanelItemType", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], TabPanelItemDirective.prototype, "rbTabPanelItemAutoClose", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], TabPanelItemDirective.prototype, "rbTabPanelItemQueryParams", void 0);
        __decorate([
            core.ContentChild(TabPanelTitleDirective, { static: false }),
            __metadata("design:type", TabPanelTitleDirective),
            __metadata("design:paramtypes", [TabPanelTitleDirective])
        ], TabPanelItemDirective.prototype, "titleItem", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], TabPanelItemDirective.prototype, "rbTabPanelItemDetails", null);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], TabPanelItemDirective.prototype, "rbTabPanelItemId", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], TabPanelItemDirective.prototype, "rbTabPanelItem", null);
        TabPanelItemDirective = __decorate([
            core.Directive({
                selector: '[rbTabPanelItem]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], TabPanelItemDirective);
        return TabPanelItemDirective;
    }());

    var TAB_PANEL_RESOLVER = new core.InjectionToken('TabPanelResolver');
    /**
     * A very powerful tab panel component.
     * It can handle dynamic tabs, the tab bar can accept all kind of types. See: TabPanelItemType
     * When you provide `outletName`, you should provide your router config with such an entry to enable the outlet routing:
     * children: [{path: ':id', outlet: 'yourOutletName', component: TabPanelComponent}]
     */
    var TabPanelComponent = /** @class */ (function () {
        function TabPanelComponent(renderer, element, tabPanelResolver) {
            this.renderer = renderer;
            this.element = element;
            this.tabPanelResolver = tabPanelResolver;
            this.tabChanged = new core.EventEmitter();
            this.tabItems = [];
            /**
             * Whether tabs that were opened once, should be kept in the DOM
             * when switching away from them. Or should they be removed from
             * DOM when switched to another tab?
             */
            this.destroyTabs = false;
            this.renderHiddenTabs = false;
            this.lastHeight = 0;
        }
        Object.defineProperty(TabPanelComponent.prototype, "tabItemsQuery", {
            set: function (tabItems) {
                var _this = this;
                this.tabItems = tabItems.toArray();
                if (this.outletName) {
                    this.tabItems.forEach(function (tabItem) {
                        var link = { outlets: {} };
                        link.outlets[_this.outletName] = [tabItem.id];
                        tabItem.routerLink = [link];
                    });
                }
                if (this.tabItems.length && this.tabItems.every(function (tabItem) { return !tabItem.active; })) {
                    if (this.tab) {
                        this.showTab(this.tab);
                    }
                    else {
                        this.showFirstTab();
                    }
                }
                this.tabItemsLeft = this.tabItems.filter(function (tabItem) { return tabItem.position === 'left'; });
                this.tabItemsCenter = this.tabItems.filter(function (tabItem) { return tabItem.position === 'center'; });
                this.tabItemsRight = this.tabItems.filter(function (tabItem) { return tabItem.position === 'right'; });
            },
            enumerable: true,
            configurable: true
        });
        TabPanelComponent.prototype.ngAfterViewInit = function () {
            this.onResize();
        };
        TabPanelComponent.prototype.ngOnChanges = function (changes) {
            if (changes.tab && changes.tab.currentValue && !changes.tab.firstChange) {
                var found = this.tabItems.find(function (tabItem) { return tabItem.id === changes.tab.currentValue; });
                if (found && !found.active) {
                    this.showTab(changes.tab.currentValue);
                }
            }
        };
        TabPanelComponent.prototype.ngDoCheck = function () {
            if (this.element && this.element.nativeElement.classList.contains('full-width')) {
                this.onResize();
            }
        };
        TabPanelComponent.prototype.showFirstTab = function () {
            var firstItem = this.tabItems.find(function (tabItem) { return tabItem.type === 'tab'; });
            if (firstItem) {
                this.showTab(firstItem.id);
            }
        };
        /**
         * Can be used to show a certain tab.
         */
        TabPanelComponent.prototype.showTab = function (id) {
            var _this = this;
            var found = this.tabItems.find(function (tabItem) { return tabItem.id === id; });
            if (!found) {
                // wait a tick
                setTimeout(function () {
                    _this.deactivateAndShowTab(id);
                });
            }
            else {
                this.deactivateAndShowTab(id);
            }
        };
        TabPanelComponent.prototype.deactivateAndShowTab = function (id) {
            var _this = this;
            this.tabItems.forEach(function (tabItem) {
                if (tabItem.active && tabItem.id !== id) {
                    tabItem.hide();
                }
                else if (tabItem.id === id) {
                    tabItem.show();
                    _this.tabChanged.next(id);
                }
            });
        };
        TabPanelComponent.prototype.onResize = function () {
            if (this.panelPlaceholder && this.tabPanel) {
                var tabPanelHeight = this.tabPanel.nativeElement.offsetHeight;
                if (Math.abs(this.lastHeight - tabPanelHeight) > 2) {
                    this.lastHeight = tabPanelHeight;
                    this.renderer.setStyle(this.panelPlaceholder.nativeElement, 'height', tabPanelHeight + 'px');
                }
            }
        };
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], TabPanelComponent.prototype, "tabChanged", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], TabPanelComponent.prototype, "tab", void 0);
        __decorate([
            core.ViewChild('panelPlaceholder', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], TabPanelComponent.prototype, "panelPlaceholder", void 0);
        __decorate([
            core.ViewChild('tabPanel', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], TabPanelComponent.prototype, "tabPanel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], TabPanelComponent.prototype, "destroyTabs", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], TabPanelComponent.prototype, "renderHiddenTabs", void 0);
        __decorate([
            core.ContentChildren(TabPanelItemDirective),
            __metadata("design:type", core.QueryList),
            __metadata("design:paramtypes", [core.QueryList])
        ], TabPanelComponent.prototype, "tabItemsQuery", null);
        __decorate([
            core.HostListener('window:resize'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], TabPanelComponent.prototype, "onResize", null);
        TabPanelComponent = __decorate([
            core.Component({
                selector: 'rb-tab-panel',
                template: "<div class=\"tab-panel-container\">\r\n  <div class=\"tab-panel limit\" #tabPanel>\r\n    <rb-navigation type=\"tab\" class=\"tab-panel-left\">\r\n      <ng-container *ngFor=\"let tabItem of tabItemsLeft; template: tabTpl\"></ng-container>\r\n    </rb-navigation>\r\n    <rb-navigation type=\"tab\" class=\"tab-panel-center\">\r\n      <ng-container *ngFor=\"let tabItem of tabItemsCenter; template: tabTpl\"></ng-container>\r\n    </rb-navigation>\r\n    <rb-navigation type=\"tab\" class=\"tab-panel-right\">\r\n      <ng-container *ngFor=\"let tabItem of tabItemsRight; template: tabTpl\"></ng-container>\r\n    </rb-navigation>\r\n  </div>\r\n</div>\r\n<div class=\"tab-panel-placeholder\" #panelPlaceholder></div>\r\n\r\n<ng-container *ngFor=\"let tabItem of tabItems\">\r\n  <div class=\"tab-content\" *ngIf=\"destroyTabs && tabItem.active || !destroyTabs && tabItem.shown || renderHiddenTabs\"\r\n       [hidden]=\"!tabItem.active\">\r\n    <ng-container *ngTemplateOutlet=\"tabItem.templateRef; context: tabItem\"></ng-container>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #tabTpl let-tabItem>\r\n  <ng-container *ngIf=\"tabItem.type === 'dropdown'\">\r\n    <a href=\"javascript:\" class=\"rb-dropdown-toggle\"\r\n       [class.active]=\"tabItem.active\"\r\n       [rbDropdown]=\"tabItem.templateRef\"\r\n       [position]=\"tabItem.position\"\r\n       [autoClose]=\"tabItem.autoClose\">\r\n      <ng-container *ngIf=\"tabItem.titleStr\">\r\n        {{tabItem.titleStr}}\r\n      </ng-container>\r\n      <ng-container *ngIf=\"tabItem.titleTpl\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n      </ng-container>\r\n    </a>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'content'\">\r\n    <ng-container *ngIf=\"tabItem.titleStr\">\r\n      {{tabItem.titleStr}}\r\n    </ng-container>\r\n    <ng-container *ngIf=\"tabItem.titleTpl\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n    </ng-container>\r\n    <ng-container\r\n      *ngTemplateOutlet=\"tabItem.templateRef; context: tabItem\"></ng-container>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'custom'\">\r\n    <ng-container *ngIf=\"tabItem.titleStr\">\r\n      {{tabItem.titleStr}}\r\n    </ng-container>\r\n    <ng-container *ngIf=\"tabItem.titleTpl\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'tab'\">\r\n    <a href=\"javascript:\" [class.active]=\"tabItem.active\" (click)=\"showTab(tabItem.id)\">\r\n      <ng-container *ngIf=\"tabItem.titleStr\">\r\n        {{tabItem.titleStr}}\r\n      </ng-container>\r\n      <ng-container *ngIf=\"tabItem.titleTpl\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n      </ng-container>\r\n    </a>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'text'\">\r\n    <span class=\"text-item\">\r\n      <ng-container *ngIf=\"tabItem.titleStr\">\r\n        {{tabItem.titleStr}}\r\n      </ng-container>\r\n      <ng-container *ngIf=\"tabItem.titleTpl\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n      </ng-container>\r\n    </span>\r\n  </ng-container>\r\n</ng-template>\r\n"
            }),
            __param(2, core.Optional()), __param(2, core.Inject(TAB_PANEL_RESOLVER)),
            __metadata("design:paramtypes", [core.Renderer2,
                core.ElementRef, Object])
        ], TabPanelComponent);
        return TabPanelComponent;
    }());

    /**
     * Mocks the Router Outlet
     */
    var TabPanelRouterOutletDirective = /** @class */ (function (_super) {
        __extends(TabPanelRouterOutletDirective, _super);
        function TabPanelRouterOutletDirective(_parentContexts, name) {
            var _this = _super.call(this, _parentContexts, null, null, name, null) || this;
            _this._parentContexts = _parentContexts;
            _this.__activatedRoute = null;
            _this._name = name;
            return _this;
        }
        TabPanelRouterOutletDirective.prototype.ngOnInit = function () {
            if (!this.__activated) {
                // If the outlet was not instantiated at the time the route got activated we need to populate
                // the outlet when it is initialized (ie inside a NgIf)
                var context = this._parentContexts.getContext(this._name);
                if (context && context.route) {
                    if (context.attachRef) {
                        // `attachRef` is populated when there is an existing component to mount
                        this.attach(context.attachRef, context.route);
                    }
                    else {
                        // otherwise the component defined in the configuration is created
                        this.activateWith(context.route, context.resolver || null);
                    }
                }
            }
        };
        Object.defineProperty(TabPanelRouterOutletDirective.prototype, "isActivated", {
            get: function () {
                return this.__activated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPanelRouterOutletDirective.prototype, "component", {
            get: function () {
                if (!this.__activated) {
                    throw new Error('Outlet is not activated');
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPanelRouterOutletDirective.prototype, "activatedRoute", {
            get: function () {
                if (!this.__activated) {
                    throw new Error('Outlet is not activated');
                }
                return this.__activatedRoute;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TabPanelRouterOutletDirective.prototype, "activatedRouteData", {
            get: function () {
                if (this.__activatedRoute) {
                    return this.__activatedRoute.snapshot.data;
                }
                return {};
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Called when the `RouteReuseStrategy` instructs to detach the subtree
         */
        TabPanelRouterOutletDirective.prototype.detach = function () {
            if (!this.__activated) {
                throw new Error('Outlet is not activated');
            }
            this.__activated = null;
            this.__activatedRoute = null;
            return null;
        };
        /**
         * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
         */
        TabPanelRouterOutletDirective.prototype.attach = function (ref, activatedRoute) {
            this.__activated = true;
            this.__activatedRoute = activatedRoute;
            this.onActivate(activatedRoute);
        };
        TabPanelRouterOutletDirective.prototype.deactivate = function () {
            if (this.__activated) {
                this.__activated = false;
                this.__activatedRoute = null;
            }
        };
        TabPanelRouterOutletDirective.prototype.activateWith = function (activatedRoute, resolver) {
            console.log('activateWith', activatedRoute);
            if (this.isActivated) {
                throw new Error('Cannot activate an already activated outlet');
            }
            this.__activatedRoute = activatedRoute;
            this.__activated = true;
            this.onActivate(activatedRoute);
        };
        TabPanelRouterOutletDirective.prototype.onActivate = function (activatedRoute) {
        };
        TabPanelRouterOutletDirective = __decorate([
            core.Directive({
                // tslint:disable-next-line
                selector: 'rb-tab-panel-outlet'
            }),
            __param(1, core.Attribute('name')),
            __metadata("design:paramtypes", [router.ChildrenOutletContexts, String])
        ], TabPanelRouterOutletDirective);
        return TabPanelRouterOutletDirective;
    }(router.RouterOutlet));

    var TabPanelModule = /** @class */ (function () {
        function TabPanelModule() {
        }
        TabPanelModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    NavigationModule,
                    DropdownModule,
                    router.RouterModule
                ],
                declarations: [
                    TabPanelComponent,
                    TabPanelItemDirective,
                    TabPanelTitleDirective,
                    TabPanelRouterOutletDirective
                ],
                exports: [
                    TabPanelComponent,
                    TabPanelItemDirective,
                    TabPanelTitleDirective
                ]
            })
        ], TabPanelModule);
        return TabPanelModule;
    }());

    var SearchResultItemComponent = /** @class */ (function () {
        function SearchResultItemComponent() {
        }
        SearchResultItemComponent.prototype.ngOnInit = function () {
        };
        SearchResultItemComponent.prototype.isTemplate = function (source) {
            return source instanceof core.TemplateRef;
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], SearchResultItemComponent.prototype, "page", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], SearchResultItemComponent.prototype, "itemTitle", void 0);
        SearchResultItemComponent = __decorate([
            core.Component({
                selector: 'rb-search-result-item',
                template: "<div class=\"M-Search-SearchResultItem\">\n  <div class=\"M-Search-SearchResultItem__wrapper\">\n    <div class=\"M-Search-SearchResultItem__page\" *ngIf=\"page\">\n      <ng-container *ngIf=\"isTemplate(page)\" ngTemplateOutlet=\"page\"></ng-container>\n      {{ !isTemplate(page) ? page : '' }}\n    </div>\n    <div class=\"M-Search-SearchResultItem__title\">\n      <ng-container *ngIf=\"isTemplate(itemTitle)\" ngTemplateOutlet=\"title\"></ng-container>\n      {{ !isTemplate(itemTitle) ? itemTitle : '' }}\n    </div>\n    <div class=\"M-Search-SearchResultItem__text\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [])
        ], SearchResultItemComponent);
        return SearchResultItemComponent;
    }());

    var SearchResultModule = /** @class */ (function () {
        function SearchResultModule() {
        }
        SearchResultModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                declarations: [
                    SearchResultItemComponent
                ],
                exports: [
                    SearchResultItemComponent
                ]
            })
        ], SearchResultModule);
        return SearchResultModule;
    }());

    var CalloutComponent = /** @class */ (function () {
        function CalloutComponent() {
            this.type = 'error';
            this.icon = ['rb-ic', 'rb-ic-alert-error-filled'];
            this.type2icon = {
                error: 'rb-ic-alert-error-filled',
                success: 'rb-ic-alert-success-filled',
                warning: 'rb-ic-alert-warning-filled',
                info: 'rb-ic-info',
            };
        }
        CalloutComponent.prototype.ngOnChanges = function (changes) {
            if (changes.type) {
                this.icon = ['rb-ic', this.type2icon[changes.type.currentValue]];
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], CalloutComponent.prototype, "type", void 0);
        CalloutComponent = __decorate([
            core.Component({
                selector: 'rb-callout',
                template: "<div [class]=\"'rb-callout rb-callout-'+type\">\r\n  <span [ngClass]=\"icon\"></span>\r\n  <ng-content></ng-content>\r\n</div>\r\n"
            }),
            __metadata("design:paramtypes", [])
        ], CalloutComponent);
        return CalloutComponent;
    }());

    var CalloutModule = /** @class */ (function () {
        function CalloutModule() {
        }
        CalloutModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    IconModule
                ],
                declarations: [CalloutComponent],
                exports: [CalloutComponent]
            })
        ], CalloutModule);
        return CalloutModule;
    }());

    /**
     * Can be toggled to provide a state
     * Usage with: rbDetailsToggle #triggerDetails="rbDetailsToggle"
     * Then check triggerDetails.open for the current state
     */
    var DetailsToggleDirective = /** @class */ (function () {
        function DetailsToggleDirective(viewContainerRef) {
            this.viewContainerRef = viewContainerRef;
            this.isOpenChange = new core.EventEmitter();
            this.open = false;
        }
        Object.defineProperty(DetailsToggleDirective.prototype, "isOpen", {
            set: function (state) {
                if (state) {
                    this.openDetails();
                }
                else {
                    this.closeDetails();
                }
            },
            enumerable: true,
            configurable: true
        });
        DetailsToggleDirective.prototype.onClick = function (e) {
            e.preventDefault();
            if (this.open) {
                this.closeDetails();
                this.isOpenChange.next(this.open);
            }
            else {
                this.openDetails();
                this.isOpenChange.next(this.open);
            }
        };
        DetailsToggleDirective.prototype.openDetails = function () {
            this.open = true;
            this.viewContainerRef.element.nativeElement.classList.add('open');
        };
        DetailsToggleDirective.prototype.closeDetails = function () {
            this.open = false;
            this.viewContainerRef.element.nativeElement.classList.remove('open');
        };
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], DetailsToggleDirective.prototype, "isOpenChange", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], DetailsToggleDirective.prototype, "isOpen", null);
        __decorate([
            core.HostListener('click', ['$event']),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [MouseEvent]),
            __metadata("design:returntype", void 0)
        ], DetailsToggleDirective.prototype, "onClick", null);
        DetailsToggleDirective = __decorate([
            core.Directive({
                selector: '[rbDetailsToggle]',
                exportAs: 'rbDetailsToggle'
            }),
            __metadata("design:paramtypes", [core.ViewContainerRef])
        ], DetailsToggleDirective);
        return DetailsToggleDirective;
    }());

    var DetailsToggleModule = /** @class */ (function () {
        function DetailsToggleModule() {
        }
        DetailsToggleModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                declarations: [DetailsToggleDirective],
                exports: [DetailsToggleDirective]
            })
        ], DetailsToggleModule);
        return DetailsToggleModule;
    }());

    var TeaserPanelComponent = /** @class */ (function () {
        function TeaserPanelComponent() {
            /**
             * Size of one teaser for the width.
             * Depending on that it is automatically determined how many columns are used
             */
            this.size = 'medium';
        }
        TeaserPanelComponent.prototype.ngOnInit = function () {
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], TeaserPanelComponent.prototype, "size", void 0);
        TeaserPanelComponent = __decorate([
            core.Component({
                selector: 'rb-teaser-panel',
                template: "<div [class]=\"'teaser-panel teaser-panel-'+size\">\n  <ng-content></ng-content>\n</div>\n"
            }),
            __metadata("design:paramtypes", [])
        ], TeaserPanelComponent);
        return TeaserPanelComponent;
    }());

    var TeaserPanelItemComponent = /** @class */ (function () {
        function TeaserPanelItemComponent() {
        }
        TeaserPanelItemComponent.prototype.ngOnInit = function () {
        };
        TeaserPanelItemComponent = __decorate([
            core.Component({
                selector: 'rb-teaser-panel-item',
                template: "<ng-content></ng-content>\n\n\n"
            }),
            __metadata("design:paramtypes", [])
        ], TeaserPanelItemComponent);
        return TeaserPanelItemComponent;
    }());

    var TeaserPanelModule = /** @class */ (function () {
        function TeaserPanelModule() {
        }
        TeaserPanelModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                declarations: [TeaserPanelComponent, TeaserPanelItemComponent],
                exports: [TeaserPanelComponent, TeaserPanelItemComponent]
            })
        ], TeaserPanelModule);
        return TeaserPanelModule;
    }());

    var BoardItemIconDirective = /** @class */ (function () {
        function BoardItemIconDirective(templateRef) {
            this.templateRef = templateRef;
        }
        BoardItemIconDirective = __decorate([
            core.Directive({
                selector: '[rbBoardItemIcon]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], BoardItemIconDirective);
        return BoardItemIconDirective;
    }());
    var BoardItemBodyDirective = /** @class */ (function () {
        function BoardItemBodyDirective(templateRef) {
            this.templateRef = templateRef;
        }
        BoardItemBodyDirective = __decorate([
            core.Directive({
                selector: '[rbBoardItemBody]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], BoardItemBodyDirective);
        return BoardItemBodyDirective;
    }());
    var BoardItemCountDirective = /** @class */ (function () {
        function BoardItemCountDirective(templateRef) {
            this.templateRef = templateRef;
        }
        BoardItemCountDirective = __decorate([
            core.Directive({
                selector: '[rbBoardItemCount]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef])
        ], BoardItemCountDirective);
        return BoardItemCountDirective;
    }());

    var BoardItemComponent = /** @class */ (function () {
        function BoardItemComponent() {
        }
        BoardItemComponent.prototype.ngOnInit = function () {
        };
        BoardItemComponent.prototype.isTemplateStatus = function () {
            return this.statusIcon instanceof core.TemplateRef;
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], BoardItemComponent.prototype, "statusIcon", void 0);
        __decorate([
            core.ContentChild(BoardItemIconDirective, { static: false }),
            __metadata("design:type", BoardItemIconDirective)
        ], BoardItemComponent.prototype, "icon", void 0);
        __decorate([
            core.ContentChild(BoardItemBodyDirective, { static: false }),
            __metadata("design:type", BoardItemBodyDirective)
        ], BoardItemComponent.prototype, "body", void 0);
        __decorate([
            core.ContentChildren(BoardItemCountDirective),
            __metadata("design:type", core.QueryList)
        ], BoardItemComponent.prototype, "counts", void 0);
        BoardItemComponent = __decorate([
            core.Component({
                selector: 'rb-board-item',
                template: "<div class=\"board-item\">\n  <div class=\"board-item-body\">\n    <div class=\"board-item-icon\" *ngIf=\"icon\">\n      <ng-container *ngTemplateOutlet=\"icon.templateRef\"></ng-container>\n    </div>\n    <div class=\"board-item-content\">\n      <ng-container *ngTemplateOutlet=\"body?.templateRef\"></ng-container>\n    </div>\n  </div>\n  <div *ngIf=\"counts && counts.length\" class=\"board-item-counts\">\n    <ng-container *ngFor=\"let item of counts\">\n      <div class=\"board-item-count\">\n        <ng-container *ngTemplateOutlet=\"item.templateRef\"></ng-container>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"board-item-status\" *ngIf=\"statusIcon\">\n    <div class=\"board-item-status-icon\">\n      <ng-container *ngIf=\"isTemplateStatus()\">\n        <ng-container *ngTemplateOutlet=\"statusIcon\"></ng-container>\n      </ng-container>\n      <rb-icon *ngIf=\"!isTemplateStatus()\" [name]=\"statusIcon\"></rb-icon>\n    </div>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [])
        ], BoardItemComponent);
        return BoardItemComponent;
    }());

    var BoardItemModule = /** @class */ (function () {
        function BoardItemModule() {
        }
        BoardItemModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    IconModule
                ],
                declarations: [
                    BoardItemComponent,
                    BoardItemIconDirective,
                    BoardItemBodyDirective,
                    BoardItemCountDirective
                ],
                exports: [
                    BoardItemComponent,
                    BoardItemIconDirective,
                    BoardItemBodyDirective,
                    BoardItemCountDirective
                ]
            })
        ], BoardItemModule);
        return BoardItemModule;
    }());

    var LoadingEntity = /** @class */ (function () {
        function LoadingEntity(loadingStateAfterFirstSuccess) {
            if (loadingStateAfterFirstSuccess === void 0) { loadingStateAfterFirstSuccess = true; }
            this.loadingStateAfterFirstSuccess = loadingStateAfterFirstSuccess;
            this.runs = 0;
            this.loading = false;
            this.error = null;
            this.result = null;
            this.stopSubject = new rxjs.Subject();
        }
        /**
         * Tracks the status of an observable
         */
        LoadingEntity.prototype.run = function (observable) {
            var _this = this;
            this.runs++;
            if (this.loadingStateAfterFirstSuccess && this.result !== null || this.result === null || this.error) {
                this.loading = true;
                this.result = null;
            }
            this.complete();
            this.error = null;
            return observable.pipe(operators.tap(function (result) {
                _this.loading = false;
                _this.result = result;
            }, function (error) {
                _this.loading = false;
                _this.error = error;
            }, function () {
                _this.loading = false;
            }), operators.takeUntil(this.stopSubject));
        };
        /**
         * This can complete and unsubscribe all observers
         */
        LoadingEntity.prototype.complete = function () {
            this.stopSubject.next();
        };
        LoadingEntity.prototype.reset = function () {
            this.complete();
            this.error = null;
            this.loading = false;
            this.result = null;
        };
        return LoadingEntity;
    }());

    var LoadingStatusComponent = /** @class */ (function () {
        function LoadingStatusComponent() {
            this.size = 1;
        }
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LoadingStatusComponent.prototype, "size", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", LoadingEntity)
        ], LoadingStatusComponent.prototype, "loadingEntity", void 0);
        LoadingStatusComponent = __decorate([
            core.Component({
                selector: 'rb-loading-status',
                template: "<div class=\"centered-container\" *ngIf=\"!loadingEntity?.error\">\n  <rb-loading-spinner [size]=\"size\"></rb-loading-spinner>\n</div>\n<rb-callout *ngIf=\"loadingEntity?.error\">\n  <rb-error-format [error]=\"loadingEntity.error\"></rb-error-format>\n</rb-callout>\n"
            }),
            __metadata("design:paramtypes", [])
        ], LoadingStatusComponent);
        return LoadingStatusComponent;
    }());

    var LoadingDirective = /** @class */ (function () {
        function LoadingDirective(templateRef, viewContainer, componentFactory) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
            this.componentFactory = componentFactory;
            this.loadingRef = null;
            this.viewRef = null;
            this.rbLoadingSize = 1;
        }
        LoadingDirective.prototype.ngDoCheck = function () {
            if (this.loadingEntity) {
                this.updateView(this.loadingEntity.loading || this.loadingEntity.error);
            }
        };
        Object.defineProperty(LoadingDirective.prototype, "rbLoading", {
            set: function (state) {
                this.factory = this.componentFactory.resolveComponentFactory(LoadingStatusComponent);
                this.updateState(state);
            },
            enumerable: true,
            configurable: true
        });
        LoadingDirective.prototype.updateState = function (state) {
            if (state instanceof LoadingEntity) {
                this.loadingEntity = state;
                state = !!(this.loadingEntity.loading || this.loadingEntity.error);
            }
            this.updateView(state);
        };
        LoadingDirective.prototype.updateView = function (state) {
            if (state) {
                if (!this.loadingRef) {
                    this.viewContainer.clear();
                    this.viewRef = null;
                    this.loadingRef = this.viewContainer.createComponent(this.factory);
                    this.loadingRef.instance.loadingEntity = this.loadingEntity;
                    this.loadingRef.instance.size = this.rbLoadingSize;
                }
            }
            else {
                if (!this.viewRef) {
                    this.viewContainer.clear();
                    this.loadingRef = null;
                    this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
                }
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], LoadingDirective.prototype, "rbLoadingSize", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], LoadingDirective.prototype, "rbLoading", null);
        LoadingDirective = __decorate([
            core.Directive({
                selector: '[rbLoading]'
            }),
            __metadata("design:paramtypes", [core.TemplateRef,
                core.ViewContainerRef,
                core.ComponentFactoryResolver])
        ], LoadingDirective);
        return LoadingDirective;
    }());

    var ERROR_FORMATTER = new core.InjectionToken('rbErrorFormatter');
    var DetailedError = /** @class */ (function () {
        function DetailedError(message, details) {
            this.message = message;
            this.details = details;
            this.name = 'DetailedError';
        }
        DetailedError.prototype.toString = function () {
            return this.message;
        };
        return DetailedError;
    }());
    var DefaultErrorFormatter = /** @class */ (function () {
        function DefaultErrorFormatter() {
        }
        DefaultErrorFormatter.prototype.getDetails = function (error) {
            if (error instanceof DetailedError) {
                if (typeof (error.details) === 'object') {
                    return JSON.stringify(error.details, null, 2);
                }
                return error.details;
            }
            if (error instanceof http.HttpErrorResponse) {
                if (error.error) {
                    if (typeof (error.error) === 'object') {
                        return JSON.stringify(error.error, null, 2);
                    }
                    return String(error.error);
                }
            }
            return null;
        };
        DefaultErrorFormatter.prototype.transform = function (error) {
            if (error instanceof http.HttpErrorResponse) {
                var text = 'Error: ';
                if (error.message) {
                    text += error.message;
                }
                return text;
            }
            if (error instanceof Error || error instanceof DetailedError) {
                return String(error);
            }
            return null;
        };
        return DefaultErrorFormatter;
    }());
    var DEFAULT_ERROR_FORMATTER = new DefaultErrorFormatter();

    /**
     * Formats an error to a string
     */
    var ErrorFormatPipe = /** @class */ (function () {
        function ErrorFormatPipe(formatters) {
            if (!formatters) {
                this.formatters = [DEFAULT_ERROR_FORMATTER];
            }
            else {
                this.formatters = formatters.slice();
                this.formatters.push(DEFAULT_ERROR_FORMATTER);
            }
        }
        ErrorFormatPipe.prototype.transform = function (error, args) {
            if (this.formatters && this.formatters.length) {
                for (var i = 0; i < this.formatters.length; i++) {
                    var formatter = this.formatters[i];
                    var result = formatter.transform(error);
                    if (result !== null) {
                        return result;
                    }
                }
            }
            return String(error);
        };
        ErrorFormatPipe = __decorate([
            core.Pipe({
                name: 'errorFormat',
                pure: true
            }),
            __param(0, core.Optional()), __param(0, core.Inject(ERROR_FORMATTER)),
            __metadata("design:paramtypes", [Array])
        ], ErrorFormatPipe);
        return ErrorFormatPipe;
    }());

    var LoadingLinkDirective = /** @class */ (function () {
        function LoadingLinkDirective(router$1, element, renderer) {
            var _this = this;
            this.router = router$1;
            this.element = element;
            this.renderer = renderer;
            this.loading = false;
            this.className = 'loading';
            this.subscription = router$1.events.subscribe(function (s) {
                if (s instanceof router.NavigationStart && _this.isRelevantUrl(s.url)) {
                    _this.loading = true;
                    _this.update();
                }
                if (s instanceof router.NavigationEnd) {
                    _this.loading = false;
                    _this.update();
                }
            });
        }
        Object.defineProperty(LoadingLinkDirective.prototype, "rbLoadingLink", {
            set: function (className) {
                if (className) {
                    this.className = className;
                }
            },
            enumerable: true,
            configurable: true
        });
        LoadingLinkDirective.prototype.ngAfterContentInit = function () {
        };
        LoadingLinkDirective.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        LoadingLinkDirective.prototype.update = function () {
            if (!this.element || !this.element.nativeElement) {
                return;
            }
            if (this.loading) {
                this.renderer.addClass(this.element.nativeElement, this.className);
            }
            else {
                this.renderer.removeClass(this.element.nativeElement, this.className);
            }
        };
        LoadingLinkDirective.prototype.isRelevantUrl = function (url) {
            return this.linksWithHrefs.some(function (link) { return url === link.urlTree.toString(); });
        };
        __decorate([
            core.ContentChildren(router.RouterLinkWithHref, { descendants: true }),
            __metadata("design:type", core.QueryList)
        ], LoadingLinkDirective.prototype, "linksWithHrefs", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], LoadingLinkDirective.prototype, "rbLoadingLink", null);
        LoadingLinkDirective = __decorate([
            core.Directive({
                selector: '[rbLoadingLink]'
            }),
            __metadata("design:paramtypes", [router.Router, core.ElementRef, core.Renderer2])
        ], LoadingLinkDirective);
        return LoadingLinkDirective;
    }());

    var ErrorFormatComponent = /** @class */ (function () {
        function ErrorFormatComponent(formatters) {
            this.opened = false;
            if (!formatters) {
                this.formatters = [DEFAULT_ERROR_FORMATTER];
            }
            else {
                this.formatters = formatters.slice();
                this.formatters.push(DEFAULT_ERROR_FORMATTER);
            }
        }
        ErrorFormatComponent.prototype.ngOnInit = function () {
            this.identifyErrorData(this.error);
        };
        ErrorFormatComponent.prototype.identifyErrorData = function (error) {
            if (this.formatters && this.formatters.length) {
                for (var i = 0; i < this.formatters.length; i++) {
                    var formatter = this.formatters[i];
                    var result = formatter.transform(error);
                    if (result !== null) {
                        this.message = result;
                        if (formatter.getDetails) {
                            this.details = formatter.getDetails(error);
                        }
                        return result;
                    }
                }
            }
            this.message = String(error);
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], ErrorFormatComponent.prototype, "error", void 0);
        ErrorFormatComponent = __decorate([
            core.Component({
                selector: 'rb-error-format',
                template: "<div class=\"error-message\">{{message}}</div>\n<a *ngIf=\"details\" href=\"javascript:\" class=\"rb-link rb-details-toggle\" [class.open]=\"opened\" (click)=\"opened=!opened\">Details</a>\n<pre *ngIf=\"opened\" class=\"error-details\">{{details}}</pre>\n",
                styles: [".error-details{word-wrap:break-word;word-break:break-all;white-space:pre-wrap}"]
            }),
            __param(0, core.Optional()), __param(0, core.Inject(ERROR_FORMATTER)),
            __metadata("design:paramtypes", [Array])
        ], ErrorFormatComponent);
        return ErrorFormatComponent;
    }());

    var LoadingModule = /** @class */ (function () {
        function LoadingModule() {
        }
        LoadingModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    LoadingSpinnerModule,
                    CalloutModule
                ],
                declarations: [
                    LoadingDirective,
                    LoadingStatusComponent,
                    ErrorFormatPipe,
                    LoadingLinkDirective,
                    ErrorFormatComponent
                ],
                exports: [
                    LoadingDirective,
                    LoadingStatusComponent,
                    ErrorFormatPipe,
                    LoadingLinkDirective,
                    ErrorFormatComponent
                ],
                entryComponents: [LoadingStatusComponent]
            })
        ], LoadingModule);
        return LoadingModule;
    }());

    var AccordionService = /** @class */ (function () {
        function AccordionService() {
            this.updateState = new rxjs.Subject();
        }
        AccordionService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [])
        ], AccordionService);
        return AccordionService;
    }());

    var AccordionTitleComponent = /** @class */ (function () {
        function AccordionTitleComponent(accordion) {
            this.accordion = accordion;
            this.open = false;
            this.viewInit = false;
        }
        AccordionTitleComponent.prototype.ngOnChanges = function (changes) {
            if (changes.open && this.viewInit) {
                this.accordion.updateState.next(this);
            }
        };
        AccordionTitleComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.viewInit = true;
            if (this.open) {
                setTimeout(function () {
                    _this.accordion.updateState.next(_this);
                });
            }
        };
        AccordionTitleComponent.prototype.toggle = function () {
            this.open = !this.open;
            this.accordion.updateState.next(this);
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AccordionTitleComponent.prototype, "open", void 0);
        AccordionTitleComponent = __decorate([
            core.Component({
                selector: 'rb-accordion-title',
                template: "<div class=\"accordion-row\" [class.open]=\"open\" (click)=\"toggle()\">\r\n  <h5>\r\n    <ng-content></ng-content>\r\n  </h5>\r\n  <a href=\"javascript:\" class=\"accordion-toggle\">\r\n    <span class=\"rb-ic\" [class.rb-ic-add]=\"!open\" [class.rb-ic-less-minimize]=\"open\"></span>\r\n  </a>\r\n</div>\r\n"
            }),
            __metadata("design:paramtypes", [AccordionService])
        ], AccordionTitleComponent);
        return AccordionTitleComponent;
    }());

    var AccordionBodyComponent = /** @class */ (function () {
        function AccordionBodyComponent() {
            this.isOpen = false;
        }
        AccordionBodyComponent.prototype.open = function () {
            this.isOpen = true;
        };
        AccordionBodyComponent.prototype.close = function () {
            this.isOpen = false;
        };
        AccordionBodyComponent = __decorate([
            core.Component({
                selector: 'rb-accordion-body',
                template: "<div class=\"accordion-body\" [class.open]=\"isOpen\">\r\n  <ng-content></ng-content>\r\n</div>\r\n"
            }),
            __metadata("design:paramtypes", [])
        ], AccordionBodyComponent);
        return AccordionBodyComponent;
    }());

    /**
     * <rb-accordion> is the container for
     * <rb-accordion-title> and <rb-accordion-body>
     */
    var AccordionComponent = /** @class */ (function () {
        function AccordionComponent(accordion) {
            this.accordion = accordion;
            /**
             * Whether only one can be opened.
             */
            this.openSingle = false;
            this.updateSub = null;
        }
        AccordionComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.updateSub = this.accordion.updateState.subscribe(function (t) { return _this.updateState(t); });
        };
        AccordionComponent.prototype.ngOnDestroy = function () {
            if (this.updateSub) {
                this.updateSub.unsubscribe();
            }
        };
        AccordionComponent.prototype.updateState = function (title) {
            var titles = this.titles.toArray();
            var bodies = this.bodies.toArray();
            var index = titles.indexOf(title);
            if (index !== -1) {
                var component = bodies[index];
                if (title.open) {
                    component.open();
                }
                else {
                    component.close();
                }
                if (this.openSingle) {
                    for (var i = 0; i < titles.length; i++) {
                        var title2 = titles[i];
                        var body = bodies[i];
                        if (i !== index && title2.open) {
                            title2.open = false;
                            body.close();
                        }
                    }
                }
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], AccordionComponent.prototype, "openSingle", void 0);
        __decorate([
            core.ContentChildren(AccordionTitleComponent),
            __metadata("design:type", core.QueryList)
        ], AccordionComponent.prototype, "titles", void 0);
        __decorate([
            core.ContentChildren(AccordionBodyComponent),
            __metadata("design:type", core.QueryList)
        ], AccordionComponent.prototype, "bodies", void 0);
        AccordionComponent = __decorate([
            core.Component({
                selector: 'rb-accordion',
                template: "<ng-content></ng-content>\r\n",
                providers: [AccordionService]
            }),
            __metadata("design:paramtypes", [AccordionService])
        ], AccordionComponent);
        return AccordionComponent;
    }());

    var AccordionModule = /** @class */ (function () {
        function AccordionModule() {
        }
        AccordionModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule
                ],
                declarations: [AccordionComponent, AccordionTitleComponent, AccordionBodyComponent],
                exports: [AccordionComponent, AccordionTitleComponent, AccordionBodyComponent]
            })
        ], AccordionModule);
        return AccordionModule;
    }());

    var flatpickrFunc = flatpickrImport; // workaround for rollup and tests
    var FLATPICKR_DEFAULT_OPTIONS = new core.InjectionToken('flatpickrDefaultOptions');
    var overridableOptions = {
        time_24hr: true
    };
    /**
     * Displays a input for flatpickr
     * The value, is a ISO Date String or an array of ISO Date Strings.
     */
    var FormDateInputComponent = /** @class */ (function () {
        function FormDateInputComponent(renderer, elementRef, defaultOptions) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.defaultOptions = defaultOptions;
            this.label = null;
            this.type = 'text';
            this.id = 'input.' + Math.random();
            /**
             * Options for Flatpickr
             * @see https://flatpickr.js.org/options/
             */
            this.options = {};
            /**
             * Given, when this is the start date.
             * Start input is responsible for options
             */
            this.rangeEnd = null;
            this.onChange = emptyFunction;
            this.onTouched = emptyFunction;
        }
        FormDateInputComponent_1 = FormDateInputComponent;
        FormDateInputComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.defaultOptions) {
                this.options = __assign({}, overridableOptions, this.defaultOptions, this.options);
            }
            else {
                this.options = __assign({}, overridableOptions, this.options);
            }
            this.options.onValueUpdate = function (selectedDates, dateString) {
                _this.updateValue(selectedDates);
            };
            if (this.rangeEnd) {
                this.rangeEnd.options = __assign({}, this.options);
            }
            this.picker = flatpickrFunc(this.input.nativeElement, this.options);
        };
        FormDateInputComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            if (changes.options && this.picker && changes.options.currentValue) {
                Object.keys(changes.options.currentValue).forEach(function (opt) {
                    _this.picker.set(opt, changes.options.currentValue[opt]);
                });
            }
        };
        FormDateInputComponent.prototype.ngOnDestroy = function () {
            if (this.picker) {
                this.picker.destroy();
            }
        };
        FormDateInputComponent.prototype.isReadonly = function () {
            return this.readonly !== undefined;
        };
        FormDateInputComponent.prototype.updateValue = function (value) {
            if (this.picker.config.mode === 'single' && value && value.length) {
                value = value[0].toISOString();
            }
            if (['range', 'multiple'].indexOf(this.picker.config.mode) !== -1 && value && value.length) {
                value = value.map(function (v) { return v.toISOString(); });
            }
            this.checkValue(value);
            this.onChange(value);
            this.updateEndRange();
        };
        FormDateInputComponent.prototype.updateEndRange = function () {
            if (this.rangeEnd && this.picker.selectedDates[0]) {
                var start = this.picker.selectedDates[0];
                var end = this.rangeEnd.picker.selectedDates[0];
                this.rangeEnd.picker.set('minDate', this.picker.selectedDates[0]);
                if (start && end && end.getTime() < start.getTime()) {
                    this.rangeEnd.writeValue(start.toISOString());
                }
            }
        };
        FormDateInputComponent.prototype.checkValue = function (value) {
            if (typeof (value) === 'string' && value.length > 0 || value && value.length) {
                this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
            }
            else {
                this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
            }
        };
        FormDateInputComponent.prototype.isLabelTemplate = function () {
            return this.label instanceof core.TemplateRef;
        };
        FormDateInputComponent.prototype.writeValue = function (value) {
            if (value === null || value === undefined) {
                value = '';
            }
            this.checkValue(value);
            if (this.picker && this.picker.config) {
                this.picker.setDate(value);
            }
            this.updateEndRange();
            // this.renderer.setProperty(this.input.nativeElement, 'value', value);
        };
        FormDateInputComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        FormDateInputComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        FormDateInputComponent.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
        };
        FormDateInputComponent.prototype.toggle = function () {
            this.picker.toggle();
        };
        FormDateInputComponent.prototype.close = function () {
            this.picker.close();
        };
        var FormDateInputComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateInputComponent.prototype, "label", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormDateInputComponent.prototype, "name", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateInputComponent.prototype, "type", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateInputComponent.prototype, "readonly", void 0);
        __decorate([
            core.ContentChildren(FormValidationMessageDirective),
            __metadata("design:type", core.QueryList)
        ], FormDateInputComponent.prototype, "messages", void 0);
        __decorate([
            core.ViewChild('input', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FormDateInputComponent.prototype, "input", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateInputComponent.prototype, "options", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", FormDateInputComponent)
        ], FormDateInputComponent.prototype, "rangeEnd", void 0);
        FormDateInputComponent = FormDateInputComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-date-input',
                template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <input [type]=\"type\" [id]=\"id + 'input'\"\r\n         class=\"input with-icon\"\r\n         (blur)=\"onTouched()\"\r\n         [readonly]=\"isReadonly()\"\r\n         #input>\r\n  <span class=\"input-icon rb-ic rb-ic-calendar\" (click)=\"toggle()\"></span>\r\n  <label class=\"label\" [for]=\"id + 'input'\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormDateInputComponent_1; }), multi: true }],
                exportAs: 'dateInput'
            }),
            __param(2, core.Optional()), __param(2, core.Inject(FLATPICKR_DEFAULT_OPTIONS)),
            __metadata("design:paramtypes", [core.Renderer2,
                core.ElementRef, Object])
        ], FormDateInputComponent);
        return FormDateInputComponent;
    }());

    var defaultTimeInputOptions = {
        units: [
            { value: 1, unit: 'ms', label: 'Milliseconds' },
            { value: 1000, unit: 's', label: 'Seconds' },
            { value: 1000 * 60, unit: 'm', label: 'Minutes' },
            { value: 1000 * 60 * 60, unit: 'h', label: 'Hours' },
            { value: 1000 * 60 * 60 * 24, unit: 'd', label: 'Days' },
            { value: 1000 * 60 * 60 * 24 * 7, unit: 'w', label: 'Weeks' },
        ]
    };
    function isRelative(values) {
        return Array.isArray(values) && typeof (values[0]) === 'number' && typeof (values[1]) === 'number';
    }
    function isAbsolute(values) {
        return Array.isArray(values) && typeof (values[0]) === 'string' && typeof (values[1]) === 'string';
    }
    function getRelativeInfo(value, units) {
        var operator = '-';
        var count = 0;
        var unit = 'ms';
        if (typeof (value) === 'string' && value.match(/^([+-])(\d+)/)) {
            operator = RegExp.$1;
            count = parseInt(RegExp.$2, 10);
        }
        if (typeof (value) === 'number') {
            operator = value < 0 ? '-' : '+';
            count = Math.abs(value);
        }
        if (count > 0) {
            var divisor_1 = 1;
            units.forEach(function (u) {
                if (count % u.value === 0) {
                    unit = u.unit;
                    divisor_1 = u.value;
                }
            });
            count = count / divisor_1;
        }
        var label = units.find(function (u) { return u.unit === unit; }).label;
        return {
            operator: operator,
            count: count,
            unit: unit,
            label: label,
            displayTextShort: "" + operator + count + unit,
            displayText: "" + operator + count + " " + label
        };
    }

    var TIME_INPUT_OPTIONS = new core.InjectionToken('formRelativeInputTimeOptions');
    var RelativeTimeInputComponent = /** @class */ (function () {
        function RelativeTimeInputComponent(options) {
            this.options = options;
            this.id = 'input.' + Math.random();
            this.onChange = emptyFunction$1;
            this.onTouched = emptyFunction$1;
            this.disabled = false;
            this.operator = '-';
            this.count = '0';
            this.unit = 'ms';
            this.displayText = '';
            if (!options) {
                this.options = defaultTimeInputOptions;
            }
        }
        RelativeTimeInputComponent_1 = RelativeTimeInputComponent;
        RelativeTimeInputComponent.prototype.ngOnInit = function () {
            this.units = defaultTimeInputOptions.units;
        };
        RelativeTimeInputComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        RelativeTimeInputComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        RelativeTimeInputComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
        };
        RelativeTimeInputComponent.prototype.writeValue = function (obj) {
            var info = getRelativeInfo(obj, this.units);
            this.count = info.count.toString();
            this.operator = info.operator;
            this.unit = info.unit;
            this.displayText = info.displayText;
        };
        RelativeTimeInputComponent.prototype.getValue = function () {
            var count = parseInt(this.count, 10) * this.getDivisor();
            if (isNaN(count)) {
                return 0;
            }
            else {
                return this.operator === '-' ? count * -1 : count;
            }
        };
        RelativeTimeInputComponent.prototype.getDivisor = function () {
            var _this = this;
            return this.units.find(function (u) { return u.unit === _this.unit; }).value;
        };
        RelativeTimeInputComponent.prototype.notifyChange = function () {
            var value = this.getValue();
            this.onChange(value);
        };
        RelativeTimeInputComponent.prototype.updateUnit = function (unit) {
            var oldDivisor = this.getDivisor();
            this.unit = unit;
            var newDivisor = this.getDivisor();
            if (newDivisor > oldDivisor) {
                var baseValue = parseInt(this.count, 10) * oldDivisor;
                this.count = Math.ceil(baseValue / newDivisor).toString();
            }
            this.notifyChange();
        };
        RelativeTimeInputComponent.prototype.isLabelTemplate = function () {
            return this.label instanceof core.TemplateRef;
        };
        var RelativeTimeInputComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], RelativeTimeInputComponent.prototype, "label", void 0);
        RelativeTimeInputComponent = RelativeTimeInputComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-relative-time-input',
                template: "<div class=\"rb-custom-input\">\r\n  <div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n    <div class=\"relative-time-form\">\r\n      <rb-form-select [(ngModel)]=\"operator\" (ngModelChange)=\"notifyChange()\" name=\"operator\" [disabled]=\"disabled\">\r\n        <option value=\"-\">-</option>\r\n        <option value=\"+\">+</option>\r\n      </rb-form-select>\r\n      <rb-form-input class=\"relative-time-form-number\" type=\"number\"\r\n                     [(ngModel)]=\"count\" (ngModelChange)=\"notifyChange()\" name=\"count\"\r\n                     pattern=\"^\\d+$\" required\r\n                     [disabled]=\"disabled\"></rb-form-input>\r\n      <rb-form-select class=\"relative-time-form-unit\" [disabled]=\"disabled\"\r\n                      [ngModel]=\"unit\"\r\n                      (ngModelChange)=\"updateUnit($event)\"\r\n                      name=\"unit\">\r\n        <option *ngFor=\"let u of units\" [value]=\"u.unit\">{{u.label}}</option>\r\n      </rb-form-select>\r\n    </div>\r\n\r\n    <label class=\"label\" [for]=\"id + 'input'\">\r\n      {{!isLabelTemplate()?label:''}}\r\n      <ng-container *ngIf=\"isLabelTemplate()\">\r\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n      </ng-container>\r\n    </label>\r\n\r\n    <span class=\"input-background\"></span>\r\n\r\n  </div>\r\n</div>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return RelativeTimeInputComponent_1; }), multi: true }]
            }),
            __param(0, core.Inject(TIME_INPUT_OPTIONS)), __param(0, core.Optional()),
            __metadata("design:paramtypes", [Object])
        ], RelativeTimeInputComponent);
        return RelativeTimeInputComponent;
    }());
    function emptyFunction$1(_) {
    }

    var flatpickrFunc$1 = flatpickrImport; // workaround for rollup and tests
    var overridableOptions$1 = {
        time_24hr: true
    };
    var FormDateRangeInputComponent = /** @class */ (function () {
        function FormDateRangeInputComponent(renderer, elementRef, defaultOptions, timeInputOptions) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.defaultOptions = defaultOptions;
            this.timeInputOptions = timeInputOptions;
            this.label = null;
            this.id = 'input.' + Math.random();
            this.allowRelative = false;
            this.presets = [];
            this.startLabel = 'Start';
            this.endLabel = 'End';
            this.absoluteLabel = 'Absolute';
            this.relativeLabel = 'Relative';
            this.presetsLabel = 'Presets';
            this.displayValue = '';
            /**
             * Options for Flatpickr
             * @see https://flatpickr.js.org/options/
             */
            this.options = {};
            this.onChange = emptyFunction;
            this.onTouched = emptyFunction;
            this.viewInit = false;
            if (!timeInputOptions) {
                this.timeInputOptions = defaultTimeInputOptions;
            }
        }
        FormDateRangeInputComponent_1 = FormDateRangeInputComponent;
        FormDateRangeInputComponent.prototype.ngAfterViewInit = function () {
            this.viewInit = true;
            if (isAbsolute(this.value)) {
                this.initPicker();
            }
        };
        FormDateRangeInputComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            if (changes.options && this.picker && changes.options.currentValue) {
                Object.keys(changes.options.currentValue).forEach(function (opt) {
                    _this.picker.set(opt, changes.options.currentValue[opt]);
                });
            }
        };
        FormDateRangeInputComponent.prototype.ngOnDestroy = function () {
            if (this.picker) {
                this.picker.destroy();
            }
        };
        FormDateRangeInputComponent.prototype.initPicker = function () {
            if (this.defaultOptions) {
                this.options = __assign({}, overridableOptions$1, this.defaultOptions, this.options, { mode: 'range', clickOpens: false });
            }
            else {
                this.options = __assign({}, overridableOptions$1, this.options, { mode: 'range', clickOpens: false });
            }
            this.picker = flatpickrFunc$1(this.input.nativeElement, this.options);
            if (this.value) {
                this.picker.setDate(this.value);
            }
        };
        FormDateRangeInputComponent.prototype.isReadonly = function () {
            return this.readonly !== undefined;
        };
        FormDateRangeInputComponent.prototype.updateValue = function (value) {
            this.value = value;
            this.updateTimeDisplay(value);
            this.checkValue(value);
            this.onChange(value);
        };
        FormDateRangeInputComponent.prototype.checkValue = function (value) {
            if (value && value.length) {
                this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
            }
            else {
                this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
            }
        };
        FormDateRangeInputComponent.prototype.isLabelTemplate = function () {
            return this.label instanceof core.TemplateRef;
        };
        FormDateRangeInputComponent.prototype.writeValue = function (value) {
            this.value = value;
            this.updateTimeDisplay(value);
        };
        FormDateRangeInputComponent.prototype.updateTimeDisplay = function (value) {
            if (isAbsolute(value)) {
                this.renderer.setProperty(this.input.nativeElement, 'value', '');
                if (this.viewInit && !this.picker) {
                    this.initPicker();
                }
                else if (this.picker) {
                    this.picker.setDate(value);
                }
            }
            if (isRelative(value)) {
                var info1 = getRelativeInfo(value[0], this.timeInputOptions.units);
                var info2 = getRelativeInfo(value[1], this.timeInputOptions.units);
                this.displayValue = info1.displayText + (info2.count ? ' - ' + info2.displayText : '');
                this.renderer.setProperty(this.input.nativeElement, 'value', this.displayValue);
            }
        };
        FormDateRangeInputComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        FormDateRangeInputComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        FormDateRangeInputComponent.prototype.setDisabledState = function (isDisabled) {
            this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
        };
        var FormDateRangeInputComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateRangeInputComponent.prototype, "label", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], FormDateRangeInputComponent.prototype, "name", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateRangeInputComponent.prototype, "readonly", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateRangeInputComponent.prototype, "allowRelative", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], FormDateRangeInputComponent.prototype, "presets", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateRangeInputComponent.prototype, "startLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateRangeInputComponent.prototype, "endLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateRangeInputComponent.prototype, "absoluteLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateRangeInputComponent.prototype, "relativeLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateRangeInputComponent.prototype, "presetsLabel", void 0);
        __decorate([
            core.ContentChildren(FormValidationMessageDirective),
            __metadata("design:type", core.QueryList)
        ], FormDateRangeInputComponent.prototype, "messages", void 0);
        __decorate([
            core.ViewChild('input', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], FormDateRangeInputComponent.prototype, "input", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], FormDateRangeInputComponent.prototype, "options", void 0);
        FormDateRangeInputComponent = FormDateRangeInputComponent_1 = __decorate([
            core.Component({
                selector: 'rb-form-date-range-input',
                template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <input [id]=\"id + 'input'\"\r\n         class=\"input with-icon\"\r\n         (blur)=\"onTouched()\"\r\n         [rbDropdown]=\"dropdown\"\r\n         [autoClose]=\"false\"\r\n         [hugContent]=\"true\"\r\n         [readonly]=\"isReadonly()\"\r\n         [value]=\"displayValue\"\r\n         #input>\r\n  <span class=\"input-icon rb-ic rb-ic-calendar\"></span>\r\n  <label class=\"label\" [for]=\"id + 'input'\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n\r\n<ng-template #dropdown>\r\n  <rb-date-range-picker [options]=\"options\"\r\n                        [name]=\"name\"\r\n                        [ngModel]=\"value\"\r\n                        (ngModelChange)=\"updateValue($event)\"\r\n                        [allowRelative]=\"allowRelative\"\r\n                        [startLabel]=\"startLabel\"\r\n                        [endLabel]=\"endLabel\"\r\n                        [absoluteLabel]=\"absoluteLabel\"\r\n                        [relativeLabel]=\"relativeLabel\"\r\n                        [presetsLabel]=\"presetsLabel\"\r\n                        [presets]=\"presets\"\r\n  ></rb-date-range-picker>\r\n</ng-template>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return FormDateRangeInputComponent_1; }), multi: true }]
            }),
            __param(2, core.Optional()), __param(2, core.Inject(FLATPICKR_DEFAULT_OPTIONS)),
            __param(3, core.Optional()), __param(3, core.Inject(TIME_INPUT_OPTIONS)),
            __metadata("design:paramtypes", [core.Renderer2,
                core.ElementRef, Object, Object])
        ], FormDateRangeInputComponent);
        return FormDateRangeInputComponent;
    }());

    var flatpickrFunc$2 = flatpickrImport; // workaround for rollup and tests
    var overridableOptions$2 = {
        time_24hr: true,
    };
    var enforcedOptions = {
        inline: true,
        mode: 'single'
    };
    var DateRangePickerComponent = /** @class */ (function () {
        function DateRangePickerComponent(renderer, elementRef, defaultOptions) {
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.defaultOptions = defaultOptions;
            this.allowRelative = false;
            this.presets = [];
            this.startLabel = 'Start';
            this.endLabel = 'End';
            this.absoluteLabel = 'Absolute';
            this.relativeLabel = 'Relative';
            this.presetsLabel = 'Presets';
            this.tab = 'absolute';
            this.mode = 'absolute';
            /**
             * Options for Flatpickr
             * @see https://flatpickr.js.org/options/
             */
            this.options = {};
            this.onChange = emptyFunction;
            this.onTouched = emptyFunction;
            this.absoluteValue = null;
            this.initialTabChange = true;
            this.relativeValue = null;
            this.lastModified = null;
        }
        DateRangePickerComponent_1 = DateRangePickerComponent;
        DateRangePickerComponent.prototype.ngOnInit = function () {
            if (this.defaultOptions) {
                this.options = __assign({}, overridableOptions$2, this.defaultOptions, this.options, enforcedOptions);
            }
            else {
                this.options = __assign({}, overridableOptions$2, this.options, enforcedOptions);
            }
        };
        DateRangePickerComponent.prototype.ngOnDestroy = function () {
            if (this.pickerStart) {
                this.pickerStart.destroy();
            }
            if (this.pickerEnd) {
                this.pickerEnd.destroy();
            }
        };
        Object.defineProperty(DateRangePickerComponent.prototype, "initStartDateElement", {
            set: function (el) {
                var _this = this;
                if (!el || el.nativeElement._flatpickr) {
                    return;
                }
                var startOptions = __assign({}, this.options, { onValueUpdate: function (selectedDates) {
                        var start = toISOString(selectedDates[0]);
                        _this.pickerEnd.set('minDate', selectedDates[0]);
                        var end = toISOString(_this.pickerEnd.selectedDates[0]);
                        _this.updateAbsoluteValueFromPicker([start, end]);
                    } });
                this.pickerStart = flatpickrFunc$2(el.nativeElement, startOptions);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateRangePickerComponent.prototype, "initEndDateElement", {
            set: function (el) {
                var _this = this;
                if (!el || el.nativeElement._flatpickr) {
                    return;
                }
                var endOptions = __assign({}, this.options, { onValueUpdate: function (selectedDates) {
                        var start = toISOString(_this.pickerStart.selectedDates[0]);
                        var end = toISOString(selectedDates[0]);
                        _this.updateAbsoluteValueFromPicker([start, end]);
                    } });
                this.pickerEnd = flatpickrFunc$2(el.nativeElement, endOptions);
                this.updatePicker();
            },
            enumerable: true,
            configurable: true
        });
        DateRangePickerComponent.prototype.tabChanged = function (tabId) {
            if (this.initialTabChange || this.tab === tabId) {
                this.initialTabChange = false;
                return;
            }
            this.tab = tabId;
            if (tabId === 'absolute') {
                this.mode = 'absolute';
                this.notifyChange(this.absoluteValue);
            }
            if (tabId === 'relative') {
                this.mode = 'relative';
                this.notifyChange(this.relativeValue);
            }
        };
        DateRangePickerComponent.prototype.updateAbsoluteValueFromPicker = function (value) {
            if (this.tab !== 'absolute'
                || this.absoluteValue && this.absoluteValue[0] === value[0] && this.absoluteValue[1] === value[1]) {
                return;
            }
            this.absoluteValue = value;
            this.relativeValue = this.getRelativeFromAbsolute(value);
            this.notifyChange(value);
        };
        DateRangePickerComponent.prototype.updateRelativeValue = function (value, index) {
            if (index === 0) {
                this.relativeValue = [value, this.relativeValue[1]];
            }
            if (index === 1) {
                this.relativeValue = [this.relativeValue[0], value];
            }
            this.absoluteValue = getAbsoluteFromRelative(this.relativeValue);
            this.updatePicker();
            this.notifyChange(this.relativeValue);
        };
        DateRangePickerComponent.prototype.notifyChange = function (value) {
            if (value === this.lastModified || isEqual(value, this.lastModified)) {
                return;
            }
            this.lastModified = value;
            this.onChange(value);
        };
        DateRangePickerComponent.prototype.writeValue = function (value) {
            if (this.allowRelative && isRelative(value)) {
                this.mode = 'relative';
                this.tab = 'relative';
                this.relativeValue = value;
                this.absoluteValue = getAbsoluteFromRelative(this.relativeValue);
                if (this.findPreset(this.relativeValue)) {
                    this.tab = 'preset';
                }
            }
            else if (isAbsolute(value)) {
                this.mode = 'absolute';
                this.tab = 'absolute';
                this.relativeValue = this.getRelativeFromAbsolute(value);
                this.absoluteValue = value;
                if (this.findPreset(this.absoluteValue)) {
                    this.tab = 'preset';
                }
            }
            this.lastModified = value;
            this.updatePicker();
        };
        DateRangePickerComponent.prototype.updatePicker = function () {
            var value = this.absoluteValue;
            if (!value) {
                return;
            }
            if (this.pickerStart && this.pickerStart.config) {
                this.pickerStart.setDate(value[0]);
            }
            if (this.pickerEnd && this.pickerEnd.config) {
                this.pickerEnd.setDate(value[1]);
                this.pickerEnd.set('minDate', value[0]);
            }
        };
        DateRangePickerComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        DateRangePickerComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        DateRangePickerComponent.prototype.setDisabledState = function (isDisabled) {
            // this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
        };
        DateRangePickerComponent.prototype.findPreset = function (value) {
            if (!this.presets) {
                return null;
            }
            if (isAbsolute(value)) {
                return this.presets.filter(function (p) { return p.absoluteRange; }).find(function (p) { return isEqual(p.absoluteRange, value); });
            }
            else if (isRelative(value)) {
                return this.presets.filter(function (p) { return p.relativeRange; }).find(function (p) { return isEqual(p.relativeRange, value); });
            }
        };
        DateRangePickerComponent.prototype.isPreset = function (p) {
            return p.absoluteRange && this.absoluteValue && isEqual(this.absoluteValue, p.absoluteRange)
                || p.relativeRange && this.relativeValue && isEqual(this.relativeValue, p.relativeRange);
        };
        DateRangePickerComponent.prototype.setPreset = function (preset) {
            if (preset.relativeRange) {
                this.relativeValue = preset.relativeRange;
                this.absoluteValue = getAbsoluteFromRelative(this.relativeValue);
                // this.tab = 'relative';
                this.updatePicker();
                this.notifyChange(this.relativeValue);
            }
            if (preset.absoluteRange) {
                this.absoluteValue = preset.absoluteRange;
                this.relativeValue = this.getRelativeFromAbsolute(this.absoluteValue);
                // this.tab = 'absolute';
                this.updatePicker();
                this.notifyChange(this.absoluteValue);
            }
        };
        DateRangePickerComponent.prototype.getRelativeFromAbsolute = function (value, byDay) {
            if (byDay === void 0) { byDay = false; }
            var hf = this.options.enableTime && !byDay ? 60 * 60 * 1000 : 24 * 60 * 60 * 1000;
            var now = Math.floor(new Date().getTime() / hf) * hf;
            var start = Math.floor(new Date(value[0]).getTime() / hf) * hf;
            var end = Math.floor(new Date(value[1]).getTime() / hf) * hf;
            if (!byDay && Math.abs((start - now) / hf) > 48) {
                return this.getRelativeFromAbsolute(value, true);
            }
            return [start - now, end - now];
        };
        var DateRangePickerComponent_1;
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DateRangePickerComponent.prototype, "name", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DateRangePickerComponent.prototype, "readonly", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DateRangePickerComponent.prototype, "allowRelative", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], DateRangePickerComponent.prototype, "presets", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DateRangePickerComponent.prototype, "startLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DateRangePickerComponent.prototype, "endLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DateRangePickerComponent.prototype, "absoluteLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DateRangePickerComponent.prototype, "relativeLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DateRangePickerComponent.prototype, "presetsLabel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DateRangePickerComponent.prototype, "options", void 0);
        __decorate([
            core.ViewChild('startDate', { static: false }),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DateRangePickerComponent.prototype, "initStartDateElement", null);
        __decorate([
            core.ViewChild('endDate', { static: false }),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DateRangePickerComponent.prototype, "initEndDateElement", null);
        DateRangePickerComponent = DateRangePickerComponent_1 = __decorate([
            core.Component({
                selector: 'rb-date-range-picker',
                template: "<rb-tab-panel [renderHiddenTabs]=\"true\" (tabChanged)=\"tabChanged($event)\" [tab]=\"tab\">\r\n  <div *rbTabPanelItem=\"absoluteLabel; id: 'absolute'\" class=\"picker-calendars\">\r\n    <div class=\"startDate\" #startDate></div>\r\n    <div class=\"endDate\" #endDate></div>\r\n  </div>\r\n  <ng-container *ngIf=\"allowRelative\">\r\n    <div *rbTabPanelItem=\"relativeLabel; id: 'relative'\" class=\"picker-relative\">\r\n      <ng-container *ngIf=\"relativeValue\">\r\n        <rb-form-relative-time-input [label]=\"startLabel\" [ngModel]=\"relativeValue[0]\"\r\n                                     (ngModelChange)=\"updateRelativeValue($event, 0)\"></rb-form-relative-time-input>\r\n        <rb-form-relative-time-input [label]=\"endLabel\" [ngModel]=\"relativeValue[1]\"\r\n                                     (ngModelChange)=\"updateRelativeValue($event, 1)\"></rb-form-relative-time-input>\r\n      </ng-container>\r\n\r\n    </div>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"presets?.length\">\r\n    <div *rbTabPanelItem=\"presetsLabel; id: 'preset'\">\r\n      <div *ngFor=\"let p of presets\">\r\n        <ng-container *ngIf=\"allowRelative && p.relativeRange || p.absoluteRange\">\r\n          <a href=\"javascript:\" class=\"rb-dropdown-item\" [class.active]=\"isPreset(p)\" (click)=\"setPreset(p)\">{{p.label}}</a>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</rb-tab-panel>\r\n",
                providers: [{ provide: forms.NG_VALUE_ACCESSOR, useExisting: core.forwardRef(function () { return DateRangePickerComponent_1; }), multi: true }]
            }),
            __param(2, core.Optional()), __param(2, core.Inject(FLATPICKR_DEFAULT_OPTIONS)),
            __metadata("design:paramtypes", [core.Renderer2,
                core.ElementRef, Object])
        ], DateRangePickerComponent);
        return DateRangePickerComponent;
    }());
    function toISOString(data) {
        if (typeof data === 'string' || typeof data === 'number') {
            return new Date(data).toISOString();
        }
        else if (data instanceof Date) {
            return data.toISOString();
        }
        return '';
    }
    function getAbsoluteFromRelative(value) {
        var now = new Date().getTime();
        var start = toISOString(now + value[0]);
        var end = toISOString(now + value[1]);
        return [start, end];
    }
    function isEqual(value1, value2) {
        return value1 === value2 || value1[0] === value2[0] && value1[1] === value2[1];
    }

    var FormDateFieldsModule = /** @class */ (function () {
        function FormDateFieldsModule() {
        }
        FormDateFieldsModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    IconModule,
                    DropdownModule,
                    FormFieldsModule,
                    TabPanelModule
                ],
                declarations: [
                    FormDateInputComponent,
                    FormDateRangeInputComponent,
                    DateRangePickerComponent,
                    RelativeTimeInputComponent
                ],
                exports: [
                    FormDateInputComponent,
                    FormDateRangeInputComponent,
                    DateRangePickerComponent,
                    RelativeTimeInputComponent
                ]
            })
        ], FormDateFieldsModule);
        return FormDateFieldsModule;
    }());

    var ProgressIndicatorComponent = /** @class */ (function () {
        function ProgressIndicatorComponent() {
            this.total = Infinity;
            this.current = Infinity;
        }
        ProgressIndicatorComponent.prototype.ngOnInit = function () {
        };
        Object.defineProperty(ProgressIndicatorComponent.prototype, "percent", {
            get: function () {
                return this.total > 0 && this.total !== Infinity ? this.current / this.total * 100 : 100;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressIndicatorComponent.prototype, "isDeterminate", {
            get: function () {
                return this.total !== Infinity;
            },
            enumerable: true,
            configurable: true
        });
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], ProgressIndicatorComponent.prototype, "total", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], ProgressIndicatorComponent.prototype, "current", void 0);
        ProgressIndicatorComponent = __decorate([
            core.Component({
                selector: 'rb-progress-indicator',
                template: "<div class=\"progress-container\" [class.noanim]=\"isDeterminate\">\n  <div class=\"progress-current\" [style.width]=\"percent + '%'\">\n    <div class=\"progress-gradient\"></div>\n  </div>\n</div>\n"
            }),
            __metadata("design:paramtypes", [])
        ], ProgressIndicatorComponent);
        return ProgressIndicatorComponent;
    }());

    var ProgressIndicatorModule = /** @class */ (function () {
        function ProgressIndicatorModule() {
        }
        ProgressIndicatorModule = __decorate([
            core.NgModule({
                declarations: [ProgressIndicatorComponent],
                exports: [ProgressIndicatorComponent],
                imports: [
                    common.CommonModule
                ]
            })
        ], ProgressIndicatorModule);
        return ProgressIndicatorModule;
    }());

    var RbUiComponentsModule = /** @class */ (function () {
        function RbUiComponentsModule() {
        }
        RbUiComponentsModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    FullHeaderModule,
                    IconModule,
                    PopoverModule,
                    FooterNavModule,
                    DropdownModule,
                    LanguageSelectorModule,
                    LoadingSpinnerModule,
                    BreadcrumbsModule,
                    FormFieldsModule,
                    ModalModule,
                    TabPanelModule,
                    NavigationModule,
                    SearchResultModule,
                    CalloutModule,
                    DetailsToggleModule,
                    TeaserPanelModule,
                    BoardItemModule,
                    LoadingModule,
                    AccordionModule,
                    FormDateFieldsModule,
                    ProgressIndicatorModule
                ],
                exports: [
                    FullHeaderModule,
                    IconModule,
                    PopoverModule,
                    FooterNavModule,
                    DropdownModule,
                    LanguageSelectorModule,
                    LoadingSpinnerModule,
                    BreadcrumbsModule,
                    FormFieldsModule,
                    ModalModule,
                    TabPanelModule,
                    NavigationModule,
                    SearchResultModule,
                    CalloutModule,
                    DetailsToggleModule,
                    TeaserPanelModule,
                    BoardItemModule,
                    LoadingModule,
                    AccordionModule,
                    FormDateFieldsModule,
                    ProgressIndicatorModule
                ]
            })
        ], RbUiComponentsModule);
        return RbUiComponentsModule;
    }());

    exports.AccordionBodyComponent = AccordionBodyComponent;
    exports.AccordionComponent = AccordionComponent;
    exports.AccordionModule = AccordionModule;
    exports.AccordionService = AccordionService;
    exports.AccordionTitleComponent = AccordionTitleComponent;
    exports.ActionNavItemsDirective = ActionNavItemsDirective;
    exports.AlertComponent = AlertComponent;
    exports.BoardItemBodyDirective = BoardItemBodyDirective;
    exports.BoardItemComponent = BoardItemComponent;
    exports.BoardItemCountDirective = BoardItemCountDirective;
    exports.BoardItemIconDirective = BoardItemIconDirective;
    exports.BoardItemModule = BoardItemModule;
    exports.BreadcrumbsComponent = BreadcrumbsComponent;
    exports.BreadcrumbsModule = BreadcrumbsModule;
    exports.BreadcrumbsService = BreadcrumbsService;
    exports.CUSTOM_VALUE_CONVERTER = CUSTOM_VALUE_CONVERTER;
    exports.CalloutComponent = CalloutComponent;
    exports.CalloutModule = CalloutModule;
    exports.DEFAULT_ERROR_FORMATTER = DEFAULT_ERROR_FORMATTER;
    exports.DateRangePickerComponent = DateRangePickerComponent;
    exports.DefaultErrorFormatter = DefaultErrorFormatter;
    exports.DetailedError = DetailedError;
    exports.DetailsToggleDirective = DetailsToggleDirective;
    exports.DetailsToggleModule = DetailsToggleModule;
    exports.DialogComponent = DialogComponent;
    exports.DropdownComponent = DropdownComponent;
    exports.DropdownDirective = DropdownDirective;
    exports.DropdownModule = DropdownModule;
    exports.ERROR_FORMATTER = ERROR_FORMATTER;
    exports.ErrorFormatComponent = ErrorFormatComponent;
    exports.ErrorFormatPipe = ErrorFormatPipe;
    exports.FLATPICKR_DEFAULT_OPTIONS = FLATPICKR_DEFAULT_OPTIONS;
    exports.FORM_SELECT_SELECTOR = FORM_SELECT_SELECTOR;
    exports.FooterNavComponent = FooterNavComponent;
    exports.FooterNavModule = FooterNavModule;
    exports.FormCheckboxComponent = FormCheckboxComponent;
    exports.FormCheckboxRequiredValidatorDirective = FormCheckboxRequiredValidatorDirective;
    exports.FormChipsInputComponent = FormChipsInputComponent;
    exports.FormChipsInputPatternValidatorDirective = FormChipsInputPatternValidatorDirective;
    exports.FormCustomSelectComponent = FormCustomSelectComponent;
    exports.FormDateFieldsModule = FormDateFieldsModule;
    exports.FormDateInputComponent = FormDateInputComponent;
    exports.FormDateRangeInputComponent = FormDateRangeInputComponent;
    exports.FormErrorsComponent = FormErrorsComponent;
    exports.FormFieldsModule = FormFieldsModule;
    exports.FormFileComponent = FormFileComponent;
    exports.FormFileValidatorDirective = FormFileValidatorDirective;
    exports.FormInputAutocompleteDirective = FormInputAutocompleteDirective;
    exports.FormInputAutocompleteListComponent = FormInputAutocompleteListComponent;
    exports.FormInputComponent = FormInputComponent;
    exports.FormMultiCheckboxComponent = FormMultiCheckboxComponent;
    exports.FormMultiSelectComponent = FormMultiSelectComponent;
    exports.FormNumberValidatorDirective = FormNumberValidatorDirective;
    exports.FormRadioComponent = FormRadioComponent;
    exports.FormSelectComponent = FormSelectComponent;
    exports.FormSelectOptionComponent = FormSelectOptionComponent;
    exports.FormTextareaComponent = FormTextareaComponent;
    exports.FormValidationMessageDirective = FormValidationMessageDirective;
    exports.FullHeaderComponent = FullHeaderComponent;
    exports.FullHeaderModule = FullHeaderModule;
    exports.IconComponent = IconComponent;
    exports.IconModule = IconModule;
    exports.JsonConverterDirective = JsonConverterDirective;
    exports.LanguageSelectorComponent = LanguageSelectorComponent;
    exports.LanguageSelectorModule = LanguageSelectorModule;
    exports.LoadingDirective = LoadingDirective;
    exports.LoadingEntity = LoadingEntity;
    exports.LoadingLinkDirective = LoadingLinkDirective;
    exports.LoadingModule = LoadingModule;
    exports.LoadingSpinnerComponent = LoadingSpinnerComponent;
    exports.LoadingSpinnerModule = LoadingSpinnerModule;
    exports.LoadingStatusComponent = LoadingStatusComponent;
    exports.LogoHeaderDirective = LogoHeaderDirective;
    exports.MainNavItemsDirective = MainNavItemsDirective;
    exports.MetaNavItemsDirective = MetaNavItemsDirective;
    exports.ModalComponent = ModalComponent;
    exports.ModalDirective = ModalDirective;
    exports.ModalModule = ModalModule;
    exports.ModalService = ModalService;
    exports.MultiSelectOptionDirective = MultiSelectOptionDirective;
    exports.MultiSelectTitleDirective = MultiSelectTitleDirective;
    exports.NavigationComponent = NavigationComponent;
    exports.NavigationModule = NavigationModule;
    exports.NumberConverterDirective = NumberConverterDirective;
    exports.PopoverComponent = PopoverComponent;
    exports.PopoverDirective = PopoverDirective;
    exports.PopoverModule = PopoverModule;
    exports.ProgressIndicatorComponent = ProgressIndicatorComponent;
    exports.ProgressIndicatorModule = ProgressIndicatorModule;
    exports.RbUiComponentsModule = RbUiComponentsModule;
    exports.RelativeTimeInputComponent = RelativeTimeInputComponent;
    exports.SearchResultItemComponent = SearchResultItemComponent;
    exports.SearchResultModule = SearchResultModule;
    exports.SubBrandHeaderDirective = SubBrandHeaderDirective;
    exports.SubNavItemsDirective = SubNavItemsDirective;
    exports.TAB_PANEL_RESOLVER = TAB_PANEL_RESOLVER;
    exports.TIME_INPUT_OPTIONS = TIME_INPUT_OPTIONS;
    exports.TabPanelComponent = TabPanelComponent;
    exports.TabPanelItemDirective = TabPanelItemDirective;
    exports.TabPanelModule = TabPanelModule;
    exports.TabPanelRouterOutletDirective = TabPanelRouterOutletDirective;
    exports.TabPanelTitleDirective = TabPanelTitleDirective;
    exports.TeaserPanelComponent = TeaserPanelComponent;
    exports.TeaserPanelItemComponent = TeaserPanelItemComponent;
    exports.TeaserPanelModule = TeaserPanelModule;
    exports.TooltipDirective = TooltipDirective;
    exports.customSelectSelectorFactory = customSelectSelectorFactory;
    exports.defaultTimeInputOptions = defaultTimeInputOptions;
    exports.emptyFunction = emptyFunction$1;
    exports.getRelativeInfo = getRelativeInfo;
    exports.isAbsolute = isAbsolute;
    exports.isRelative = isRelative;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=inst-iot-bosch-angular-ui-components.umd.js.map
