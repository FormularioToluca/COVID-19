import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, HostListener, Input, ViewContainerRef } from '@angular/core';
import { PopoverComponent } from './popover.component';
var PopoverDirective = /** @class */ (function () {
    function PopoverDirective(factoryResolver, viewContainerRef) {
        this.factoryResolver = factoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.position = 'bottom';
        this.componentRef = null;
        this.closeSub = null;
    }
    PopoverDirective.prototype.ngOnDestroy = function () {
        this.closePopOver();
    };
    Object.defineProperty(PopoverDirective.prototype, "template", {
        set: function (tpl) {
            this.content = tpl;
        },
        enumerable: true,
        configurable: true
    });
    PopoverDirective.prototype.onClick = function (e) {
        e.preventDefault();
        this.openPopOver();
    };
    PopoverDirective.prototype.openPopOver = function () {
        var _this = this;
        if (this.componentRef) {
            this.closePopOver();
            return;
        }
        var componentFactory = this.factoryResolver.resolveComponentFactory(PopoverComponent);
        this.componentRef = this.viewContainerRef.createComponent(componentFactory);
        this.componentRef.instance.anchor = this.anchor || this.viewContainerRef.element;
        this.componentRef.instance.content = this.content;
        this.componentRef.instance.primaryPos = this.position;
        this.closeSub = this.componentRef.instance.close.subscribe(function () {
            _this.closePopOver();
        });
        this.viewContainerRef.element.nativeElement.classList.add('open');
    };
    PopoverDirective.prototype.closePopOver = function () {
        if (this.componentRef) {
            if (this.closeSub) {
                this.closeSub.unsubscribe();
            }
            this.viewContainerRef.element.nativeElement.classList.remove('open');
            var viewIndex = this.viewContainerRef.indexOf(this.componentRef.hostView);
            if (viewIndex !== -1) {
                this.viewContainerRef.remove(viewIndex);
            }
            this.componentRef = null;
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], PopoverDirective.prototype, "position", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], PopoverDirective.prototype, "anchor", void 0);
    tslib_1.__decorate([
        Input('rbPopover'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PopoverDirective.prototype, "template", null);
    tslib_1.__decorate([
        HostListener('click', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [MouseEvent]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PopoverDirective.prototype, "onClick", null);
    PopoverDirective = tslib_1.__decorate([
        Directive({
            selector: '[rbPopover]',
            exportAs: 'rbPopover'
        }),
        tslib_1.__metadata("design:paramtypes", [ComponentFactoryResolver,
            ViewContainerRef])
    ], PopoverDirective);
    return PopoverDirective;
}());
export { PopoverDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXRvbXMvcG9wb3Zlci9wb3BvdmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLHdCQUF3QixFQUFnQixTQUFTLEVBQWMsWUFBWSxFQUFFLEtBQUssRUFDbEYsZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBTXZEO0lBV0UsMEJBQW9CLGVBQXlDLEVBQ3pDLGdCQUFrQztRQURsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBMEI7UUFDekMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVY3QyxhQUFRLEdBQXdDLFFBQVEsQ0FBQztRQUtsRSxpQkFBWSxHQUFtQyxJQUFJLENBQUM7UUFFcEQsYUFBUSxHQUFHLElBQUksQ0FBQztJQUloQixDQUFDO0lBR0Qsc0NBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRW1CLHNCQUFJLHNDQUFRO2FBQVosVUFBYSxHQUE4QjtZQUM3RCxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztRQUNyQixDQUFDOzs7T0FBQTtJQUdELGtDQUFPLEdBQVAsVUFBUSxDQUFhO1FBQ25CLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELHNDQUFXLEdBQVg7UUFBQSxpQkFnQkM7UUFmQyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3BCLE9BQU87U0FDUjtRQUNELElBQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyx1QkFBdUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXhGLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7UUFDakYsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDbEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDdEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO1lBQ3pELEtBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFcEUsQ0FBQztJQUVELHVDQUFZLEdBQVo7UUFDRSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQzdCO1lBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyRSxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDNUUsSUFBSSxTQUFTLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDekM7WUFDRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztTQUMxQjtJQUNILENBQUM7SUExRFE7UUFBUixLQUFLLEVBQUU7O3NEQUEwRDtJQUN6RDtRQUFSLEtBQUssRUFBRTs7b0RBQWtDO0lBaUJ0QjtRQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDOzs7b0RBRWxCO0lBR0Q7UUFEQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7O2lEQUN2QixVQUFVOzttREFHcEI7SUE1QlUsZ0JBQWdCO1FBSjVCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFFBQVEsRUFBRSxXQUFXO1NBQ3RCLENBQUM7aURBWXFDLHdCQUF3QjtZQUN2QixnQkFBZ0I7T0FaM0MsZ0JBQWdCLENBOEQ1QjtJQUFELHVCQUFDO0NBQUEsQUE5REQsSUE4REM7U0E5RFksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkRlc3Ryb3ksIFRlbXBsYXRlUmVmLFxyXG4gIFZpZXdDb250YWluZXJSZWZcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUG9wb3ZlckNvbXBvbmVudCB9IGZyb20gJy4vcG9wb3Zlci5jb21wb25lbnQnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbcmJQb3BvdmVyXScsXHJcbiAgZXhwb3J0QXM6ICdyYlBvcG92ZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb3BvdmVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuXHJcbiAgQElucHV0KCkgcG9zaXRpb246ICdib3R0b20nIHwgJ3RvcCcgfCAnbGVmdCcgfCAncmlnaHQnID0gJ2JvdHRvbSc7XHJcbiAgQElucHV0KCkgYW5jaG9yOiBFbGVtZW50UmVmIHwgSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGNvbnRlbnQ6IFRlbXBsYXRlUmVmPGFueT4gfCBzdHJpbmc7XHJcblxyXG4gIGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPFBvcG92ZXJDb21wb25lbnQ+ID0gbnVsbDtcclxuXHJcbiAgY2xvc2VTdWIgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZikge1xyXG4gIH1cclxuXHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5jbG9zZVBvcE92ZXIoKTtcclxuICB9XHJcblxyXG4gIEBJbnB1dCgncmJQb3BvdmVyJykgc2V0IHRlbXBsYXRlKHRwbDogVGVtcGxhdGVSZWY8YW55PiB8IHN0cmluZykge1xyXG4gICAgdGhpcy5jb250ZW50ID0gdHBsO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxyXG4gIG9uQ2xpY2soZTogTW91c2VFdmVudCkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdGhpcy5vcGVuUG9wT3ZlcigpO1xyXG4gIH1cclxuXHJcbiAgb3BlblBvcE92ZXIoKSB7XHJcbiAgICBpZiAodGhpcy5jb21wb25lbnRSZWYpIHtcclxuICAgICAgdGhpcy5jbG9zZVBvcE92ZXIoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMuZmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFBvcG92ZXJDb21wb25lbnQpO1xyXG5cclxuICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRGYWN0b3J5KTtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmFuY2hvciA9IHRoaXMuYW5jaG9yIHx8IHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50O1xyXG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuY29udGVudCA9IHRoaXMuY29udGVudDtcclxuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLnByaW1hcnlQb3MgPSB0aGlzLnBvc2l0aW9uO1xyXG4gICAgdGhpcy5jbG9zZVN1YiA9IHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmNsb3NlLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMuY2xvc2VQb3BPdmVyKCk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnb3BlbicpO1xyXG5cclxuICB9XHJcblxyXG4gIGNsb3NlUG9wT3ZlcigpIHtcclxuICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZikge1xyXG4gICAgICBpZiAodGhpcy5jbG9zZVN1Yikge1xyXG4gICAgICAgIHRoaXMuY2xvc2VTdWIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ29wZW4nKTtcclxuICAgICAgY29uc3Qgdmlld0luZGV4ID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmluZGV4T2YodGhpcy5jb21wb25lbnRSZWYuaG9zdFZpZXcpO1xyXG4gICAgICBpZiAodmlld0luZGV4ICE9PSAtMSkge1xyXG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5yZW1vdmUodmlld0luZGV4KTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=