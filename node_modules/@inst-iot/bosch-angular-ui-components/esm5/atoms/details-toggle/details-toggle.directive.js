import * as tslib_1 from "tslib";
import { Directive, EventEmitter, HostListener, Input, Output, ViewContainerRef } from '@angular/core';
/**
 * Can be toggled to provide a state
 * Usage with: rbDetailsToggle #triggerDetails="rbDetailsToggle"
 * Then check triggerDetails.open for the current state
 */
var DetailsToggleDirective = /** @class */ (function () {
    function DetailsToggleDirective(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
        this.isOpenChange = new EventEmitter();
        this.open = false;
    }
    Object.defineProperty(DetailsToggleDirective.prototype, "isOpen", {
        set: function (state) {
            if (state) {
                this.openDetails();
            }
            else {
                this.closeDetails();
            }
        },
        enumerable: true,
        configurable: true
    });
    DetailsToggleDirective.prototype.onClick = function (e) {
        e.preventDefault();
        if (this.open) {
            this.closeDetails();
            this.isOpenChange.next(this.open);
        }
        else {
            this.openDetails();
            this.isOpenChange.next(this.open);
        }
    };
    DetailsToggleDirective.prototype.openDetails = function () {
        this.open = true;
        this.viewContainerRef.element.nativeElement.classList.add('open');
    };
    DetailsToggleDirective.prototype.closeDetails = function () {
        this.open = false;
        this.viewContainerRef.element.nativeElement.classList.remove('open');
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], DetailsToggleDirective.prototype, "isOpenChange", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DetailsToggleDirective.prototype, "isOpen", null);
    tslib_1.__decorate([
        HostListener('click', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [MouseEvent]),
        tslib_1.__metadata("design:returntype", void 0)
    ], DetailsToggleDirective.prototype, "onClick", null);
    DetailsToggleDirective = tslib_1.__decorate([
        Directive({
            selector: '[rbDetailsToggle]',
            exportAs: 'rbDetailsToggle'
        }),
        tslib_1.__metadata("design:paramtypes", [ViewContainerRef])
    ], DetailsToggleDirective);
    return DetailsToggleDirective;
}());
export { DetailsToggleDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWlscy10b2dnbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImF0b21zL2RldGFpbHMtdG9nZ2xlL2RldGFpbHMtdG9nZ2xlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkc7Ozs7R0FJRztBQUtIO0lBTUUsZ0NBQW9CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBSjVDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUU5QyxTQUFJLEdBQUcsS0FBSyxDQUFDO0lBR3BCLENBQUM7SUFHUSxzQkFBSSwwQ0FBTTthQUFWLFVBQVcsS0FBYztZQUNoQyxJQUFJLEtBQUssRUFBRTtnQkFDVCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDcEI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO2FBQ3JCO1FBQ0gsQ0FBQzs7O09BQUE7SUFHRCx3Q0FBTyxHQUFQLFVBQVEsQ0FBYTtRQUNuQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDbkIsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQzthQUFNO1lBQ0wsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7SUFFRCw0Q0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFFakIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQsNkNBQVksR0FBWjtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBRWxCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQXRDUztRQUFULE1BQU0sRUFBRTs7Z0VBQTRDO0lBUTVDO1FBQVIsS0FBSyxFQUFFOzs7d0RBTVA7SUFHRDtRQURDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7aURBQ3ZCLFVBQVU7O3lEQVNwQjtJQTVCVSxzQkFBc0I7UUFKbEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixRQUFRLEVBQUUsaUJBQWlCO1NBQzVCLENBQUM7aURBT3NDLGdCQUFnQjtPQU4zQyxzQkFBc0IsQ0EwQ2xDO0lBQUQsNkJBQUM7Q0FBQSxBQTFDRCxJQTBDQztTQTFDWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQ2FuIGJlIHRvZ2dsZWQgdG8gcHJvdmlkZSBhIHN0YXRlXG4gKiBVc2FnZSB3aXRoOiByYkRldGFpbHNUb2dnbGUgI3RyaWdnZXJEZXRhaWxzPVwicmJEZXRhaWxzVG9nZ2xlXCJcbiAqIFRoZW4gY2hlY2sgdHJpZ2dlckRldGFpbHMub3BlbiBmb3IgdGhlIGN1cnJlbnQgc3RhdGVcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3JiRGV0YWlsc1RvZ2dsZV0nLFxuICBleHBvcnRBczogJ3JiRGV0YWlsc1RvZ2dsZSdcbn0pXG5leHBvcnQgY2xhc3MgRGV0YWlsc1RvZ2dsZURpcmVjdGl2ZSB7XG5cbiAgQE91dHB1dCgpIGlzT3BlbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBwdWJsaWMgb3BlbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZikge1xuICB9XG5cblxuICBASW5wdXQoKSBzZXQgaXNPcGVuKHN0YXRlOiBib29sZWFuKSB7XG4gICAgaWYgKHN0YXRlKSB7XG4gICAgICB0aGlzLm9wZW5EZXRhaWxzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2xvc2VEZXRhaWxzKCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBvbkNsaWNrKGU6IE1vdXNlRXZlbnQpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMub3Blbikge1xuICAgICAgdGhpcy5jbG9zZURldGFpbHMoKTtcbiAgICAgIHRoaXMuaXNPcGVuQ2hhbmdlLm5leHQodGhpcy5vcGVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGVuRGV0YWlscygpO1xuICAgICAgdGhpcy5pc09wZW5DaGFuZ2UubmV4dCh0aGlzLm9wZW4pO1xuICAgIH1cbiAgfVxuXG4gIG9wZW5EZXRhaWxzKCkge1xuICAgIHRoaXMub3BlbiA9IHRydWU7XG5cbiAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ29wZW4nKTtcbiAgfVxuXG4gIGNsb3NlRGV0YWlscygpIHtcbiAgICB0aGlzLm9wZW4gPSBmYWxzZTtcblxuICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnb3BlbicpO1xuICB9XG5cbn1cbiJdfQ==