import * as tslib_1 from "tslib";
import { Component, ContentChildren, ElementRef, forwardRef, Inject, Input, Optional, QueryList, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import * as flatpickrImport from 'flatpickr';
import { FormValidationMessageDirective } from '../../form-fields/form-validation-message.directive';
import { emptyFunction } from '../../form-fields/forms-util';
import { FLATPICKR_DEFAULT_OPTIONS } from '../form-date-input/form-date-input.component';
import { defaultTimeInputOptions, getRelativeInfo, isAbsolute, isRelative } from '../date-range-picker/date-range-picker.model';
import { TIME_INPUT_OPTIONS } from '../form-relative-time-input/relative-time-input.component';
var flatpickrFunc = flatpickrImport; // workaround for rollup and tests
var overridableOptions = {
    time_24hr: true
};
var FormDateRangeInputComponent = /** @class */ (function () {
    function FormDateRangeInputComponent(renderer, elementRef, defaultOptions, timeInputOptions) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.defaultOptions = defaultOptions;
        this.timeInputOptions = timeInputOptions;
        this.label = null;
        this.id = 'input.' + Math.random();
        this.allowRelative = false;
        this.presets = [];
        this.startLabel = 'Start';
        this.endLabel = 'End';
        this.absoluteLabel = 'Absolute';
        this.relativeLabel = 'Relative';
        this.presetsLabel = 'Presets';
        this.displayValue = '';
        /**
         * Options for Flatpickr
         * @see https://flatpickr.js.org/options/
         */
        this.options = {};
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
        this.viewInit = false;
        if (!timeInputOptions) {
            this.timeInputOptions = defaultTimeInputOptions;
        }
    }
    FormDateRangeInputComponent_1 = FormDateRangeInputComponent;
    FormDateRangeInputComponent.prototype.ngAfterViewInit = function () {
        this.viewInit = true;
        if (isAbsolute(this.value)) {
            this.initPicker();
        }
    };
    FormDateRangeInputComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.options && this.picker && changes.options.currentValue) {
            Object.keys(changes.options.currentValue).forEach(function (opt) {
                _this.picker.set(opt, changes.options.currentValue[opt]);
            });
        }
    };
    FormDateRangeInputComponent.prototype.ngOnDestroy = function () {
        if (this.picker) {
            this.picker.destroy();
        }
    };
    FormDateRangeInputComponent.prototype.initPicker = function () {
        if (this.defaultOptions) {
            this.options = tslib_1.__assign({}, overridableOptions, this.defaultOptions, this.options, { mode: 'range', clickOpens: false });
        }
        else {
            this.options = tslib_1.__assign({}, overridableOptions, this.options, { mode: 'range', clickOpens: false });
        }
        this.picker = flatpickrFunc(this.input.nativeElement, this.options);
        if (this.value) {
            this.picker.setDate(this.value);
        }
    };
    FormDateRangeInputComponent.prototype.isReadonly = function () {
        return this.readonly !== undefined;
    };
    FormDateRangeInputComponent.prototype.updateValue = function (value) {
        this.value = value;
        this.updateTimeDisplay(value);
        this.checkValue(value);
        this.onChange(value);
    };
    FormDateRangeInputComponent.prototype.checkValue = function (value) {
        if (value && value.length) {
            this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
        }
    };
    FormDateRangeInputComponent.prototype.isLabelTemplate = function () {
        return this.label instanceof TemplateRef;
    };
    FormDateRangeInputComponent.prototype.writeValue = function (value) {
        this.value = value;
        this.updateTimeDisplay(value);
    };
    FormDateRangeInputComponent.prototype.updateTimeDisplay = function (value) {
        if (isAbsolute(value)) {
            this.renderer.setProperty(this.input.nativeElement, 'value', '');
            if (this.viewInit && !this.picker) {
                this.initPicker();
            }
            else if (this.picker) {
                this.picker.setDate(value);
            }
        }
        if (isRelative(value)) {
            var info1 = getRelativeInfo(value[0], this.timeInputOptions.units);
            var info2 = getRelativeInfo(value[1], this.timeInputOptions.units);
            this.displayValue = info1.displayText + (info2.count ? ' - ' + info2.displayText : '');
            this.renderer.setProperty(this.input.nativeElement, 'value', this.displayValue);
        }
    };
    FormDateRangeInputComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    FormDateRangeInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    FormDateRangeInputComponent.prototype.setDisabledState = function (isDisabled) {
        this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
    };
    var FormDateRangeInputComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateRangeInputComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FormDateRangeInputComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateRangeInputComponent.prototype, "readonly", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateRangeInputComponent.prototype, "allowRelative", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], FormDateRangeInputComponent.prototype, "presets", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateRangeInputComponent.prototype, "startLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateRangeInputComponent.prototype, "endLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateRangeInputComponent.prototype, "absoluteLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateRangeInputComponent.prototype, "relativeLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateRangeInputComponent.prototype, "presetsLabel", void 0);
    tslib_1.__decorate([
        ContentChildren(FormValidationMessageDirective),
        tslib_1.__metadata("design:type", QueryList)
    ], FormDateRangeInputComponent.prototype, "messages", void 0);
    tslib_1.__decorate([
        ViewChild('input', { static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], FormDateRangeInputComponent.prototype, "input", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateRangeInputComponent.prototype, "options", void 0);
    FormDateRangeInputComponent = FormDateRangeInputComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'rb-form-date-range-input',
            template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <input [id]=\"id + 'input'\"\r\n         class=\"input with-icon\"\r\n         (blur)=\"onTouched()\"\r\n         [rbDropdown]=\"dropdown\"\r\n         [autoClose]=\"false\"\r\n         [hugContent]=\"true\"\r\n         [readonly]=\"isReadonly()\"\r\n         [value]=\"displayValue\"\r\n         #input>\r\n  <span class=\"input-icon rb-ic rb-ic-calendar\"></span>\r\n  <label class=\"label\" [for]=\"id + 'input'\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n\r\n<ng-template #dropdown>\r\n  <rb-date-range-picker [options]=\"options\"\r\n                        [name]=\"name\"\r\n                        [ngModel]=\"value\"\r\n                        (ngModelChange)=\"updateValue($event)\"\r\n                        [allowRelative]=\"allowRelative\"\r\n                        [startLabel]=\"startLabel\"\r\n                        [endLabel]=\"endLabel\"\r\n                        [absoluteLabel]=\"absoluteLabel\"\r\n                        [relativeLabel]=\"relativeLabel\"\r\n                        [presetsLabel]=\"presetsLabel\"\r\n                        [presets]=\"presets\"\r\n  ></rb-date-range-picker>\r\n</ng-template>\r\n",
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return FormDateRangeInputComponent_1; }), multi: true }]
        }),
        tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(FLATPICKR_DEFAULT_OPTIONS)),
        tslib_1.__param(3, Optional()), tslib_1.__param(3, Inject(TIME_INPUT_OPTIONS)),
        tslib_1.__metadata("design:paramtypes", [Renderer2,
            ElementRef, Object, Object])
    ], FormDateRangeInputComponent);
    return FormDateRangeInputComponent;
}());
export { FormDateRangeInputComponent };
//# sourceMappingURL=data:application/json;base64,