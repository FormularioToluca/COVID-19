import * as tslib_1 from "tslib";
import { Component, forwardRef, Inject, InjectionToken, Input, Optional, TemplateRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { defaultTimeInputOptions, getRelativeInfo } from '../date-range-picker/date-range-picker.model';
export var TIME_INPUT_OPTIONS = new InjectionToken('formRelativeInputTimeOptions');
var RelativeTimeInputComponent = /** @class */ (function () {
    function RelativeTimeInputComponent(options) {
        this.options = options;
        this.id = 'input.' + Math.random();
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
        this.disabled = false;
        this.operator = '-';
        this.count = '0';
        this.unit = 'ms';
        this.displayText = '';
        if (!options) {
            this.options = defaultTimeInputOptions;
        }
    }
    RelativeTimeInputComponent_1 = RelativeTimeInputComponent;
    RelativeTimeInputComponent.prototype.ngOnInit = function () {
        this.units = defaultTimeInputOptions.units;
    };
    RelativeTimeInputComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    RelativeTimeInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    RelativeTimeInputComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    RelativeTimeInputComponent.prototype.writeValue = function (obj) {
        var info = getRelativeInfo(obj, this.units);
        this.count = info.count.toString();
        this.operator = info.operator;
        this.unit = info.unit;
        this.displayText = info.displayText;
    };
    RelativeTimeInputComponent.prototype.getValue = function () {
        var count = parseInt(this.count, 10) * this.getDivisor();
        if (isNaN(count)) {
            return 0;
        }
        else {
            return this.operator === '-' ? count * -1 : count;
        }
    };
    RelativeTimeInputComponent.prototype.getDivisor = function () {
        var _this = this;
        return this.units.find(function (u) { return u.unit === _this.unit; }).value;
    };
    RelativeTimeInputComponent.prototype.notifyChange = function () {
        var value = this.getValue();
        this.onChange(value);
    };
    RelativeTimeInputComponent.prototype.updateUnit = function (unit) {
        var oldDivisor = this.getDivisor();
        this.unit = unit;
        var newDivisor = this.getDivisor();
        if (newDivisor > oldDivisor) {
            var baseValue = parseInt(this.count, 10) * oldDivisor;
            this.count = Math.ceil(baseValue / newDivisor).toString();
        }
        this.notifyChange();
    };
    RelativeTimeInputComponent.prototype.isLabelTemplate = function () {
        return this.label instanceof TemplateRef;
    };
    var RelativeTimeInputComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], RelativeTimeInputComponent.prototype, "label", void 0);
    RelativeTimeInputComponent = RelativeTimeInputComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'rb-form-relative-time-input',
            template: "<div class=\"rb-custom-input\">\r\n  <div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n    <div class=\"relative-time-form\">\r\n      <rb-form-select [(ngModel)]=\"operator\" (ngModelChange)=\"notifyChange()\" name=\"operator\" [disabled]=\"disabled\">\r\n        <option value=\"-\">-</option>\r\n        <option value=\"+\">+</option>\r\n      </rb-form-select>\r\n      <rb-form-input class=\"relative-time-form-number\" type=\"number\"\r\n                     [(ngModel)]=\"count\" (ngModelChange)=\"notifyChange()\" name=\"count\"\r\n                     pattern=\"^\\d+$\" required\r\n                     [disabled]=\"disabled\"></rb-form-input>\r\n      <rb-form-select class=\"relative-time-form-unit\" [disabled]=\"disabled\"\r\n                      [ngModel]=\"unit\"\r\n                      (ngModelChange)=\"updateUnit($event)\"\r\n                      name=\"unit\">\r\n        <option *ngFor=\"let u of units\" [value]=\"u.unit\">{{u.label}}</option>\r\n      </rb-form-select>\r\n    </div>\r\n\r\n    <label class=\"label\" [for]=\"id + 'input'\">\r\n      {{!isLabelTemplate()?label:''}}\r\n      <ng-container *ngIf=\"isLabelTemplate()\">\r\n        <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n      </ng-container>\r\n    </label>\r\n\r\n    <span class=\"input-background\"></span>\r\n\r\n  </div>\r\n</div>\r\n",
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return RelativeTimeInputComponent_1; }), multi: true }]
        }),
        tslib_1.__param(0, Inject(TIME_INPUT_OPTIONS)), tslib_1.__param(0, Optional()),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], RelativeTimeInputComponent);
    return RelativeTimeInputComponent;
}());
export { RelativeTimeInputComponent };
export function emptyFunction(_) {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpdmUtdGltZS1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXRvbXMvZm9ybS1kYXRlLWZpZWxkcy9mb3JtLXJlbGF0aXZlLXRpbWUtaW5wdXQvcmVsYXRpdmUtdGltZS1pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFVLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEgsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsZUFBZSxFQUdoQixNQUFNLDhDQUE4QyxDQUFDO0FBRXRELE1BQU0sQ0FBQyxJQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFtQiw4QkFBOEIsQ0FBQyxDQUFDO0FBT3ZHO0lBcUJFLG9DQUE0RCxPQUF5QjtRQUF6QixZQUFPLEdBQVAsT0FBTyxDQUFrQjtRQWpCckYsT0FBRSxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFOUIsYUFBUSxHQUFHLGFBQWEsQ0FBQztRQUN6QixjQUFTLEdBQUcsYUFBYSxDQUFDO1FBRTFCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFakIsYUFBUSxHQUFHLEdBQUcsQ0FBQztRQUVmLFVBQUssR0FBRyxHQUFHLENBQUM7UUFFWixTQUFJLEdBQUcsSUFBSSxDQUFDO1FBSVosZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFHZixJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osSUFBSSxDQUFDLE9BQU8sR0FBRyx1QkFBdUIsQ0FBQztTQUN4QztJQUNILENBQUM7bUNBekJVLDBCQUEwQjtJQTJCckMsNkNBQVEsR0FBUjtRQUNF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QixDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDO1NBQ2xILENBQUM7UUFzQmEsbUJBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQTs7T0FyQnhDLDBCQUEwQixDQXFGdEM7SUFBRCxpQ0FBQztDQUFBLEFBckZELElBcUZDO1NBckZZLDBCQUEwQjtBQXVGdkMsTUFBTSxVQUFVLGFBQWEsQ0FBQyxDQUFPO0FBQ3JDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIGZvcndhcmRSZWYsIEluamVjdCwgSW5qZWN0aW9uVG9rZW4sIElucHV0LCBPbkluaXQsIE9wdGlvbmFsLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7XHJcbiAgZGVmYXVsdFRpbWVJbnB1dE9wdGlvbnMsXHJcbiAgZ2V0UmVsYXRpdmVJbmZvLFxyXG4gIFRpbWVJbnB1dE9wdGlvbnMsXHJcbiAgVGltZUlucHV0T3B0aW9uc1VuaXRcclxufSBmcm9tICcuLi9kYXRlLXJhbmdlLXBpY2tlci9kYXRlLXJhbmdlLXBpY2tlci5tb2RlbCc7XHJcblxyXG5leHBvcnQgY29uc3QgVElNRV9JTlBVVF9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPFRpbWVJbnB1dE9wdGlvbnM+KCdmb3JtUmVsYXRpdmVJbnB1dFRpbWVPcHRpb25zJyk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3JiLWZvcm0tcmVsYXRpdmUtdGltZS1pbnB1dCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3JlbGF0aXZlLXRpbWUtaW5wdXQuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUiwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUmVsYXRpdmVUaW1lSW5wdXRDb21wb25lbnQpLCBtdWx0aTogdHJ1ZX1dLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVsYXRpdmVUaW1lSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuXHJcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gIGlkID0gJ2lucHV0LicgKyBNYXRoLnJhbmRvbSgpO1xyXG5cclxuICBvbkNoYW5nZSA9IGVtcHR5RnVuY3Rpb247XHJcbiAgb25Ub3VjaGVkID0gZW1wdHlGdW5jdGlvbjtcclxuXHJcbiAgZGlzYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgb3BlcmF0b3IgPSAnLSc7XHJcblxyXG4gIGNvdW50ID0gJzAnO1xyXG5cclxuICB1bml0ID0gJ21zJztcclxuXHJcbiAgdW5pdHM6IFRpbWVJbnB1dE9wdGlvbnNVbml0W107XHJcblxyXG4gIGRpc3BsYXlUZXh0ID0gJyc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoVElNRV9JTlBVVF9PUFRJT05TKSBAT3B0aW9uYWwoKSBwcml2YXRlIG9wdGlvbnM6IFRpbWVJbnB1dE9wdGlvbnMpIHtcclxuICAgIGlmICghb3B0aW9ucykge1xyXG4gICAgICB0aGlzLm9wdGlvbnMgPSBkZWZhdWx0VGltZUlucHV0T3B0aW9ucztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy51bml0cyA9IGRlZmF1bHRUaW1lSW5wdXRPcHRpb25zLnVuaXRzO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMub25Ub3VjaGVkID0gZm47XHJcbiAgfVxyXG5cclxuICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xyXG4gIH1cclxuXHJcbiAgd3JpdGVWYWx1ZShvYmo6IG51bWJlciB8IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgaW5mbyA9IGdldFJlbGF0aXZlSW5mbyhvYmosIHRoaXMudW5pdHMpO1xyXG4gICAgdGhpcy5jb3VudCA9IGluZm8uY291bnQudG9TdHJpbmcoKTtcclxuICAgIHRoaXMub3BlcmF0b3IgPSBpbmZvLm9wZXJhdG9yO1xyXG4gICAgdGhpcy51bml0ID0gaW5mby51bml0O1xyXG4gICAgdGhpcy5kaXNwbGF5VGV4dCA9IGluZm8uZGlzcGxheVRleHQ7XHJcbiAgfVxyXG5cclxuICBnZXRWYWx1ZSgpIHtcclxuICAgIGNvbnN0IGNvdW50ID0gcGFyc2VJbnQodGhpcy5jb3VudCwgMTApICogdGhpcy5nZXREaXZpc29yKCk7XHJcbiAgICBpZiAoaXNOYU4oY291bnQpKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMub3BlcmF0b3IgPT09ICctJyA/IGNvdW50ICogLTEgOiBjb3VudDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldERpdmlzb3IoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51bml0cy5maW5kKHUgPT4gdS51bml0ID09PSB0aGlzLnVuaXQpLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5Q2hhbmdlKCkge1xyXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlKCk7XHJcbiAgICB0aGlzLm9uQ2hhbmdlKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVVuaXQodW5pdDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBvbGREaXZpc29yID0gdGhpcy5nZXREaXZpc29yKCk7XHJcbiAgICB0aGlzLnVuaXQgPSB1bml0O1xyXG4gICAgY29uc3QgbmV3RGl2aXNvciA9IHRoaXMuZ2V0RGl2aXNvcigpO1xyXG4gICAgaWYgKG5ld0Rpdmlzb3IgPiBvbGREaXZpc29yKSB7XHJcbiAgICAgIGNvbnN0IGJhc2VWYWx1ZSA9IHBhcnNlSW50KHRoaXMuY291bnQsIDEwKSAqIG9sZERpdmlzb3I7XHJcbiAgICAgIHRoaXMuY291bnQgPSBNYXRoLmNlaWwoYmFzZVZhbHVlIC8gbmV3RGl2aXNvcikudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm5vdGlmeUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgaXNMYWJlbFRlbXBsYXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGFiZWwgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZjtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZW1wdHlGdW5jdGlvbihfPzogYW55KSB7XHJcbn1cclxuIl19