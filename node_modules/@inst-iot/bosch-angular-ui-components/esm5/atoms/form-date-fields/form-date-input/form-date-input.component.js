import * as tslib_1 from "tslib";
import { Component, ContentChildren, ElementRef, forwardRef, Inject, InjectionToken, Input, Optional, QueryList, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { FormValidationMessageDirective } from '../../form-fields/form-validation-message.directive';
import { emptyFunction } from '../../form-fields/forms-util';
import * as flatpickrImport from 'flatpickr';
var flatpickrFunc = flatpickrImport; // workaround for rollup and tests
export var FLATPICKR_DEFAULT_OPTIONS = new InjectionToken('flatpickrDefaultOptions');
var overridableOptions = {
    time_24hr: true
};
/**
 * Displays a input for flatpickr
 * The value, is a ISO Date String or an array of ISO Date Strings.
 */
var FormDateInputComponent = /** @class */ (function () {
    function FormDateInputComponent(renderer, elementRef, defaultOptions) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.defaultOptions = defaultOptions;
        this.label = null;
        this.type = 'text';
        this.id = 'input.' + Math.random();
        /**
         * Options for Flatpickr
         * @see https://flatpickr.js.org/options/
         */
        this.options = {};
        /**
         * Given, when this is the start date.
         * Start input is responsible for options
         */
        this.rangeEnd = null;
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
    }
    FormDateInputComponent_1 = FormDateInputComponent;
    FormDateInputComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.defaultOptions) {
            this.options = tslib_1.__assign({}, overridableOptions, this.defaultOptions, this.options);
        }
        else {
            this.options = tslib_1.__assign({}, overridableOptions, this.options);
        }
        this.options.onValueUpdate = function (selectedDates, dateString) {
            _this.updateValue(selectedDates);
        };
        if (this.rangeEnd) {
            this.rangeEnd.options = tslib_1.__assign({}, this.options);
        }
        this.picker = flatpickrFunc(this.input.nativeElement, this.options);
    };
    FormDateInputComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (changes.options && this.picker && changes.options.currentValue) {
            Object.keys(changes.options.currentValue).forEach(function (opt) {
                _this.picker.set(opt, changes.options.currentValue[opt]);
            });
        }
    };
    FormDateInputComponent.prototype.ngOnDestroy = function () {
        if (this.picker) {
            this.picker.destroy();
        }
    };
    FormDateInputComponent.prototype.isReadonly = function () {
        return this.readonly !== undefined;
    };
    FormDateInputComponent.prototype.updateValue = function (value) {
        if (this.picker.config.mode === 'single' && value && value.length) {
            value = value[0].toISOString();
        }
        if (['range', 'multiple'].indexOf(this.picker.config.mode) !== -1 && value && value.length) {
            value = value.map(function (v) { return v.toISOString(); });
        }
        this.checkValue(value);
        this.onChange(value);
        this.updateEndRange();
    };
    FormDateInputComponent.prototype.updateEndRange = function () {
        if (this.rangeEnd && this.picker.selectedDates[0]) {
            var start = this.picker.selectedDates[0];
            var end = this.rangeEnd.picker.selectedDates[0];
            this.rangeEnd.picker.set('minDate', this.picker.selectedDates[0]);
            if (start && end && end.getTime() < start.getTime()) {
                this.rangeEnd.writeValue(start.toISOString());
            }
        }
    };
    FormDateInputComponent.prototype.checkValue = function (value) {
        if (typeof (value) === 'string' && value.length > 0 || value && value.length) {
            this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
        }
    };
    FormDateInputComponent.prototype.isLabelTemplate = function () {
        return this.label instanceof TemplateRef;
    };
    FormDateInputComponent.prototype.writeValue = function (value) {
        if (value === null || value === undefined) {
            value = '';
        }
        this.checkValue(value);
        if (this.picker && this.picker.config) {
            this.picker.setDate(value);
        }
        this.updateEndRange();
        // this.renderer.setProperty(this.input.nativeElement, 'value', value);
    };
    FormDateInputComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    FormDateInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    FormDateInputComponent.prototype.setDisabledState = function (isDisabled) {
        this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
    };
    FormDateInputComponent.prototype.toggle = function () {
        this.picker.toggle();
    };
    FormDateInputComponent.prototype.close = function () {
        this.picker.close();
    };
    var FormDateInputComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateInputComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FormDateInputComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateInputComponent.prototype, "type", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateInputComponent.prototype, "readonly", void 0);
    tslib_1.__decorate([
        ContentChildren(FormValidationMessageDirective),
        tslib_1.__metadata("design:type", QueryList)
    ], FormDateInputComponent.prototype, "messages", void 0);
    tslib_1.__decorate([
        ViewChild('input', { static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], FormDateInputComponent.prototype, "input", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormDateInputComponent.prototype, "options", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", FormDateInputComponent)
    ], FormDateInputComponent.prototype, "rangeEnd", void 0);
    FormDateInputComponent = FormDateInputComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'rb-form-date-input',
            template: "<div class=\"input-wrapper\" [class.no-label]=\"!label\">\r\n\r\n  <input [type]=\"type\" [id]=\"id + 'input'\"\r\n         class=\"input with-icon\"\r\n         (blur)=\"onTouched()\"\r\n         [readonly]=\"isReadonly()\"\r\n         #input>\r\n  <span class=\"input-icon rb-ic rb-ic-calendar\" (click)=\"toggle()\"></span>\r\n  <label class=\"label\" [for]=\"id + 'input'\">\r\n    {{!isLabelTemplate()?label:''}}\r\n    <ng-container *ngIf=\"isLabelTemplate()\">\r\n      <ng-container *ngTemplateOutlet=\"label\"></ng-container>\r\n    </ng-container>\r\n  </label>\r\n  <span class=\"input-background\"></span>\r\n</div>\r\n\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return FormDateInputComponent_1; }), multi: true }],
            exportAs: 'dateInput'
        }),
        tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(FLATPICKR_DEFAULT_OPTIONS)),
        tslib_1.__metadata("design:paramtypes", [Renderer2,
            ElementRef, Object])
    ], FormDateInputComponent);
    return FormDateInputComponent;
}());
export { FormDateInputComponent };
//# sourceMappingURL=data:application/json;base64,