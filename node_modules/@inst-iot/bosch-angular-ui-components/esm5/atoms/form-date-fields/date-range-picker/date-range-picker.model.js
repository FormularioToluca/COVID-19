export var defaultTimeInputOptions = {
    units: [
        { value: 1, unit: 'ms', label: 'Milliseconds' },
        { value: 1000, unit: 's', label: 'Seconds' },
        { value: 1000 * 60, unit: 'm', label: 'Minutes' },
        { value: 1000 * 60 * 60, unit: 'h', label: 'Hours' },
        { value: 1000 * 60 * 60 * 24, unit: 'd', label: 'Days' },
        { value: 1000 * 60 * 60 * 24 * 7, unit: 'w', label: 'Weeks' },
    ]
};
export function isRelative(values) {
    return Array.isArray(values) && typeof (values[0]) === 'number' && typeof (values[1]) === 'number';
}
export function isAbsolute(values) {
    return Array.isArray(values) && typeof (values[0]) === 'string' && typeof (values[1]) === 'string';
}
export function getRelativeInfo(value, units) {
    var operator = '-';
    var count = 0;
    var unit = 'ms';
    if (typeof (value) === 'string' && value.match(/^([+-])(\d+)/)) {
        operator = RegExp.$1;
        count = parseInt(RegExp.$2, 10);
    }
    if (typeof (value) === 'number') {
        operator = value < 0 ? '-' : '+';
        count = Math.abs(value);
    }
    if (count > 0) {
        var divisor_1 = 1;
        units.forEach(function (u) {
            if (count % u.value === 0) {
                unit = u.unit;
                divisor_1 = u.value;
            }
        });
        count = count / divisor_1;
    }
    var label = units.find(function (u) { return u.unit === unit; }).label;
    return {
        operator: operator,
        count: count,
        unit: unit,
        label: label,
        displayTextShort: "" + operator + count + unit,
        displayText: "" + operator + count + " " + label
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1yYW5nZS1waWNrZXIubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXRvbXMvZm9ybS1kYXRlLWZpZWxkcy9kYXRlLXJhbmdlLXBpY2tlci9kYXRlLXJhbmdlLXBpY2tlci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxQkEsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQXFCO0lBQ3ZELEtBQUssRUFBRTtRQUNMLEVBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxjQUFjLEVBQUM7UUFDN0MsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBQztRQUMxQyxFQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBQztRQUMvQyxFQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUM7UUFDbEQsRUFBQyxLQUFLLEVBQUUsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQztRQUN0RCxFQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBQztLQUM1RDtDQUNGLENBQUM7QUFFRixNQUFNLFVBQVUsVUFBVSxDQUFDLE1BQW1CO0lBQzVDLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDckcsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsTUFBbUI7SUFDNUMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUNyRyxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFzQixFQUFFLEtBQTZCO0lBQ25GLElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQztJQUNuQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7SUFDaEIsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUU7UUFDOUQsUUFBUSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDckIsS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ2pDO0lBQ0QsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQy9CLFFBQVEsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUNqQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN6QjtJQUVELElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtRQUdiLElBQUksU0FBTyxHQUFHLENBQUMsQ0FBQztRQUNoQixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztZQUNiLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFO2dCQUN6QixJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDZCxTQUFPLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzthQUNuQjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsS0FBSyxHQUFHLEtBQUssR0FBRyxTQUFPLENBQUM7S0FDekI7SUFFRCxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQWYsQ0FBZSxDQUFDLENBQUMsS0FBSyxDQUFDO0lBRXJELE9BQU87UUFDTCxRQUFRLEVBQUUsUUFBUTtRQUNsQixLQUFLLEVBQUUsS0FBSztRQUNaLElBQUksRUFBRSxJQUFJO1FBQ1YsS0FBSyxFQUFFLEtBQUs7UUFDWixnQkFBZ0IsRUFBRSxLQUFHLFFBQVEsR0FBRyxLQUFLLEdBQUcsSUFBTTtRQUM5QyxXQUFXLEVBQUUsS0FBRyxRQUFRLEdBQUcsS0FBSyxTQUFJLEtBQU87S0FDNUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIERhdGVSYW5nZVBpY2tlclByZXNldCB7XHJcbiAgbGFiZWw6IHN0cmluZztcclxuICBhYnNvbHV0ZVJhbmdlPzogQWJzb2x1dGVQaWNrZXJWYWx1ZTtcclxuICByZWxhdGl2ZVJhbmdlPzogUmVsYXRpdmVQaWNrZXJWYWx1ZTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUGlja2VyTW9kZSA9ICdhYnNvbHV0ZScgfCAncmVsYXRpdmUnO1xyXG5leHBvcnQgdHlwZSBSZWxhdGl2ZVBpY2tlclZhbHVlID0gW251bWJlciwgbnVtYmVyXTtcclxuZXhwb3J0IHR5cGUgQWJzb2x1dGVQaWNrZXJWYWx1ZSA9IFtzdHJpbmcsIHN0cmluZ107XHJcbmV4cG9ydCB0eXBlIFBpY2tlclZhbHVlID0gUmVsYXRpdmVQaWNrZXJWYWx1ZSB8IEFic29sdXRlUGlja2VyVmFsdWU7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVJbnB1dE9wdGlvbnNVbml0IHtcclxuICB2YWx1ZTogbnVtYmVyO1xyXG4gIHVuaXQ6IHN0cmluZztcclxuICBsYWJlbDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRpbWVJbnB1dE9wdGlvbnMge1xyXG4gIHVuaXRzOiBUaW1lSW5wdXRPcHRpb25zVW5pdFtdO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZGVmYXVsdFRpbWVJbnB1dE9wdGlvbnM6IFRpbWVJbnB1dE9wdGlvbnMgPSB7XHJcbiAgdW5pdHM6IFtcclxuICAgIHt2YWx1ZTogMSwgdW5pdDogJ21zJywgbGFiZWw6ICdNaWxsaXNlY29uZHMnfSxcclxuICAgIHt2YWx1ZTogMTAwMCwgdW5pdDogJ3MnLCBsYWJlbDogJ1NlY29uZHMnfSxcclxuICAgIHt2YWx1ZTogMTAwMCAqIDYwLCB1bml0OiAnbScsIGxhYmVsOiAnTWludXRlcyd9LFxyXG4gICAge3ZhbHVlOiAxMDAwICogNjAgKiA2MCwgdW5pdDogJ2gnLCBsYWJlbDogJ0hvdXJzJ30sXHJcbiAgICB7dmFsdWU6IDEwMDAgKiA2MCAqIDYwICogMjQsIHVuaXQ6ICdkJywgbGFiZWw6ICdEYXlzJ30sXHJcbiAgICB7dmFsdWU6IDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCB1bml0OiAndycsIGxhYmVsOiAnV2Vla3MnfSxcclxuICBdXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNSZWxhdGl2ZSh2YWx1ZXM6IFBpY2tlclZhbHVlKSB7XHJcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWVzKSAmJiB0eXBlb2YgKHZhbHVlc1swXSkgPT09ICdudW1iZXInICYmIHR5cGVvZiAodmFsdWVzWzFdKSA9PT0gJ251bWJlcic7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0Fic29sdXRlKHZhbHVlczogUGlja2VyVmFsdWUpIHtcclxuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZXMpICYmIHR5cGVvZiAodmFsdWVzWzBdKSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mICh2YWx1ZXNbMV0pID09PSAnc3RyaW5nJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlbGF0aXZlSW5mbyh2YWx1ZTogbnVtYmVyIHwgc3RyaW5nLCB1bml0czogVGltZUlucHV0T3B0aW9uc1VuaXRbXSkge1xyXG4gIGxldCBvcGVyYXRvciA9ICctJztcclxuICBsZXQgY291bnQgPSAwO1xyXG4gIGxldCB1bml0ID0gJ21zJztcclxuICBpZiAodHlwZW9mICh2YWx1ZSkgPT09ICdzdHJpbmcnICYmIHZhbHVlLm1hdGNoKC9eKFsrLV0pKFxcZCspLykpIHtcclxuICAgIG9wZXJhdG9yID0gUmVnRXhwLiQxO1xyXG4gICAgY291bnQgPSBwYXJzZUludChSZWdFeHAuJDIsIDEwKTtcclxuICB9XHJcbiAgaWYgKHR5cGVvZiAodmFsdWUpID09PSAnbnVtYmVyJykge1xyXG4gICAgb3BlcmF0b3IgPSB2YWx1ZSA8IDAgPyAnLScgOiAnKyc7XHJcbiAgICBjb3VudCA9IE1hdGguYWJzKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGlmIChjb3VudCA+IDApIHtcclxuXHJcblxyXG4gICAgbGV0IGRpdmlzb3IgPSAxO1xyXG4gICAgdW5pdHMuZm9yRWFjaCh1ID0+IHtcclxuICAgICAgaWYgKGNvdW50ICUgdS52YWx1ZSA9PT0gMCkge1xyXG4gICAgICAgIHVuaXQgPSB1LnVuaXQ7XHJcbiAgICAgICAgZGl2aXNvciA9IHUudmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY291bnQgPSBjb3VudCAvIGRpdmlzb3I7XHJcbiAgfVxyXG5cclxuICBjb25zdCBsYWJlbCA9IHVuaXRzLmZpbmQodSA9PiB1LnVuaXQgPT09IHVuaXQpLmxhYmVsO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxyXG4gICAgY291bnQ6IGNvdW50LFxyXG4gICAgdW5pdDogdW5pdCxcclxuICAgIGxhYmVsOiBsYWJlbCxcclxuICAgIGRpc3BsYXlUZXh0U2hvcnQ6IGAke29wZXJhdG9yfSR7Y291bnR9JHt1bml0fWAsXHJcbiAgICBkaXNwbGF5VGV4dDogYCR7b3BlcmF0b3J9JHtjb3VudH0gJHtsYWJlbH1gXHJcbiAgfTtcclxufVxyXG5cclxuIl19