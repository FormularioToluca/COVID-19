import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, Inject, Input, Optional, Renderer2, ViewChild } from '@angular/core';
import flatpickr, * as flatpickrImport from 'flatpickr';
import { emptyFunction } from '../../form-fields/forms-util';
import { FLATPICKR_DEFAULT_OPTIONS } from '../form-date-input/form-date-input.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { isAbsolute, isRelative } from './date-range-picker.model';
var flatpickrFunc = flatpickrImport; // workaround for rollup and tests
var overridableOptions = {
    time_24hr: true,
};
var enforcedOptions = {
    inline: true,
    mode: 'single'
};
var DateRangePickerComponent = /** @class */ (function () {
    function DateRangePickerComponent(renderer, elementRef, defaultOptions) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.defaultOptions = defaultOptions;
        this.allowRelative = false;
        this.presets = [];
        this.startLabel = 'Start';
        this.endLabel = 'End';
        this.absoluteLabel = 'Absolute';
        this.relativeLabel = 'Relative';
        this.presetsLabel = 'Presets';
        this.tab = 'absolute';
        this.mode = 'absolute';
        /**
         * Options for Flatpickr
         * @see https://flatpickr.js.org/options/
         */
        this.options = {};
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
        this.absoluteValue = null;
        this.initialTabChange = true;
        this.relativeValue = null;
        this.lastModified = null;
    }
    DateRangePickerComponent_1 = DateRangePickerComponent;
    DateRangePickerComponent.prototype.ngOnInit = function () {
        if (this.defaultOptions) {
            this.options = tslib_1.__assign({}, overridableOptions, this.defaultOptions, this.options, enforcedOptions);
        }
        else {
            this.options = tslib_1.__assign({}, overridableOptions, this.options, enforcedOptions);
        }
    };
    DateRangePickerComponent.prototype.ngOnDestroy = function () {
        if (this.pickerStart) {
            this.pickerStart.destroy();
        }
        if (this.pickerEnd) {
            this.pickerEnd.destroy();
        }
    };
    Object.defineProperty(DateRangePickerComponent.prototype, "initStartDateElement", {
        set: function (el) {
            var _this = this;
            if (!el || el.nativeElement._flatpickr) {
                return;
            }
            var startOptions = tslib_1.__assign({}, this.options, { onValueUpdate: function (selectedDates) {
                    var start = toISOString(selectedDates[0]);
                    _this.pickerEnd.set('minDate', selectedDates[0]);
                    var end = toISOString(_this.pickerEnd.selectedDates[0]);
                    _this.updateAbsoluteValueFromPicker([start, end]);
                } });
            this.pickerStart = flatpickrFunc(el.nativeElement, startOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateRangePickerComponent.prototype, "initEndDateElement", {
        set: function (el) {
            var _this = this;
            if (!el || el.nativeElement._flatpickr) {
                return;
            }
            var endOptions = tslib_1.__assign({}, this.options, { onValueUpdate: function (selectedDates) {
                    var start = toISOString(_this.pickerStart.selectedDates[0]);
                    var end = toISOString(selectedDates[0]);
                    _this.updateAbsoluteValueFromPicker([start, end]);
                } });
            this.pickerEnd = flatpickrFunc(el.nativeElement, endOptions);
            this.updatePicker();
        },
        enumerable: true,
        configurable: true
    });
    DateRangePickerComponent.prototype.tabChanged = function (tabId) {
        if (this.initialTabChange || this.tab === tabId) {
            this.initialTabChange = false;
            return;
        }
        this.tab = tabId;
        if (tabId === 'absolute') {
            this.mode = 'absolute';
            this.notifyChange(this.absoluteValue);
        }
        if (tabId === 'relative') {
            this.mode = 'relative';
            this.notifyChange(this.relativeValue);
        }
        if (tabId === 'preset') {
        }
    };
    DateRangePickerComponent.prototype.updateAbsoluteValueFromPicker = function (value) {
        if (this.tab !== 'absolute'
            || this.absoluteValue && this.absoluteValue[0] === value[0] && this.absoluteValue[1] === value[1]) {
            return;
        }
        this.absoluteValue = value;
        this.relativeValue = this.getRelativeFromAbsolute(value);
        this.notifyChange(value);
    };
    DateRangePickerComponent.prototype.updateRelativeValue = function (value, index) {
        if (index === 0) {
            this.relativeValue = [value, this.relativeValue[1]];
        }
        if (index === 1) {
            this.relativeValue = [this.relativeValue[0], value];
        }
        this.absoluteValue = getAbsoluteFromRelative(this.relativeValue);
        this.updatePicker();
        this.notifyChange(this.relativeValue);
    };
    DateRangePickerComponent.prototype.notifyChange = function (value) {
        if (value === this.lastModified || isEqual(value, this.lastModified)) {
            return;
        }
        this.lastModified = value;
        this.onChange(value);
    };
    DateRangePickerComponent.prototype.writeValue = function (value) {
        if (this.allowRelative && isRelative(value)) {
            this.mode = 'relative';
            this.tab = 'relative';
            this.relativeValue = value;
            this.absoluteValue = getAbsoluteFromRelative(this.relativeValue);
            if (this.findPreset(this.relativeValue)) {
                this.tab = 'preset';
            }
        }
        else if (isAbsolute(value)) {
            this.mode = 'absolute';
            this.tab = 'absolute';
            this.relativeValue = this.getRelativeFromAbsolute(value);
            this.absoluteValue = value;
            if (this.findPreset(this.absoluteValue)) {
                this.tab = 'preset';
            }
        }
        this.lastModified = value;
        this.updatePicker();
    };
    DateRangePickerComponent.prototype.updatePicker = function () {
        var value = this.absoluteValue;
        if (!value) {
            return;
        }
        if (this.pickerStart && this.pickerStart.config) {
            this.pickerStart.setDate(value[0]);
        }
        if (this.pickerEnd && this.pickerEnd.config) {
            this.pickerEnd.setDate(value[1]);
            this.pickerEnd.set('minDate', value[0]);
        }
    };
    DateRangePickerComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    DateRangePickerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    DateRangePickerComponent.prototype.setDisabledState = function (isDisabled) {
        // this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
    };
    DateRangePickerComponent.prototype.findPreset = function (value) {
        if (!this.presets) {
            return null;
        }
        if (isAbsolute(value)) {
            return this.presets.filter(function (p) { return p.absoluteRange; }).find(function (p) { return isEqual(p.absoluteRange, value); });
        }
        else if (isRelative(value)) {
            return this.presets.filter(function (p) { return p.relativeRange; }).find(function (p) { return isEqual(p.relativeRange, value); });
        }
    };
    DateRangePickerComponent.prototype.isPreset = function (p) {
        return p.absoluteRange && this.absoluteValue && isEqual(this.absoluteValue, p.absoluteRange)
            || p.relativeRange && this.relativeValue && isEqual(this.relativeValue, p.relativeRange);
    };
    DateRangePickerComponent.prototype.setPreset = function (preset) {
        if (preset.relativeRange) {
            this.relativeValue = preset.relativeRange;
            this.absoluteValue = getAbsoluteFromRelative(this.relativeValue);
            // this.tab = 'relative';
            this.updatePicker();
            this.notifyChange(this.relativeValue);
        }
        if (preset.absoluteRange) {
            this.absoluteValue = preset.absoluteRange;
            this.relativeValue = this.getRelativeFromAbsolute(this.absoluteValue);
            // this.tab = 'absolute';
            this.updatePicker();
            this.notifyChange(this.absoluteValue);
        }
    };
    DateRangePickerComponent.prototype.getRelativeFromAbsolute = function (value, byDay) {
        if (byDay === void 0) { byDay = false; }
        var hf = this.options.enableTime && !byDay ? 60 * 60 * 1000 : 24 * 60 * 60 * 1000;
        var now = Math.floor(new Date().getTime() / hf) * hf;
        var start = Math.floor(new Date(value[0]).getTime() / hf) * hf;
        var end = Math.floor(new Date(value[1]).getTime() / hf) * hf;
        if (!byDay && Math.abs((start - now) / hf) > 48) {
            return this.getRelativeFromAbsolute(value, true);
        }
        return [start - now, end - now];
    };
    var DateRangePickerComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], DateRangePickerComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], DateRangePickerComponent.prototype, "readonly", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], DateRangePickerComponent.prototype, "allowRelative", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], DateRangePickerComponent.prototype, "presets", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], DateRangePickerComponent.prototype, "startLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], DateRangePickerComponent.prototype, "endLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], DateRangePickerComponent.prototype, "absoluteLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], DateRangePickerComponent.prototype, "relativeLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], DateRangePickerComponent.prototype, "presetsLabel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], DateRangePickerComponent.prototype, "options", void 0);
    tslib_1.__decorate([
        ViewChild('startDate', { static: false }),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DateRangePickerComponent.prototype, "initStartDateElement", null);
    tslib_1.__decorate([
        ViewChild('endDate', { static: false }),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DateRangePickerComponent.prototype, "initEndDateElement", null);
    DateRangePickerComponent = DateRangePickerComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'rb-date-range-picker',
            template: "<rb-tab-panel [renderHiddenTabs]=\"true\" (tabChanged)=\"tabChanged($event)\" [tab]=\"tab\">\r\n  <div *rbTabPanelItem=\"absoluteLabel; id: 'absolute'\" class=\"picker-calendars\">\r\n    <div class=\"startDate\" #startDate></div>\r\n    <div class=\"endDate\" #endDate></div>\r\n  </div>\r\n  <ng-container *ngIf=\"allowRelative\">\r\n    <div *rbTabPanelItem=\"relativeLabel; id: 'relative'\" class=\"picker-relative\">\r\n      <ng-container *ngIf=\"relativeValue\">\r\n        <rb-form-relative-time-input [label]=\"startLabel\" [ngModel]=\"relativeValue[0]\"\r\n                                     (ngModelChange)=\"updateRelativeValue($event, 0)\"></rb-form-relative-time-input>\r\n        <rb-form-relative-time-input [label]=\"endLabel\" [ngModel]=\"relativeValue[1]\"\r\n                                     (ngModelChange)=\"updateRelativeValue($event, 1)\"></rb-form-relative-time-input>\r\n      </ng-container>\r\n\r\n    </div>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"presets?.length\">\r\n    <div *rbTabPanelItem=\"presetsLabel; id: 'preset'\">\r\n      <div *ngFor=\"let p of presets\">\r\n        <ng-container *ngIf=\"allowRelative && p.relativeRange || p.absoluteRange\">\r\n          <a href=\"javascript:\" class=\"rb-dropdown-item\" [class.active]=\"isPreset(p)\" (click)=\"setPreset(p)\">{{p.label}}</a>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</rb-tab-panel>\r\n",
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return DateRangePickerComponent_1; }), multi: true }]
        }),
        tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(FLATPICKR_DEFAULT_OPTIONS)),
        tslib_1.__metadata("design:paramtypes", [Renderer2,
            ElementRef, Object])
    ], DateRangePickerComponent);
    return DateRangePickerComponent;
}());
export { DateRangePickerComponent };
function toISOString(data) {
    if (typeof data === 'string' || typeof data === 'number') {
        return new Date(data).toISOString();
    }
    else if (data instanceof Date) {
        return data.toISOString();
    }
    return '';
}
function getAbsoluteFromRelative(value) {
    var now = new Date().getTime();
    var start = toISOString(now + value[0]);
    var end = toISOString(now + value[1]);
    return [start, end];
}
function isEqual(value1, value2) {
    return value1 === value2 || value1[0] === value2[0] && value1[1] === value2[1];
}
//# sourceMappingURL=data:application/json;base64,