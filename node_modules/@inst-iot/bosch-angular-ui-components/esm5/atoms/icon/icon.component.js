import * as tslib_1 from "tslib";
/* tslint:disable */
import { Component, Input } from '@angular/core';
/**
 * @Deprecated use the icon font with rb-ic css class
 */
var IconComponent = /** @class */ (function () {
    function IconComponent() {
        this.basePath = 'assets/img/icons.svg';
    }
    IconComponent.prototype.ngOnInit = function () {
        // if it is MSIE
        if (!!document['documentMode'] && window['XMLHttpRequest']) {
            if (!document.getElementById('rb-icons')) {
                var iconsEl_1 = document.createElement('div');
                iconsEl_1.id = 'rb-icons';
                iconsEl_1.style.display = 'none';
                document.body.appendChild(iconsEl_1);
                var http_1 = new window['XMLHttpRequest']();
                http_1.onreadystatechange = function () {
                    if (http_1.readyState == 4 && http_1.status == 200) {
                        iconsEl_1.innerHTML = http_1.responseText;
                    }
                };
                http_1.open('GET', this.basePath, true);
                http_1.send();
            }
            this.basePath = '';
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], IconComponent.prototype, "name", void 0);
    IconComponent = tslib_1.__decorate([
        Component({
            selector: 'rb-icon',
            template: "<!--<img [src]=\"'assets/images/icons/'+name+'.svg'\" [alt]=\"name\">-->\n\n<svg viewBox=\"0 0 100 100\" class=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n  <use [attr.xlink:href]=\"basePath+'#'+name\"></use>\n</svg>\n",
            styles: ["svg{height:1em;width:1em}"]
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], IconComponent);
    return IconComponent;
}());
export { IconComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXRvbXMvaWNvbi9pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRXpEOztHQUVHO0FBTUg7SUFNRTtRQUZBLGFBQVEsR0FBRyxzQkFBc0IsQ0FBQztJQUdsQyxDQUFDO0lBR0QsZ0NBQVEsR0FBUjtRQUNFLGdCQUFnQjtRQUNoQixJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDMUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBRXhDLElBQU0sU0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzlDLFNBQU8sQ0FBQyxFQUFFLEdBQUcsVUFBVSxDQUFDO2dCQUN4QixTQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7Z0JBQy9CLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQU8sQ0FBQyxDQUFDO2dCQUVuQyxJQUFNLE1BQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7Z0JBQzVDLE1BQUksQ0FBQyxrQkFBa0IsR0FBRztvQkFDeEIsSUFBSSxNQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsSUFBSSxNQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsRUFBRTt3QkFDOUMsU0FBTyxDQUFDLFNBQVMsR0FBRyxNQUFJLENBQUMsWUFBWSxDQUFDO3FCQUN2QztnQkFDSCxDQUFDLENBQUM7Z0JBQ0YsTUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDdEMsTUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2I7WUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztTQUNwQjtJQUNILENBQUM7SUE5QlE7UUFBUixLQUFLLEVBQUU7OytDQUFjO0lBRlgsYUFBYTtRQUx6QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsU0FBUztZQUNuQix1UkFBb0M7O1NBRXJDLENBQUM7O09BQ1csYUFBYSxDQWlDekI7SUFBRCxvQkFBQztDQUFBLEFBakNELElBaUNDO1NBakNZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBARGVwcmVjYXRlZCB1c2UgdGhlIGljb24gZm9udCB3aXRoIHJiLWljIGNzcyBjbGFzc1xyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdyYi1pY29uJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vaWNvbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vaWNvbi5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJY29uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgQElucHV0KCkgbmFtZTogc3RyaW5nO1xyXG5cclxuICBiYXNlUGF0aCA9ICdhc3NldHMvaW1nL2ljb25zLnN2Zyc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgLy8gaWYgaXQgaXMgTVNJRVxyXG4gICAgaWYgKCEhZG9jdW1lbnRbJ2RvY3VtZW50TW9kZSddICYmIHdpbmRvd1snWE1MSHR0cFJlcXVlc3QnXSkge1xyXG4gICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyYi1pY29ucycpKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGljb25zRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBpY29uc0VsLmlkID0gJ3JiLWljb25zJztcclxuICAgICAgICBpY29uc0VsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpY29uc0VsKTtcclxuXHJcbiAgICAgICAgY29uc3QgaHR0cCA9IG5ldyB3aW5kb3dbJ1hNTEh0dHBSZXF1ZXN0J10oKTtcclxuICAgICAgICBodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHsgLy9DYWxsIGEgZnVuY3Rpb24gd2hlbiB0aGUgc3RhdGUgY2hhbmdlcy5cclxuICAgICAgICAgIGlmIChodHRwLnJlYWR5U3RhdGUgPT0gNCAmJiBodHRwLnN0YXR1cyA9PSAyMDApIHtcclxuICAgICAgICAgICAgaWNvbnNFbC5pbm5lckhUTUwgPSBodHRwLnJlc3BvbnNlVGV4dDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGh0dHAub3BlbignR0VUJywgdGhpcy5iYXNlUGF0aCwgdHJ1ZSk7XHJcbiAgICAgICAgaHR0cC5zZW5kKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuYmFzZVBhdGggPSAnJztcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19