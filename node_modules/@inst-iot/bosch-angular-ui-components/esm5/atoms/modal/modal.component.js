import * as tslib_1 from "tslib";
import { Component, ElementRef, ViewChild, ViewContainerRef } from '@angular/core';
var ModalComponent = /** @class */ (function () {
    function ModalComponent(elementRef, viewContainerRef) {
        this.elementRef = elementRef;
        this.viewContainerRef = viewContainerRef;
        this.options = {
            position: 'middle',
            showClose: true,
            backdropClose: true
        };
    }
    ModalComponent.prototype.ngOnInit = function () {
        if (this.options.maxWidth) {
            this.elementRef.nativeElement.style.maxWidth = this.options.maxWidth;
        }
        if (this.options.position) {
            this.elementRef.nativeElement.classList.add(this.options.position);
        }
        if (this.contentComponentRef && this.box) {
            this.viewContainerRef.insert(this.contentComponentRef.hostView);
        }
    };
    ModalComponent.prototype.ngAfterViewInit = function () {
        if (this.contentComponentRef && this.box) {
            this.box.nativeElement.appendChild(this.contentComponentRef.location.nativeElement);
        }
    };
    tslib_1.__decorate([
        ViewChild('box', { static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], ModalComponent.prototype, "box", void 0);
    ModalComponent = tslib_1.__decorate([
        Component({
            selector: 'rb-modal',
            template: "<div class=\"modal-box\" role=\"dialog\" #box>\n  <button class=\"close-btn rb-btn rb-passive-link\" (click)=\"close()\" *ngIf=\"options.showClose\"><rb-icon name=\"close\"></rb-icon></button>\n\n  <ng-container *ngIf=\"contentTpl\">\n    <ng-container *ngTemplateOutlet=\"contentTpl; context: {close: close}\"></ng-container>\n  </ng-container>\n  <ng-container *ngIf=\"contentComponent\">\n    <ng-container *ngComponentOutlet=\"contentComponent\"></ng-container>\n  </ng-container>\n  {{contentText ? contentText : ''}}\n</div>\n"
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef, ViewContainerRef])
    ], ModalComponent);
    return ModalComponent;
}());
export { ModalComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImF0b21zL21vZGFsL21vZGFsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQWdCLFVBQVUsRUFBNkIsU0FBUyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBYzNJO0lBaUJFLHdCQUFvQixVQUFzQixFQUFVLGdCQUFrQztRQUFsRSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQVh0RixZQUFPLEdBQWlCO1lBQ3RCLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLFNBQVMsRUFBRSxJQUFJO1lBQ2YsYUFBYSxFQUFFLElBQUk7U0FDcEIsQ0FBQztJQVFGLENBQUM7SUFFRCxpQ0FBUSxHQUFSO1FBRUUsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtZQUN6QixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1NBQ3RFO1FBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtZQUN6QixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDcEU7UUFFRCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2pFO0lBQ0gsQ0FBQztJQUVELHdDQUFlLEdBQWY7UUFDRSxJQUFJLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3JGO0lBQ0gsQ0FBQztJQXZCbUM7UUFBbkMsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzswQ0FBTSxVQUFVOytDQUFDO0lBZnpDLGNBQWM7UUFKMUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFVBQVU7WUFDcEIsZ2lCQUFxQztTQUN0QyxDQUFDO2lEQWtCZ0MsVUFBVSxFQUE0QixnQkFBZ0I7T0FqQjNFLGNBQWMsQ0F1QzFCO0lBQUQscUJBQUM7Q0FBQSxBQXZDRCxJQXVDQztTQXZDWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBDb21wb25lbnRSZWYsIEVsZW1lbnRSZWYsIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFR5cGUsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNb2RhbE9wdGlvbnMge1xyXG4gIHBvc2l0aW9uPzogJ21pZGRsZScgfCAndG9wJyB8ICdib3R0b20nO1xyXG4gIHNob3dDbG9zZT86IGJvb2xlYW47ICAvLyBzaG93IHRoZSBjbG9zZSBidXR0b24gb24gdG9wIHJpZ2h0XHJcbiAgbWF4V2lkdGg/OiBzdHJpbmc7XHJcbiAgc3RhY2tlZD86IGJvb2xlYW47IC8vIHdoZXRoZXIgdG8gc3RhY2sgdGhpcyBvbiB0b3Agb2YgYW5vdGhlciBvcGVuIG1vZGFsXHJcbiAgYmFja2Ryb3BDbG9zZT86IGJvb2xlYW47IC8vIGNsb3NlIGlmIGJhY2tkcm9wIGlzIGNsaWNrZWQgb3IgRVNDIGtleSBpcyBwcmVzc2VkXHJcbn1cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncmItbW9kYWwnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9tb2RhbC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIE1vZGFsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgY29udGVudFRleHQ6IHN0cmluZztcclxuICBjb250ZW50VHBsOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gIGNvbnRlbnRDb21wb25lbnQ6IFR5cGU8YW55PjtcclxuICBjb250ZW50Q29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8YW55PjtcclxuICBvcHRpb25zOiBNb2RhbE9wdGlvbnMgPSB7XHJcbiAgICBwb3NpdGlvbjogJ21pZGRsZScsXHJcbiAgICBzaG93Q2xvc2U6IHRydWUsXHJcbiAgICBiYWNrZHJvcENsb3NlOiB0cnVlXHJcbiAgfTtcclxuICBjbG9zZTogKHJlYXNvbj86IGFueSkgPT4gdm9pZDtcclxuXHJcbiAgY29tcG9uZW50SW5zdGFuY2U6IGFueTtcclxuXHJcbiAgQFZpZXdDaGlsZCgnYm94JywgeyBzdGF0aWM6IHRydWUgfSkgYm94OiBFbGVtZW50UmVmO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZikge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcblxyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5tYXhXaWR0aCkge1xyXG4gICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5tYXhXaWR0aCA9IHRoaXMub3B0aW9ucy5tYXhXaWR0aDtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLm9wdGlvbnMucG9zaXRpb24pIHtcclxuICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLm9wdGlvbnMucG9zaXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmNvbnRlbnRDb21wb25lbnRSZWYgJiYgdGhpcy5ib3gpIHtcclxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLmluc2VydCh0aGlzLmNvbnRlbnRDb21wb25lbnRSZWYuaG9zdFZpZXcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuY29udGVudENvbXBvbmVudFJlZiAmJiB0aGlzLmJveCkge1xyXG4gICAgICB0aGlzLmJveC5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuY29udGVudENvbXBvbmVudFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19