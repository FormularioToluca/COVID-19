import * as tslib_1 from "tslib";
import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Injectable, Injector, TemplateRef } from '@angular/core';
import { ModalComponent } from './modal.component';
var ModalService = /** @class */ (function () {
    function ModalService(factoryResolver, injector, appRef) {
        var _this = this;
        this.factoryResolver = factoryResolver;
        this.injector = injector;
        this.appRef = appRef;
        this.openComponents = [];
        var el = document.querySelector('.rb-modal-backdrop');
        if (el) {
            this.backdrop = el;
        }
        else {
            this.backdrop = document.body.appendChild(document.createElement('div'));
            this.backdrop.className = 'rb-modal-backdrop';
            var isDown_1 = false;
            this.backdrop.addEventListener('mousedown', function (e) {
                if (e.target === _this.backdrop) {
                    isDown_1 = true;
                }
            });
            this.backdrop.addEventListener('mouseup', function (e) {
                if (isDown_1 && e.target === _this.backdrop) {
                    _this.nonButtonClose();
                }
                isDown_1 = false;
            });
        }
        this.componentFactory = this.factoryResolver.resolveComponentFactory(ModalComponent);
    }
    Object.defineProperty(ModalService.prototype, "appRoot", {
        get: function () {
            return this.appRef.components[0].location.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Opens a component in a modal. Creates the component instance.
     * Provide an injector in case the ModalService is not instantiated with the Injector that knows the Component.
     */
    ModalService.prototype.openComponent = function (component, options, injector) {
        var factoryResolver = (injector || this.injector).get(ComponentFactoryResolver);
        var factory = factoryResolver.resolveComponentFactory(component);
        var componentRef = factory.create(injector || this.injector);
        var result = this.open(componentRef, options);
        return {
            result: result,
            instance: componentRef.instance
        };
    };
    ModalService.prototype.open = function (content, options) {
        var _this = this;
        return new Promise(function (resolve) {
            if (_this.openComponents.length && options && options.stacked) {
                _this.lastOpenModalElement().classList.add('hidden');
            }
            else {
                _this.close();
            }
            if (!_this.openComponents.length) {
                document.body.classList.add('rb-modal-open');
                if (_this.appRef.components.length) {
                    _this.appRoot.classList.add('rb-modal-frost');
                }
                _this.ensureListeners();
            }
            _this.backdrop.classList.remove('large-fix');
            var componentRef = _this.componentFactory.create(_this.injector);
            if (content instanceof TemplateRef) {
                componentRef.instance.contentTpl = content;
            }
            else if (typeof (content) === 'string') {
                componentRef.instance.contentText = content;
            }
            else if (content instanceof ComponentRef) {
                componentRef.instance.contentComponentRef = content;
            }
            else if (typeof (content) === 'function') {
                componentRef.instance.contentComponent = content;
            }
            componentRef.instance.close = _this.close.bind(_this);
            if (options) {
                Object.assign(componentRef.instance.options, options);
            }
            _this.appRef.attachView(componentRef.hostView);
            _this.backdrop.appendChild(componentRef.location.nativeElement);
            componentRef.location.nativeElement.focus();
            // Fix for IE
            setTimeout(function () {
                if (componentRef.location.nativeElement.offsetTop < 0) {
                    _this.backdrop.classList.add('large-fix');
                }
            }, 10);
            _this.openComponents.push({
                componentRef: componentRef,
                onClose: resolve
            });
        });
    };
    ModalService.prototype.close = function (reason) {
        var openModal = this.openComponents.pop();
        if (!openModal) {
            return;
        }
        this.appRef.detachView(openModal.componentRef.hostView);
        openModal.componentRef.destroy();
        if (!this.openComponents.length) {
            document.body.classList.remove('rb-modal-open');
            if (this.appRef.components.length) {
                this.appRoot.classList.remove('rb-modal-frost');
            }
            this.removeListeners();
        }
        else {
            this.lastOpenModalElement().classList.remove('hidden');
        }
        if (openModal.onClose) {
            openModal.onClose(reason);
        }
    };
    ModalService.prototype.nonButtonClose = function () {
        var instance = this.lastOpenModalInstance();
        if (instance && instance.options.backdropClose || !instance) {
            this.close();
        }
    };
    ModalService.prototype.ensureListeners = function () {
        var _this = this;
        if (!this.keyListener) {
            this.keyListener = function (e) {
                // ESC pressed
                if (e.key === 'Escape') {
                    _this.nonButtonClose();
                }
            };
        }
        document.addEventListener('keyup', this.keyListener, true);
        if (!this.focusListener) {
            this.focusListener = function (e) {
                // Focus changes
                if (_this.appRoot.contains(document.activeElement)) {
                    var firstFocusable = _this.backdrop.querySelector('a,button');
                    firstFocusable.focus();
                }
            };
        }
        document.addEventListener('focus', this.focusListener, true);
    };
    ModalService.prototype.removeListeners = function () {
        if (this.keyListener) {
            document.removeEventListener('keyup', this.keyListener, true);
        }
        if (this.focusListener) {
            document.removeEventListener('focus', this.focusListener, true);
        }
    };
    ModalService.prototype.lastOpenModal = function () {
        return this.openComponents[this.openComponents.length - 1];
    };
    ModalService.prototype.lastOpenModalElement = function () {
        var modal = this.lastOpenModal();
        if (modal) {
            return modal.componentRef.location.nativeElement;
        }
    };
    ModalService.prototype.lastOpenModalInstance = function () {
        var modal = this.lastOpenModal();
        if (modal) {
            return modal.componentRef.instance;
        }
    };
    ModalService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [ComponentFactoryResolver,
            Injector,
            ApplicationRef])
    ], ModalService);
    return ModalService;
}());
export { ModalService };
//# sourceMappingURL=data:application/json;base64,