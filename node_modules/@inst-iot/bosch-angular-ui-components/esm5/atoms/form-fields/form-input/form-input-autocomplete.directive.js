import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, HostListener, Inject, Injector, Input, Optional, Self, TemplateRef, ViewContainerRef } from '@angular/core';
import { NEVER, of, Subject } from 'rxjs';
import { DropdownDirective } from '../../dropdown/dropdown.directive';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { catchError, debounceTime, skip, switchMap, takeUntil, tap } from 'rxjs/operators';
import { FormInputAutocompleteListComponent } from './form-input-autocomplete-list/form-input-autocomplete-list.component';
var FormInputAutocompleteDirective = /** @class */ (function (_super) {
    tslib_1.__extends(FormInputAutocompleteDirective, _super);
    function FormInputAutocompleteDirective(_factoryResolver, injector, viewContainerRef, control, inputs) {
        var _this = _super.call(this, _factoryResolver, viewContainerRef) || this;
        _this._factoryResolver = _factoryResolver;
        _this.injector = injector;
        _this.control = control;
        /**
         * Should the dropdown open on initial click without any value change
         */
        _this.rbInitialOpen = false;
        _this.rbDebounceTime = 500;
        _this.destroy = new Subject();
        _this.loading = false;
        _this.error = null;
        _this.lastResult = null;
        _this.focus = null;
        _this.input = null;
        _this.noSearchFor = null;
        if (inputs) {
            _this.input = inputs[0];
        }
        _this.openOnClick = false;
        return _this;
    }
    FormInputAutocompleteDirective.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        if (this.rbInitialOpen) {
            this.openOnClick = true;
        }
        if (!this.rbAutocompleteList) {
            var factory = this._factoryResolver.resolveComponentFactory(FormInputAutocompleteListComponent);
            var component = factory.create(this.injector);
            this.instance = component.instance;
            this.rbAutocompleteList = component.instance.template;
        }
        this.template = this.rbAutocompleteList;
        this.updateLoading(false, null);
        var changes = 0;
        var resolvedValue = null;
        this.control.valueChanges.pipe(debounceTime(this.rbDebounceTime), switchMap(function (value) {
            changes++;
            if (changes === 1 && !_this.rbInitialOpen || resolvedValue === value || _this.noSearchFor === value) {
                return NEVER;
            }
            resolvedValue = value;
            _this.updateLoading(true, null);
            var result = _this.rbFormInputAutocomplete(value);
            if (result) {
                return result.pipe(tap(function () { return _this.updateLoading(false, null); }, function (err) { return _this.updateLoading(false, err); }, function () { return _this.updateLoading(false, null); }), catchError(function (err) { return of(null); }), takeUntil(_this.control.valueChanges.pipe(skip(1))));
            }
            else {
                _this.updateLoading(false, null);
                return of(null);
            }
        }), takeUntil(this.destroy)).subscribe(function (results) {
            _this.openOnClick = true;
            _this.lastResult = results;
            if (results !== null && !results.includes(resolvedValue)) {
                _this.focus = null;
            }
            _this.updateContext(_this.control.value);
            if (results !== null && (!_this.componentRef || !_this.componentRef.instance.shown) && changes > 1) {
                _this.openDropdown();
            }
            if (results === null) {
                _this.closeDropdown();
            }
        });
    };
    FormInputAutocompleteDirective.prototype.ngAfterViewInit = function () {
        if (this.input && this.input.input) {
            this.input.input.nativeElement.autocomplete = 'off';
        }
    };
    FormInputAutocompleteDirective.prototype.updateLoading = function (loading, error) {
        this.loading = loading;
        this.error = error;
        if (this.error) {
            var errors = this.control.errors || {};
            errors['autocomplete'] = this.error;
            this.control.control.setErrors(errors);
        }
        if (this.input && this.loading) {
            this.input.updateIcon('rb-ic rb-ic-spin rb-ic-refresh');
        }
        if (this.input && !this.loading) {
            this.input.updateIcon(this.rbInitialOpen ? 'select-icon rb-ic rb-ic-down' : null);
        }
        if (this.input && this.error) {
            this.input.updateIcon('rb-ic rb-ic-alert-warning u-TextColor--red');
        }
    };
    FormInputAutocompleteDirective.prototype.select = function (value) {
        this.noSearchFor = value;
        this.control.control.setValue(value);
        this.focus = value;
        this.closeDropdown();
        this.updateContext(value);
    };
    FormInputAutocompleteDirective.prototype.onKeyUp = function (e) {
        if (e.key === 'ArrowDown' || e.key === 'Down') {
            e.preventDefault();
            this.moveFocus(1);
        }
        if (e.key === 'ArrowUp' || e.key === 'Up') {
            e.preventDefault();
            this.moveFocus(-1);
        }
        if (e.key === 'Enter' && this.componentRef && this.componentRef.instance.shown) {
            e.preventDefault();
            this.select(this.focus);
        }
    };
    FormInputAutocompleteDirective.prototype.moveFocus = function (by) {
        var list = this.lastResult || [];
        if (!list.length) {
            this.focus = null;
            this.updateContext(this.control.value);
            return;
        }
        var focusIndex = list.indexOf(this.focus);
        if (focusIndex === -1) {
            focusIndex = 0;
        }
        else {
            focusIndex += by;
            if (focusIndex === -1) {
                focusIndex = list.length - 1;
            }
            if (focusIndex === list.length) {
                focusIndex = 0;
            }
        }
        this.focus = list[focusIndex];
        this.updateContext(this.control.value);
    };
    FormInputAutocompleteDirective.prototype.updateContext = function (value) {
        this.context = {
            list: this.lastResult,
            active: value,
            focus: this.focus,
            select: this.select.bind(this)
        };
    };
    FormInputAutocompleteDirective.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        this.destroy.complete();
        this.input = null;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function)
    ], FormInputAutocompleteDirective.prototype, "rbFormInputAutocomplete", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", TemplateRef)
    ], FormInputAutocompleteDirective.prototype, "rbAutocompleteList", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormInputAutocompleteDirective.prototype, "rbInitialOpen", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormInputAutocompleteDirective.prototype, "rbDebounceTime", void 0);
    tslib_1.__decorate([
        HostListener('keyup', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
        tslib_1.__metadata("design:returntype", void 0)
    ], FormInputAutocompleteDirective.prototype, "onKeyUp", null);
    FormInputAutocompleteDirective = tslib_1.__decorate([
        Directive({
            selector: '[rbFormInputAutocomplete]',
        }),
        tslib_1.__param(3, Self()),
        tslib_1.__param(4, Self()), tslib_1.__param(4, Optional()), tslib_1.__param(4, Inject(NG_VALUE_ACCESSOR)),
        tslib_1.__metadata("design:paramtypes", [ComponentFactoryResolver,
            Injector,
            ViewContainerRef,
            NgControl, Array])
    ], FormInputAutocompleteDirective);
    return FormInputAutocompleteDirective;
}(DropdownDirective));
export { FormInputAutocompleteDirective };
//# sourceMappingURL=data:application/json;base64,