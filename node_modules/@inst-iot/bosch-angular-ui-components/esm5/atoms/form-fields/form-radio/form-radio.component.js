import * as tslib_1 from "tslib";
import { Component, ContentChildren, ElementRef, forwardRef, Input, QueryList, Renderer2, TemplateRef, ViewChild } from '@angular/core';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { emptyFunction } from '../forms-util';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var FormRadioComponent = /** @class */ (function () {
    function FormRadioComponent(renderer) {
        this.renderer = renderer;
        this.id = 'radio.' + Math.random();
        this.label = null;
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
    }
    FormRadioComponent_1 = FormRadioComponent;
    FormRadioComponent.prototype.updateValue = function (isChecked) {
        if (isChecked) {
            this.onChange(this.value);
        }
    };
    FormRadioComponent.prototype.isLabelTemplate = function () {
        return this.label instanceof TemplateRef;
    };
    FormRadioComponent.prototype.writeValue = function (value) {
        if (value === this.value) {
            this.renderer.setProperty(this.input.nativeElement, 'checked', true);
        }
    };
    FormRadioComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    FormRadioComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    FormRadioComponent.prototype.setDisabledState = function (isDisabled) {
        this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
    };
    FormRadioComponent.prototype.isReadonly = function () {
        return !!(this.readonly === '' || this.readonly);
    };
    var FormRadioComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], FormRadioComponent.prototype, "required", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], FormRadioComponent.prototype, "noValidation", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FormRadioComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormRadioComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        ViewChild('input', { static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], FormRadioComponent.prototype, "input", void 0);
    tslib_1.__decorate([
        ContentChildren(FormValidationMessageDirective),
        tslib_1.__metadata("design:type", QueryList)
    ], FormRadioComponent.prototype, "messages", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormRadioComponent.prototype, "value", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormRadioComponent.prototype, "readonly", void 0);
    FormRadioComponent = FormRadioComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'rb-form-radio',
            template: "<div class=\"input-wrapper\">\r\n  <input type=\"radio\" [id]=\"id + 'input'\" [name]=\"name\" [readonly]=\"readonly\"\r\n         (click)=\"updateValue($event.target.checked)\" #input>\r\n  <label [for]=\"id + 'input'\">  {{!isLabelTemplate() ? label : ''}}</label>\r\n</div>\r\n\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return FormRadioComponent_1; }), multi: true }]
        }),
        tslib_1.__metadata("design:paramtypes", [Renderer2])
    ], FormRadioComponent);
    return FormRadioComponent;
}());
export { FormRadioComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1yYWRpby5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXRvbXMvZm9ybS1maWVsZHMvZm9ybS1yYWRpby9mb3JtLXJhZGlvLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxlQUFlLEVBQ2YsVUFBVSxFQUFFLFVBQVUsRUFDdEIsS0FBSyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsV0FBVyxFQUNYLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN0RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU96RTtJQXFCRSw0QkFBb0IsUUFBbUI7UUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQW5CdkMsT0FBRSxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFLckIsVUFBSyxHQUE4QixJQUFJLENBQUM7UUFXakQsYUFBUSxHQUFHLGFBQWEsQ0FBQztRQUN6QixjQUFTLEdBQUcsYUFBYSxDQUFDO0lBRzFCLENBQUM7MkJBdEJVLGtCQUFrQjtJQXdCN0Isd0NBQVcsR0FBWCxVQUFZLFNBQWtCO1FBQzVCLElBQUksU0FBUyxFQUFFO1lBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7SUFFSCxDQUFDO0lBRUQsNENBQWUsR0FBZjtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssWUFBWSxXQUFXLENBQUM7SUFDM0MsQ0FBQztJQUVELHVDQUFVLEdBQVYsVUFBVyxLQUFVO1FBQ25CLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3RFO0lBQ0gsQ0FBQztJQUVELDZDQUFnQixHQUFoQixVQUFpQixFQUFrQjtRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsOENBQWlCLEdBQWpCLFVBQWtCLEVBQVk7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELDZDQUFnQixHQUFoQixVQUFpQixVQUFtQjtRQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELHVDQUFVLEdBQVY7UUFDRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuRCxDQUFDOztJQXBEUTtRQUFSLEtBQUssRUFBRTs7d0RBQW1CO0lBQ2xCO1FBQVIsS0FBSyxFQUFFOzs0REFBdUI7SUFDdEI7UUFBUixLQUFLLEVBQUU7O29EQUFjO0lBRWI7UUFBUixLQUFLLEVBQUU7O3FEQUF5QztJQUdiO1FBQW5DLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUM7MENBQVEsVUFBVTtxREFBQztJQUVMO1FBQWhELGVBQWUsQ0FBQyw4QkFBOEIsQ0FBQzswQ0FBVyxTQUFTO3dEQUFpQztJQUU1RjtRQUFSLEtBQUssRUFBRTs7cURBQVk7SUFFWDtRQUFSLEtBQUssRUFBRTs7d0RBQVU7SUFoQlAsa0JBQWtCO1FBTDlCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxlQUFlO1lBQ3pCLHFXQUEwQztZQUMxQyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSxvQkFBa0IsRUFBbEIsQ0FBa0IsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQztTQUMxRyxDQUFDO2lEQXNCOEIsU0FBUztPQXJCNUIsa0JBQWtCLENBeUQ5QjtJQUFELHlCQUFDO0NBQUEsQUF6REQsSUF5REM7U0F6RFksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgQ29udGVudENoaWxkcmVuLFxyXG4gIEVsZW1lbnRSZWYsIGZvcndhcmRSZWYsXHJcbiAgSW5wdXQsXHJcbiAgUXVlcnlMaXN0LFxyXG4gIFJlbmRlcmVyMixcclxuICBUZW1wbGF0ZVJlZixcclxuICBWaWV3Q2hpbGRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybVZhbGlkYXRpb25NZXNzYWdlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZm9ybS12YWxpZGF0aW9uLW1lc3NhZ2UuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgZW1wdHlGdW5jdGlvbiB9IGZyb20gJy4uL2Zvcm1zLXV0aWwnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3JiLWZvcm0tcmFkaW8nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9mb3JtLXJhZGlvLmNvbXBvbmVudC5odG1sJyxcclxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEZvcm1SYWRpb0NvbXBvbmVudCksIG11bHRpOiB0cnVlfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZvcm1SYWRpb0NvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuXHJcbiAgaWQgPSAncmFkaW8uJyArIE1hdGgucmFuZG9tKCk7XHJcbiAgQElucHV0KCkgcmVxdWlyZWQ6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgbm9WYWxpZGF0aW9uOiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcclxuXHJcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT4gPSBudWxsO1xyXG5cclxuXHJcbiAgQFZpZXdDaGlsZCgnaW5wdXQnLCB7c3RhdGljOiB0cnVlfSkgaW5wdXQ6IEVsZW1lbnRSZWY7XHJcblxyXG4gIEBDb250ZW50Q2hpbGRyZW4oRm9ybVZhbGlkYXRpb25NZXNzYWdlRGlyZWN0aXZlKSBtZXNzYWdlczogUXVlcnlMaXN0PEZvcm1WYWxpZGF0aW9uTWVzc2FnZURpcmVjdGl2ZT47XHJcblxyXG4gIEBJbnB1dCgpIHZhbHVlOiBhbnk7XHJcblxyXG4gIEBJbnB1dCgpIHJlYWRvbmx5O1xyXG5cclxuICBvbkNoYW5nZSA9IGVtcHR5RnVuY3Rpb247XHJcbiAgb25Ub3VjaGVkID0gZW1wdHlGdW5jdGlvbjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWYWx1ZShpc0NoZWNrZWQ6IGJvb2xlYW4pIHtcclxuICAgIGlmIChpc0NoZWNrZWQpIHtcclxuICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLnZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBpc0xhYmVsVGVtcGxhdGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sYWJlbCBpbnN0YW5jZW9mIFRlbXBsYXRlUmVmO1xyXG4gIH1cclxuXHJcbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICBpZiAodmFsdWUgPT09IHRoaXMudmFsdWUpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmlucHV0Lm5hdGl2ZUVsZW1lbnQsICdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB7fSk6IHZvaWQge1xyXG4gICAgdGhpcy5vbkNoYW5nZSA9IGZuO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHt9KTogdm9pZCB7XHJcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xyXG4gIH1cclxuXHJcbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudCwgJ2Rpc2FibGVkJywgaXNEaXNhYmxlZCk7XHJcbiAgfVxyXG5cclxuICBpc1JlYWRvbmx5KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICEhKHRoaXMucmVhZG9ubHkgPT09ICcnIHx8IHRoaXMucmVhZG9ubHkpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19