import * as tslib_1 from "tslib";
import { Component, forwardRef, Input, Output, EventEmitter, TemplateRef, Renderer2, ElementRef, ContentChildren, QueryList, ViewChild, HostListener } from '@angular/core';
import { FormValidationMessageDirective } from '../form-validation-message.directive';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { emptyFunction } from '../forms-util';
var FormChipsInputComponent = /** @class */ (function () {
    function FormChipsInputComponent(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.chips = [];
        this.chipInput = '';
        this.id = 'input.' + Math.random();
        this.disabled = false;
        this.activeIndex = null;
        this.mouseIn = false;
        this.deletingLast = false;
        this.label = null;
        this.placeholder = '';
        this.chipAdded = new EventEmitter();
        this.chipDeleted = new EventEmitter();
        this.onChange = emptyFunction;
        this.onTouched = emptyFunction;
    }
    FormChipsInputComponent_1 = FormChipsInputComponent;
    Object.defineProperty(FormChipsInputComponent.prototype, "setFocus", {
        set: function (val) {
            if (this.input && 'nativeElement' in this.input) {
                this.input.nativeElement.focus();
            }
        },
        enumerable: true,
        configurable: true
    });
    FormChipsInputComponent.prototype.onMouseEnter = function () {
        this.mouseIn = true;
    };
    FormChipsInputComponent.prototype.onMouseLeave = function () {
        this.mouseIn = false;
    };
    FormChipsInputComponent.prototype.onAnyClick = function () {
        if (this.activeIndex !== null && !this.mouseIn) {
            this.activeIndex = null;
        }
    };
    FormChipsInputComponent.prototype.onKeydownHandler = function (event) {
        if (this.activeIndex !== null && !this.deletingLast && event.key === 'Backspace') {
            event.preventDefault();
            this.removeAtIndex(this.activeIndex);
        }
    };
    FormChipsInputComponent.prototype.isLabelTemplate = function () {
        return this.label instanceof TemplateRef;
    };
    FormChipsInputComponent.prototype.writeValue = function (value) {
        this.chips = value || [];
        this.checkState();
        this.renderer.setProperty(this.input.nativeElement, 'value', '');
    };
    FormChipsInputComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    FormChipsInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    FormChipsInputComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.renderer.setProperty(this.input.nativeElement, 'disabled', isDisabled);
    };
    FormChipsInputComponent.prototype.checkState = function () {
        if (this.chips && this.chips.length > 0) {
            this.renderer.addClass(this.elementRef.nativeElement, 'not-empty');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'not-empty');
        }
    };
    FormChipsInputComponent.prototype.submit = function () {
        if (this.chipInput !== '') {
            this.addChip(this.chipInput);
            this.chipInput = '';
        }
    };
    FormChipsInputComponent.prototype.onKeyDown = function (e) {
        if (e.key === 'Backspace' && this.chipInput === '') {
            e.preventDefault();
            if (this.activeIndex !== null) {
                this.removeLast();
                this.checkState();
            }
            else {
                this.deletingLast = true;
                this.activeIndex = this.chips.length - 1;
            }
        }
    };
    FormChipsInputComponent.prototype.onBlur = function () {
        if (this.chipInput !== '') {
            this.addChip(this.chipInput);
            this.chipInput = '';
        }
        this.onTouched();
    };
    FormChipsInputComponent.prototype.addChip = function (chip) {
        this.chips.push(chip.trim());
        this.onChange(this.chips);
        this.checkState();
        this.chipAdded.next(chip);
    };
    FormChipsInputComponent.prototype.removeChip = function (chip) {
        var index = this.chips.indexOf(chip);
        if (index !== -1) {
            this.chips.splice(index, 1);
            this.onChange(this.chips);
            this.checkState();
            this.chipDeleted.next(chip);
        }
    };
    FormChipsInputComponent.prototype.removeLast = function () {
        var lastChip = this.chips[this.chips.length - 1];
        this.chips.splice(-1, 1);
        this.activeIndex = null;
        this.deletingLast = false;
        this.onChange(this.chips);
        this.chipDeleted.next(lastChip);
    };
    FormChipsInputComponent.prototype.removeAtIndex = function (i) {
        var chipAtIndex = this.chips[i];
        this.chips.splice(i, 1);
        this.activeIndex = null;
        this.onChange(this.chips);
        this.chipDeleted.next(chipAtIndex);
    };
    var FormChipsInputComponent_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormChipsInputComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormChipsInputComponent.prototype, "placeholder", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], FormChipsInputComponent.prototype, "setFocus", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], FormChipsInputComponent.prototype, "chipAdded", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], FormChipsInputComponent.prototype, "chipDeleted", void 0);
    tslib_1.__decorate([
        ContentChildren(FormValidationMessageDirective),
        tslib_1.__metadata("design:type", QueryList)
    ], FormChipsInputComponent.prototype, "messages", void 0);
    tslib_1.__decorate([
        ViewChild('input', { static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], FormChipsInputComponent.prototype, "input", void 0);
    tslib_1.__decorate([
        ViewChild('chipcontainer', { static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], FormChipsInputComponent.prototype, "chipcontainer", void 0);
    tslib_1.__decorate([
        HostListener('mouseenter'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], FormChipsInputComponent.prototype, "onMouseEnter", null);
    tslib_1.__decorate([
        HostListener('mouseleave'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], FormChipsInputComponent.prototype, "onMouseLeave", null);
    tslib_1.__decorate([
        HostListener('window:click'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], FormChipsInputComponent.prototype, "onAnyClick", null);
    tslib_1.__decorate([
        HostListener('document:keydown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [KeyboardEvent]),
        tslib_1.__metadata("design:returntype", void 0)
    ], FormChipsInputComponent.prototype, "onKeydownHandler", null);
    FormChipsInputComponent = FormChipsInputComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'rb-form-chips-input',
            template: "<div class=\"input-wrapper d-flex\" [class.no-label]=\"!label\">\r\n  <div class=\"chips\">\r\n    <ng-container *ngFor=\"let chip of chips; let i = index\">\r\n      <div (click)=\"activeIndex = i\" [ngClass]=\"{'disabled': disabled, 'selected': activeIndex === i}\"\r\n           class=\"rb-chip mr-1\">\r\n        <span>{{chip}}</span>\r\n        <a href=\"javascript:\" (click)=\"removeChip(chip)\" style=\"margin-left: 4px;\"><span\r\n          class=\"rb-ic rb-ic-close\"></span></a>\r\n      </div>\r\n    </ng-container>\r\n  </div>\r\n  <form (ngSubmit)=\"submit()\" class=\"flex-grow-1\">\r\n    <input #input class=\"input chips-input\" [id]=\"id\" (click)=\"activeIndex = null\"\r\n           (keydown)=\"onKeyDown($event)\"\r\n           (blur)=\"onBlur()\"\r\n           [(ngModel)]=\"chipInput\"\r\n           [placeholder]=\"placeholder\"\r\n           [ngStyle]=\"{'margin-left': chips.length == 0 ? 0 : '1rem'}\"\r\n           name=\"chipInput\"\r\n           type=\"text\"\r\n           minlength=\"1\">\r\n    <label class=\"label\" [for]=\"id\">{{!isLabelTemplate() ? label : ''}}</label>\r\n    <span class=\"input-background\"></span>\r\n  </form>\r\n</div>\r\n<rb-form-errors [messages]=\"messages\"></rb-form-errors>\r\n",
            providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return FormChipsInputComponent_1; }), multi: true }]
        }),
        tslib_1.__metadata("design:paramtypes", [Renderer2, ElementRef])
    ], FormChipsInputComponent);
    return FormChipsInputComponent;
}());
export { FormChipsInputComponent };
//# sourceMappingURL=data:application/json;base64,