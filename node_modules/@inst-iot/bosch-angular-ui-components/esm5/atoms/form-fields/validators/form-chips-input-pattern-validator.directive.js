import * as tslib_1 from "tslib";
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
/* tslint:disable:directive-selector */
var FormChipsInputPatternValidatorDirective = /** @class */ (function () {
    function FormChipsInputPatternValidatorDirective() {
    }
    FormChipsInputPatternValidatorDirective_1 = FormChipsInputPatternValidatorDirective;
    FormChipsInputPatternValidatorDirective.prototype.validate = function (c) {
        var _this = this;
        var hasInvalid = false;
        if (c.value && this.pattern) {
            c.value.forEach(function (el) {
                if (!el.match(_this.pattern)) {
                    hasInvalid = true;
                }
            });
            if (hasInvalid) {
                return { 'pattern': true };
            }
            else {
                return null;
            }
        }
        return null;
    };
    var FormChipsInputPatternValidatorDirective_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormChipsInputPatternValidatorDirective.prototype, "pattern", void 0);
    FormChipsInputPatternValidatorDirective = FormChipsInputPatternValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: 'rb-form-chips-input[pattern]',
            providers: [{
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return FormChipsInputPatternValidatorDirective_1; }),
                    multi: true
                }]
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], FormChipsInputPatternValidatorDirective);
    return FormChipsInputPatternValidatorDirective;
}());
export { FormChipsInputPatternValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jaGlwcy1pbnB1dC1wYXR0ZXJuLXZhbGlkYXRvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXRvbXMvZm9ybS1maWVsZHMvdmFsaWRhdG9ycy9mb3JtLWNoaXBzLWlucHV0LXBhdHRlcm4tdmFsaWRhdG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBbUIsYUFBYSxFQUErQixNQUFNLGdCQUFnQixDQUFDO0FBRTdGLHVDQUF1QztBQVN2QztJQUlFO0lBQ0EsQ0FBQztnREFMVSx1Q0FBdUM7SUFRbEQsMERBQVEsR0FBUixVQUFTLENBQWtCO1FBQTNCLGlCQWVDO1FBZEMsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUssQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQzNCLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUN6QixVQUFVLEdBQUcsSUFBSSxDQUFDO2lCQUNyQjtZQUNGLENBQUMsQ0FBQyxDQUFDO1lBQ0osSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsT0FBTyxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQzthQUMxQjtpQkFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7O0lBckJRO1FBQVIsS0FBSyxFQUFFOzs0RUFBUztJQUZOLHVDQUF1QztRQVJuRCxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsOEJBQThCO1lBQ3hDLFNBQVMsRUFBRSxDQUFDO29CQUNWLE9BQU8sRUFBRSxhQUFhO29CQUN0QixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSx5Q0FBdUMsRUFBdkMsQ0FBdUMsQ0FBQztvQkFDdEUsS0FBSyxFQUFFLElBQUk7aUJBQ1osQ0FBQztTQUNILENBQUM7O09BQ1csdUNBQXVDLENBeUJuRDtJQUFELDhDQUFDO0NBQUEsQUF6QkQsSUF5QkM7U0F6QlksdUNBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1zZWxlY3RvciAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ3JiLWZvcm0tY2hpcHMtaW5wdXRbcGF0dGVybl0nLFxyXG4gIHByb3ZpZGVyczogW3tcclxuICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXHJcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBGb3JtQ2hpcHNJbnB1dFBhdHRlcm5WYWxpZGF0b3JEaXJlY3RpdmUpLFxyXG4gICAgbXVsdGk6IHRydWVcclxuICB9XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRm9ybUNoaXBzSW5wdXRQYXR0ZXJuVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcclxuXHJcbiAgQElucHV0KCkgcGF0dGVybjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgfVxyXG5cclxuXHJcbiAgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xyXG4gICAgbGV0IGhhc0ludmFsaWQgPSBmYWxzZTtcclxuICAgIGlmICggYy52YWx1ZSAmJiB0aGlzLnBhdHRlcm4pIHtcclxuICAgICAgIGMudmFsdWUuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgICAgaWYgKCFlbC5tYXRjaCh0aGlzLnBhdHRlcm4pKSB7XHJcbiAgICAgICAgICAgIGhhc0ludmFsaWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgIH0pO1xyXG4gICAgICBpZiAoaGFzSW52YWxpZCkge1xyXG4gICAgICAgIHJldHVybiB7J3BhdHRlcm4nOiB0cnVlfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuIl19