import * as tslib_1 from "tslib";
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
/* tslint:disable:directive-selector */
var FormFileValidatorDirective = /** @class */ (function () {
    function FormFileValidatorDirective() {
    }
    FormFileValidatorDirective_1 = FormFileValidatorDirective;
    FormFileValidatorDirective.prototype.ngOnChanges = function (changes) {
        if (this.onChange && (changes.min || changes.max || changes.maxSize)) {
            this.onChange();
        }
    };
    FormFileValidatorDirective.prototype.validate = function (c) {
        var errors = {};
        var minNumber = this.min ? parseInt(this.min, 10) : 0;
        var maxNumber = this.max ? parseInt(this.max, 10) : 0;
        var maxSize = this.maxSize ? parseInt(this.maxSize, 10) : 0;
        if (minNumber && (!c.value || Array.isArray(c.value) && c.value.length < minNumber)) {
            errors.min = true;
        }
        if (maxNumber && (!c.value || Array.isArray(c.value) && c.value.length > maxNumber)) {
            errors.max = true;
        }
        if (maxSize && Array.isArray(c.value)) {
            c.value.some(function (file) {
                if (file.size > maxSize) {
                    errors.maxSize = file.name;
                    return true;
                }
                return false;
            });
        }
        return Object.keys(errors).length ? errors : null;
    };
    FormFileValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
        this.onChange = fn;
    };
    var FormFileValidatorDirective_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FormFileValidatorDirective.prototype, "min", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FormFileValidatorDirective.prototype, "max", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FormFileValidatorDirective.prototype, "maxSize", void 0);
    FormFileValidatorDirective = FormFileValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: 'rb-form-file[min],rb-form-file[max],rb-form-file[min],rb-form-file[maxSize]',
            providers: [{
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return FormFileValidatorDirective_1; }),
                    multi: true
                }]
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], FormFileValidatorDirective);
    return FormFileValidatorDirective;
}());
export { FormFileValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1maWxlLXZhbGlkYXRvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiYXRvbXMvZm9ybS1maWVsZHMvdmFsaWRhdG9ycy9mb3JtLWZpbGUtdmFsaWRhdG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUN2RixPQUFPLEVBQW1CLGFBQWEsRUFBK0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3Rix1Q0FBdUM7QUFTdkM7SUFRRTtJQUNBLENBQUM7bUNBVFUsMEJBQTBCO0lBWXJDLGdEQUFXLEdBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3BFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNqQjtJQUNILENBQUM7SUFFRCw2Q0FBUSxHQUFSLFVBQVMsQ0FBa0I7UUFDekIsSUFBTSxNQUFNLEdBQXFCLEVBQUUsQ0FBQztRQUNwQyxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEQsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RCxJQUFJLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsRUFBRTtZQUNuRixNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztTQUNuQjtRQUNELElBQUksU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxFQUFFO1lBQ25GLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1NBQ25CO1FBQ0QsSUFBSSxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDckMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFVO2dCQUN0QixJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxFQUFFO29CQUN2QixNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7b0JBQzNCLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2dCQUNELE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3BELENBQUM7SUFFRCw4REFBeUIsR0FBekIsVUFBMEIsRUFBYztRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDOztJQXZDUTtRQUFSLEtBQUssRUFBRTs7MkRBQWE7SUFDWjtRQUFSLEtBQUssRUFBRTs7MkRBQWE7SUFDWjtRQUFSLEtBQUssRUFBRTs7K0RBQWlCO0lBTmQsMEJBQTBCO1FBUnRDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSw2RUFBNkU7WUFDdkYsU0FBUyxFQUFFLENBQUM7b0JBQ1YsT0FBTyxFQUFFLGFBQWE7b0JBQ3RCLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLDRCQUEwQixFQUExQixDQUEwQixDQUFDO29CQUN6RCxLQUFLLEVBQUUsSUFBSTtpQkFDWixDQUFDO1NBQ0gsQ0FBQzs7T0FDVywwQkFBMEIsQ0E0Q3RDO0lBQUQsaUNBQUM7Q0FBQSxBQTVDRCxJQTRDQztTQTVDWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIGZvcndhcmRSZWYsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgTkdfVkFMSURBVE9SUywgVmFsaWRhdGlvbkVycm9ycywgVmFsaWRhdG9yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpkaXJlY3RpdmUtc2VsZWN0b3IgKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ3JiLWZvcm0tZmlsZVttaW5dLHJiLWZvcm0tZmlsZVttYXhdLHJiLWZvcm0tZmlsZVttaW5dLHJiLWZvcm0tZmlsZVttYXhTaXplXScsXG4gIHByb3ZpZGVyczogW3tcbiAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEZvcm1GaWxlVmFsaWRhdG9yRGlyZWN0aXZlKSxcbiAgICBtdWx0aTogdHJ1ZVxuICB9XVxufSlcbmV4cG9ydCBjbGFzcyBGb3JtRmlsZVZhbGlkYXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciwgT25DaGFuZ2VzIHtcblxuICBwcml2YXRlIG9uQ2hhbmdlOiAoKSA9PiB2b2lkO1xuXG4gIEBJbnB1dCgpIG1pbjogc3RyaW5nO1xuICBASW5wdXQoKSBtYXg6IHN0cmluZztcbiAgQElucHV0KCkgbWF4U2l6ZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKHRoaXMub25DaGFuZ2UgJiYgKGNoYW5nZXMubWluIHx8IGNoYW5nZXMubWF4IHx8IGNoYW5nZXMubWF4U2l6ZSkpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XG4gICAgY29uc3QgZXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzID0ge307XG4gICAgY29uc3QgbWluTnVtYmVyID0gdGhpcy5taW4gPyBwYXJzZUludCh0aGlzLm1pbiwgMTApIDogMDtcbiAgICBjb25zdCBtYXhOdW1iZXIgPSB0aGlzLm1heCA/IHBhcnNlSW50KHRoaXMubWF4LCAxMCkgOiAwO1xuICAgIGNvbnN0IG1heFNpemUgPSB0aGlzLm1heFNpemUgPyBwYXJzZUludCh0aGlzLm1heFNpemUsIDEwKSA6IDA7XG4gICAgaWYgKG1pbk51bWJlciAmJiAoIWMudmFsdWUgfHwgQXJyYXkuaXNBcnJheShjLnZhbHVlKSAmJiBjLnZhbHVlLmxlbmd0aCA8IG1pbk51bWJlcikpIHtcbiAgICAgIGVycm9ycy5taW4gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAobWF4TnVtYmVyICYmICghYy52YWx1ZSB8fCBBcnJheS5pc0FycmF5KGMudmFsdWUpICYmIGMudmFsdWUubGVuZ3RoID4gbWF4TnVtYmVyKSkge1xuICAgICAgZXJyb3JzLm1heCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChtYXhTaXplICYmIEFycmF5LmlzQXJyYXkoYy52YWx1ZSkpIHtcbiAgICAgIGMudmFsdWUuc29tZSgoZmlsZTogRmlsZSkgPT4ge1xuICAgICAgICBpZiAoZmlsZS5zaXplID4gbWF4U2l6ZSkge1xuICAgICAgICAgIGVycm9ycy5tYXhTaXplID0gZmlsZS5uYW1lO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZXJyb3JzKS5sZW5ndGggPyBlcnJvcnMgOiBudWxsO1xuICB9XG5cbiAgcmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZShmbjogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxufVxuIl19