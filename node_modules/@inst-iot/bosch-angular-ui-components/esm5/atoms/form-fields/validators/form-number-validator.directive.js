import * as tslib_1 from "tslib";
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
var FormNumberValidatorDirective = /** @class */ (function () {
    function FormNumberValidatorDirective() {
    }
    FormNumberValidatorDirective_1 = FormNumberValidatorDirective;
    FormNumberValidatorDirective.prototype.validate = function (control) {
        if (control.value === '') {
            return null;
        }
        var value = typeof (control.value) === 'number' ? control.value : parseFloat(control.value);
        var errors = {};
        if (this.rbMin !== undefined && value < this.rbMin) {
            errors.rbMin = this.rbMin;
        }
        if (this.rbMax !== undefined && value > this.rbMax) {
            errors.rbMax = this.rbMax;
        }
        return Object.keys(errors).length ? errors : null;
    };
    var FormNumberValidatorDirective_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], FormNumberValidatorDirective.prototype, "rbMin", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number)
    ], FormNumberValidatorDirective.prototype, "rbMax", void 0);
    FormNumberValidatorDirective = FormNumberValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: '[rbMin],[rbMax]',
            providers: [{
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return FormNumberValidatorDirective_1; }),
                    multi: true
                }]
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], FormNumberValidatorDirective);
    return FormNumberValidatorDirective;
}());
export { FormNumberValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1udW1iZXItdmFsaWRhdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJhdG9tcy9mb3JtLWZpZWxkcy92YWxpZGF0b3JzL2Zvcm0tbnVtYmVyLXZhbGlkYXRvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQW1CLGFBQWEsRUFBK0IsTUFBTSxnQkFBZ0IsQ0FBQztBQVU3RjtJQUtFO0lBQ0EsQ0FBQztxQ0FOVSw0QkFBNEI7SUFRdkMsK0NBQVEsR0FBUixVQUFTLE9BQXdCO1FBQy9CLElBQUksT0FBTyxDQUFDLEtBQUssS0FBSyxFQUFFLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlGLElBQU0sTUFBTSxHQUFxQixFQUFFLENBQUM7UUFDcEMsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNsRCxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDM0I7UUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2xELE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUMzQjtRQUVELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3BELENBQUM7O0lBcEJRO1FBQVIsS0FBSyxFQUFFOzsrREFBZTtJQUNkO1FBQVIsS0FBSyxFQUFFOzsrREFBZTtJQUhaLDRCQUE0QjtRQVJ4QyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFNBQVMsRUFBRSxDQUFDO29CQUNWLE9BQU8sRUFBRSxhQUFhO29CQUN0QixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSw4QkFBNEIsRUFBNUIsQ0FBNEIsQ0FBQztvQkFDM0QsS0FBSyxFQUFFLElBQUk7aUJBQ1osQ0FBQztTQUNILENBQUM7O09BQ1csNEJBQTRCLENBeUJ4QztJQUFELG1DQUFDO0NBQUEsQUF6QkQsSUF5QkM7U0F6QlksNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBOR19WQUxJREFUT1JTLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyYk1pbl0sW3JiTWF4XScsXG4gIHByb3ZpZGVyczogW3tcbiAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEZvcm1OdW1iZXJWYWxpZGF0b3JEaXJlY3RpdmUpLFxuICAgIG11bHRpOiB0cnVlXG4gIH1dXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1OdW1iZXJWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3Ige1xuXG4gIEBJbnB1dCgpIHJiTWluOiBudW1iZXI7XG4gIEBJbnB1dCgpIHJiTWF4OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICB2YWxpZGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XG4gICAgaWYgKGNvbnRyb2wudmFsdWUgPT09ICcnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgKGNvbnRyb2wudmFsdWUpID09PSAnbnVtYmVyJyA/IGNvbnRyb2wudmFsdWUgOiBwYXJzZUZsb2F0KGNvbnRyb2wudmFsdWUpO1xuICAgIGNvbnN0IGVycm9yczogVmFsaWRhdGlvbkVycm9ycyA9IHt9O1xuICAgIGlmICh0aGlzLnJiTWluICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgPCB0aGlzLnJiTWluKSB7XG4gICAgICBlcnJvcnMucmJNaW4gPSB0aGlzLnJiTWluO1xuICAgIH1cbiAgICBpZiAodGhpcy5yYk1heCAhPT0gdW5kZWZpbmVkICYmIHZhbHVlID4gdGhpcy5yYk1heCkge1xuICAgICAgZXJyb3JzLnJiTWF4ID0gdGhpcy5yYk1heDtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZXJyb3JzKS5sZW5ndGggPyBlcnJvcnMgOiBudWxsO1xuICB9XG5cblxufVxuIl19