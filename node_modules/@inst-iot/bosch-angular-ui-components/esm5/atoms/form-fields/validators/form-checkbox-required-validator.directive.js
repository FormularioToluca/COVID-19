import * as tslib_1 from "tslib";
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
/* tslint:disable:directive-selector */
var FormCheckboxRequiredValidatorDirective = /** @class */ (function () {
    function FormCheckboxRequiredValidatorDirective() {
        this.statesMode = 'check';
    }
    FormCheckboxRequiredValidatorDirective_1 = FormCheckboxRequiredValidatorDirective;
    Object.defineProperty(FormCheckboxRequiredValidatorDirective.prototype, "required", {
        get: function () {
            return this._required;
        },
        set: function (value) {
            this._required = value != null && value !== false && "" + value !== 'false';
            if (this._onChange) {
                this._onChange();
            }
        },
        enumerable: true,
        configurable: true
    });
    FormCheckboxRequiredValidatorDirective.prototype.validate = function (c) {
        if (this.required) {
            return this.hasValue(c) ? null : { 'required': true };
        }
        return null;
    };
    FormCheckboxRequiredValidatorDirective.prototype.hasValue = function (c) {
        if (typeof (c.value) === 'boolean') {
            return c.value === true;
        }
        if (typeof (c.value) === 'object' && c.value) {
            var values = Object.keys(c.value).map(function (key) { return c.value[key]; });
            if (this.statesMode === 'optCheck') {
                return values.some(function (v) { return v !== null; });
            }
            if (this.statesMode === 'check') {
                return values.some(function (v) { return v !== false; });
            }
        }
        return true;
    };
    FormCheckboxRequiredValidatorDirective.prototype.registerOnValidatorChange = function (fn) {
        this._onChange = fn;
    };
    var FormCheckboxRequiredValidatorDirective_1;
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], FormCheckboxRequiredValidatorDirective.prototype, "statesMode", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], FormCheckboxRequiredValidatorDirective.prototype, "required", null);
    FormCheckboxRequiredValidatorDirective = FormCheckboxRequiredValidatorDirective_1 = tslib_1.__decorate([
        Directive({
            selector: 'rb-form-checkbox[required],rb-form-multi-select[required]',
            providers: [{
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return FormCheckboxRequiredValidatorDirective_1; }),
                    multi: true
                }]
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], FormCheckboxRequiredValidatorDirective);
    return FormCheckboxRequiredValidatorDirective;
}());
export { FormCheckboxRequiredValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jaGVja2JveC1yZXF1aXJlZC12YWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImF0b21zL2Zvcm0tZmllbGRzL3ZhbGlkYXRvcnMvZm9ybS1jaGVja2JveC1yZXF1aXJlZC12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFtQixhQUFhLEVBQStCLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0YsdUNBQXVDO0FBU3ZDO0lBTUU7UUFGUyxlQUFVLEdBQXlCLE9BQU8sQ0FBQztJQUdwRCxDQUFDOytDQVBVLHNDQUFzQztJQVVqRCxzQkFBSSw0REFBUTthQUFaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7YUFFRCxVQUFhLEtBQXVCO1lBQ2xDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxJQUFJLEtBQUcsS0FBTyxLQUFLLE9BQU8sQ0FBQztZQUM1RSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNsQjtRQUNILENBQUM7OztPQVBBO0lBU0QseURBQVEsR0FBUixVQUFTLENBQWtCO1FBQ3pCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFDLENBQUM7U0FDckQ7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCx5REFBUSxHQUFSLFVBQVMsQ0FBa0I7UUFDekIsSUFBSSxPQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUNqQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDO1NBQ3pCO1FBQ0QsSUFBSSxPQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFO1lBQzNDLElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQVosQ0FBWSxDQUFDLENBQUM7WUFDN0QsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFVBQVUsRUFBRTtnQkFDbEMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxLQUFLLElBQUksRUFBVixDQUFVLENBQUMsQ0FBQzthQUNyQztZQUNELElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxPQUFPLEVBQUU7Z0JBQy9CLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsS0FBSyxLQUFLLEVBQVgsQ0FBVyxDQUFDLENBQUM7YUFDdEM7U0FDRjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDBFQUF5QixHQUF6QixVQUEwQixFQUFjO1FBQ3RDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7O0lBMUNRO1FBQVIsS0FBSyxFQUFFOzs4RUFBNEM7SUFNcEQ7UUFEQyxLQUFLLEVBQUU7OzswRUFHUDtJQVpVLHNDQUFzQztRQVJsRCxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsMkRBQTJEO1lBQ3JFLFNBQVMsRUFBRSxDQUFDO29CQUNWLE9BQU8sRUFBRSxhQUFhO29CQUN0QixXQUFXLEVBQUUsVUFBVSxDQUFDLGNBQU0sT0FBQSx3Q0FBc0MsRUFBdEMsQ0FBc0MsQ0FBQztvQkFDckUsS0FBSyxFQUFFLElBQUk7aUJBQ1osQ0FBQztTQUNILENBQUM7O09BQ1csc0NBQXNDLENBZ0RsRDtJQUFELDZDQUFDO0NBQUEsQUFoREQsSUFnREM7U0FoRFksc0NBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBOR19WQUxJREFUT1JTLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbi8qIHRzbGludDpkaXNhYmxlOmRpcmVjdGl2ZS1zZWxlY3RvciAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAncmItZm9ybS1jaGVja2JveFtyZXF1aXJlZF0scmItZm9ybS1tdWx0aS1zZWxlY3RbcmVxdWlyZWRdJyxcbiAgcHJvdmlkZXJzOiBbe1xuICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRm9ybUNoZWNrYm94UmVxdWlyZWRWYWxpZGF0b3JEaXJlY3RpdmUpLFxuICAgIG11bHRpOiB0cnVlXG4gIH1dXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1DaGVja2JveFJlcXVpcmVkVmFsaWRhdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcbiAgcHJpdmF0ZSBfcmVxdWlyZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgX29uQ2hhbmdlOiAoKSA9PiB2b2lkO1xuXG4gIEBJbnB1dCgpIHN0YXRlc01vZGU6ICdjaGVjaycgfCAnb3B0Q2hlY2snID0gJ2NoZWNrJztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIGdldCByZXF1aXJlZCgpOiBib29sZWFuIHwgc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fcmVxdWlyZWQ7XG4gIH1cblxuICBzZXQgcmVxdWlyZWQodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9yZXF1aXJlZCA9IHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09IGZhbHNlICYmIGAke3ZhbHVlfWAgIT09ICdmYWxzZSc7XG4gICAgaWYgKHRoaXMuX29uQ2hhbmdlKSB7XG4gICAgICB0aGlzLl9vbkNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlKGM6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsIHtcbiAgICBpZiAodGhpcy5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFzVmFsdWUoYykgPyBudWxsIDogeydyZXF1aXJlZCc6IHRydWV9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGhhc1ZhbHVlKGM6IEFic3RyYWN0Q29udHJvbCk6IGJvb2xlYW4ge1xuICAgIGlmICh0eXBlb2YoYy52YWx1ZSkgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIGMudmFsdWUgPT09IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YoYy52YWx1ZSkgPT09ICdvYmplY3QnICYmIGMudmFsdWUpIHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IE9iamVjdC5rZXlzKGMudmFsdWUpLm1hcChrZXkgPT4gYy52YWx1ZVtrZXldKTtcbiAgICAgIGlmICh0aGlzLnN0YXRlc01vZGUgPT09ICdvcHRDaGVjaycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5zb21lKHYgPT4gdiAhPT0gbnVsbCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZXNNb2RlID09PSAnY2hlY2snKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMuc29tZSh2ID0+IHYgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5fb25DaGFuZ2UgPSBmbjtcbiAgfVxuXG59XG4iXX0=