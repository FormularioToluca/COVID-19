import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, Input, Optional, QueryList } from '@angular/core';
import { NgControl } from '@angular/forms';
var FormErrorsComponent = /** @class */ (function () {
    function FormErrorsComponent(control, cd) {
        this.control = control;
        this.cd = cd;
        this.errors = [];
    }
    FormErrorsComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.control) {
            this.sub = this.control.statusChanges.subscribe(function (value) {
                _this.errors = _this.getErrors();
                _this.cd.markForCheck();
            });
        }
    };
    FormErrorsComponent.prototype.ngOnDestroy = function () {
        if (this.sub) {
            this.sub.unsubscribe();
        }
    };
    FormErrorsComponent.prototype.ngDoCheck = function () {
        this.errors = this.getErrors();
    };
    FormErrorsComponent.prototype.getErrors = function () {
        var e_1, _a;
        var errors = [];
        if (this.control && this.control.errors && (this.control.touched || this.control.dirty)) {
            var errorKeys = Object.keys(this.control.errors);
            var _loop_1 = function (key) {
                var message = this_1.messages.find(function (item) { return item.name === key; });
                if (message && (message.onTouched || !message.onTouched && this_1.control.dirty)) {
                    errors.push({
                        name: key,
                        data: this_1.control.errors[key],
                        message: message.templateRef
                    });
                }
            };
            var this_1 = this;
            try {
                for (var errorKeys_1 = tslib_1.__values(errorKeys), errorKeys_1_1 = errorKeys_1.next(); !errorKeys_1_1.done; errorKeys_1_1 = errorKeys_1.next()) {
                    var key = errorKeys_1_1.value;
                    _loop_1(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (errorKeys_1_1 && !errorKeys_1_1.done && (_a = errorKeys_1.return)) _a.call(errorKeys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return errors;
    };
    FormErrorsComponent.prototype.getItemName = function (i, item) {
        return item.name;
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", QueryList)
    ], FormErrorsComponent.prototype, "messages", void 0);
    FormErrorsComponent = tslib_1.__decorate([
        Component({
            selector: 'rb-form-errors',
            template: "<div class=\"error-messages\" *ngIf=\"control && control.invalid && errors.length\">\n  <div *ngFor=\"let item of errors; trackBy: getItemName\">\n    <ng-container *ngTemplateOutlet=\"item.message; context: item\"></ng-container>\n  </div>\n</div>\n"
        }),
        tslib_1.__param(0, Optional()),
        tslib_1.__metadata("design:paramtypes", [NgControl,
            ChangeDetectorRef])
    ], FormErrorsComponent);
    return FormErrorsComponent;
}());
export { FormErrorsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1lcnJvcnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImF0b21zL2Zvcm0tZmllbGRzL2Zvcm0tZXJyb3JzL2Zvcm0tZXJyb3JzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBVyxLQUFLLEVBQXFCLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTzNDO0lBUUUsNkJBQStCLE9BQWtCLEVBQzdCLEVBQXFCO1FBRFYsWUFBTyxHQUFQLE9BQU8sQ0FBVztRQUM3QixPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUx6QyxXQUFNLEdBQUcsRUFBRSxDQUFDO0lBTVosQ0FBQztJQUVELHNDQUFRLEdBQVI7UUFBQSxpQkFRQztRQVBDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxVQUFBLEtBQUs7Z0JBQ25ELEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUMvQixLQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFFSCxDQUFDO0lBRUQseUNBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRUQsdUNBQVMsR0FBVDtRQUNFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCx1Q0FBUyxHQUFUOztRQUNFLElBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZGLElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztvQ0FDeEMsR0FBRztnQkFDWixJQUFNLE9BQU8sR0FBRyxPQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBakIsQ0FBaUIsQ0FBQyxDQUFDO2dCQUM5RCxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLE9BQUssT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUM5RSxNQUFNLENBQUMsSUFBSSxDQUFDO3dCQUNWLElBQUksRUFBRSxHQUFHO3dCQUNULElBQUksRUFBRSxPQUFLLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO3dCQUM5QixPQUFPLEVBQUUsT0FBTyxDQUFDLFdBQVc7cUJBQzdCLENBQUMsQ0FBQztpQkFDSjs7OztnQkFSSCxLQUFrQixJQUFBLGNBQUEsaUJBQUEsU0FBUyxDQUFBLG9DQUFBO29CQUF0QixJQUFNLEdBQUcsc0JBQUE7NEJBQUgsR0FBRztpQkFTYjs7Ozs7Ozs7O1NBQ0Y7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQseUNBQVcsR0FBWCxVQUFZLENBQUMsRUFBRSxJQUFJO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBbERRO1FBQVIsS0FBSyxFQUFFOzBDQUFXLFNBQVM7eURBQWlDO0lBRmxELG1CQUFtQjtRQUovQixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLHNRQUEyQztTQUM1QyxDQUFDO1FBU2EsbUJBQUEsUUFBUSxFQUFFLENBQUE7aURBQWlCLFNBQVM7WUFDekIsaUJBQWlCO09BVDlCLG1CQUFtQixDQXNEL0I7SUFBRCwwQkFBQztDQUFBLEFBdERELElBc0RDO1NBdERZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIERvQ2hlY2ssIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3B0aW9uYWwsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9ybVZhbGlkYXRpb25NZXNzYWdlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZm9ybS12YWxpZGF0aW9uLW1lc3NhZ2UuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncmItZm9ybS1lcnJvcnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1lcnJvcnMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1FcnJvcnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgRG9DaGVjayB7XG5cbiAgQElucHV0KCkgbWVzc2FnZXM6IFF1ZXJ5TGlzdDxGb3JtVmFsaWRhdGlvbk1lc3NhZ2VEaXJlY3RpdmU+O1xuXG4gIGVycm9ycyA9IFtdO1xuXG4gIHByaXZhdGUgc3ViO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHB1YmxpYyBjb250cm9sOiBOZ0NvbnRyb2wsXG4gICAgICAgICAgICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICB0aGlzLnN1YiA9IHRoaXMuY29udHJvbC5zdGF0dXNDaGFuZ2VzLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5nZXRFcnJvcnMoKTtcbiAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3ViKSB7XG4gICAgICB0aGlzLnN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIG5nRG9DaGVjaygpOiB2b2lkIHtcbiAgICB0aGlzLmVycm9ycyA9IHRoaXMuZ2V0RXJyb3JzKCk7XG4gIH1cblxuICBnZXRFcnJvcnMoKSB7XG4gICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgaWYgKHRoaXMuY29udHJvbCAmJiB0aGlzLmNvbnRyb2wuZXJyb3JzICYmICh0aGlzLmNvbnRyb2wudG91Y2hlZCB8fCB0aGlzLmNvbnRyb2wuZGlydHkpKSB7XG4gICAgICBjb25zdCBlcnJvcktleXMgPSBPYmplY3Qua2V5cyh0aGlzLmNvbnRyb2wuZXJyb3JzKTtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIGVycm9yS2V5cykge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5tZXNzYWdlcy5maW5kKGl0ZW0gPT4gaXRlbS5uYW1lID09PSBrZXkpO1xuICAgICAgICBpZiAobWVzc2FnZSAmJiAobWVzc2FnZS5vblRvdWNoZWQgfHwgIW1lc3NhZ2Uub25Ub3VjaGVkICYmIHRoaXMuY29udHJvbC5kaXJ0eSkpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICBkYXRhOiB0aGlzLmNvbnRyb2wuZXJyb3JzW2tleV0sXG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLnRlbXBsYXRlUmVmXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycztcbiAgfVxuXG4gIGdldEl0ZW1OYW1lKGksIGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS5uYW1lO1xuICB9XG5cbn1cbiJdfQ==