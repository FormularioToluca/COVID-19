import * as tslib_1 from "tslib";
import { Component, ContentChildren, Input, QueryList } from '@angular/core';
import { AccordionTitleComponent } from './accordion-title/accordion-title.component';
import { AccordionBodyComponent } from './accordion-body/accordion-body.component';
import { AccordionService } from './accordion.service';
/**
 * <rb-accordion> is the container for
 * <rb-accordion-title> and <rb-accordion-body>
 */
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent(accordion) {
        this.accordion = accordion;
        /**
         * Whether only one can be opened.
         */
        this.openSingle = false;
        this.updateSub = null;
    }
    AccordionComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.updateSub = this.accordion.updateState.subscribe(function (t) { return _this.updateState(t); });
    };
    AccordionComponent.prototype.ngOnDestroy = function () {
        if (this.updateSub) {
            this.updateSub.unsubscribe();
        }
    };
    AccordionComponent.prototype.updateState = function (title) {
        var titles = this.titles.toArray();
        var bodies = this.bodies.toArray();
        var index = titles.indexOf(title);
        if (index !== -1) {
            var component = bodies[index];
            if (title.open) {
                component.open();
            }
            else {
                component.close();
            }
            if (this.openSingle) {
                for (var i = 0; i < titles.length; i++) {
                    var title2 = titles[i];
                    var body = bodies[i];
                    if (i !== index && title2.open) {
                        title2.open = false;
                        body.close();
                    }
                }
            }
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], AccordionComponent.prototype, "openSingle", void 0);
    tslib_1.__decorate([
        ContentChildren(AccordionTitleComponent),
        tslib_1.__metadata("design:type", QueryList)
    ], AccordionComponent.prototype, "titles", void 0);
    tslib_1.__decorate([
        ContentChildren(AccordionBodyComponent),
        tslib_1.__metadata("design:type", QueryList)
    ], AccordionComponent.prototype, "bodies", void 0);
    AccordionComponent = tslib_1.__decorate([
        Component({
            selector: 'rb-accordion',
            template: "<ng-content></ng-content>\r\n",
            providers: [AccordionService]
        }),
        tslib_1.__metadata("design:paramtypes", [AccordionService])
    ], AccordionComponent);
    return AccordionComponent;
}());
export { AccordionComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJtb2xlY3VsZXMvYWNjb3JkaW9uL2FjY29yZGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBcUIsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXZEOzs7R0FHRztBQU1IO0lBYUUsNEJBQW9CLFNBQTJCO1FBQTNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBWC9DOztXQUVHO1FBQ00sZUFBVSxHQUFHLEtBQUssQ0FBQztRQU1wQixjQUFTLEdBQUcsSUFBSSxDQUFDO0lBR3pCLENBQUM7SUFFRCxxQ0FBUSxHQUFSO1FBQUEsaUJBRUM7UUFEQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQW5CLENBQW1CLENBQUMsQ0FBQztJQUNsRixDQUFDO0lBRUQsd0NBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztJQUVELHdDQUFXLEdBQVgsVUFBWSxLQUE4QjtRQUN4QyxJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3JDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDckMsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEMsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO2dCQUNkLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNsQjtpQkFBTTtnQkFDTCxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDbkI7WUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ25CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUN0QyxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pCLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdkIsSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7d0JBQzlCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO3dCQUNwQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7cUJBQ2Q7aUJBQ0Y7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQTNDUTtRQUFSLEtBQUssRUFBRTs7MERBQW9CO0lBR2M7UUFBekMsZUFBZSxDQUFDLHVCQUF1QixDQUFDOzBDQUFTLFNBQVM7c0RBQTBCO0lBQzVDO1FBQXhDLGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQzswQ0FBUyxTQUFTO3NEQUF5QjtJQVR4RSxrQkFBa0I7UUFMOUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGNBQWM7WUFDeEIseUNBQXlDO1lBQ3pDLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDO1NBQzlCLENBQUM7aURBYytCLGdCQUFnQjtPQWJwQyxrQkFBa0IsQ0FrRDlCO0lBQUQseUJBQUM7Q0FBQSxBQWxERCxJQWtEQztTQWxEWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZHJlbiwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWNjb3JkaW9uVGl0bGVDb21wb25lbnQgfSBmcm9tICcuL2FjY29yZGlvbi10aXRsZS9hY2NvcmRpb24tdGl0bGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQWNjb3JkaW9uQm9keUNvbXBvbmVudCB9IGZyb20gJy4vYWNjb3JkaW9uLWJvZHkvYWNjb3JkaW9uLWJvZHkuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQWNjb3JkaW9uU2VydmljZSB9IGZyb20gJy4vYWNjb3JkaW9uLnNlcnZpY2UnO1xyXG5cclxuLyoqXHJcbiAqIDxyYi1hY2NvcmRpb24+IGlzIHRoZSBjb250YWluZXIgZm9yXHJcbiAqIDxyYi1hY2NvcmRpb24tdGl0bGU+IGFuZCA8cmItYWNjb3JkaW9uLWJvZHk+XHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3JiLWFjY29yZGlvbicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2FjY29yZGlvbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgcHJvdmlkZXJzOiBbQWNjb3JkaW9uU2VydmljZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEFjY29yZGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgLyoqXHJcbiAgICogV2hldGhlciBvbmx5IG9uZSBjYW4gYmUgb3BlbmVkLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIG9wZW5TaW5nbGUgPSBmYWxzZTtcclxuXHJcblxyXG4gIEBDb250ZW50Q2hpbGRyZW4oQWNjb3JkaW9uVGl0bGVDb21wb25lbnQpIHRpdGxlczogUXVlcnlMaXN0PEFjY29yZGlvblRpdGxlQ29tcG9uZW50PjtcclxuICBAQ29udGVudENoaWxkcmVuKEFjY29yZGlvbkJvZHlDb21wb25lbnQpIGJvZGllczogUXVlcnlMaXN0PEFjY29yZGlvbkJvZHlDb21wb25lbnQ+O1xyXG5cclxuICBwcml2YXRlIHVwZGF0ZVN1YiA9IG51bGw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYWNjb3JkaW9uOiBBY2NvcmRpb25TZXJ2aWNlKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIHRoaXMudXBkYXRlU3ViID0gdGhpcy5hY2NvcmRpb24udXBkYXRlU3RhdGUuc3Vic2NyaWJlKHQgPT4gdGhpcy51cGRhdGVTdGF0ZSh0KSk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnVwZGF0ZVN1Yikge1xyXG4gICAgICB0aGlzLnVwZGF0ZVN1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlU3RhdGUodGl0bGU6IEFjY29yZGlvblRpdGxlQ29tcG9uZW50KSB7XHJcbiAgICBjb25zdCB0aXRsZXMgPSB0aGlzLnRpdGxlcy50b0FycmF5KCk7XHJcbiAgICBjb25zdCBib2RpZXMgPSB0aGlzLmJvZGllcy50b0FycmF5KCk7XHJcbiAgICBjb25zdCBpbmRleCA9IHRpdGxlcy5pbmRleE9mKHRpdGxlKTtcclxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgY29uc3QgY29tcG9uZW50ID0gYm9kaWVzW2luZGV4XTtcclxuICAgICAgaWYgKHRpdGxlLm9wZW4pIHtcclxuICAgICAgICBjb21wb25lbnQub3BlbigpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbXBvbmVudC5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLm9wZW5TaW5nbGUpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpdGxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgY29uc3QgdGl0bGUyID0gdGl0bGVzW2ldO1xyXG4gICAgICAgICAgY29uc3QgYm9keSA9IGJvZGllc1tpXTtcclxuICAgICAgICAgIGlmIChpICE9PSBpbmRleCAmJiB0aXRsZTIub3Blbikge1xyXG4gICAgICAgICAgICB0aXRsZTIub3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBib2R5LmNsb3NlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=