import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { LoadingEntity } from './loading-utils';
import { LoadingStatusComponent } from './loading-status/loading-status.component';
var LoadingDirective = /** @class */ (function () {
    function LoadingDirective(templateRef, viewContainer, componentFactory) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.componentFactory = componentFactory;
        this.loadingRef = null;
        this.viewRef = null;
        this.rbLoadingSize = 1;
    }
    LoadingDirective.prototype.ngDoCheck = function () {
        if (this.loadingEntity) {
            this.updateView(this.loadingEntity.loading || this.loadingEntity.error);
        }
    };
    Object.defineProperty(LoadingDirective.prototype, "rbLoading", {
        set: function (state) {
            this.factory = this.componentFactory.resolveComponentFactory(LoadingStatusComponent);
            this.updateState(state);
        },
        enumerable: true,
        configurable: true
    });
    LoadingDirective.prototype.updateState = function (state) {
        if (state instanceof LoadingEntity) {
            this.loadingEntity = state;
            state = !!(this.loadingEntity.loading || this.loadingEntity.error);
        }
        this.updateView(state);
    };
    LoadingDirective.prototype.updateView = function (state) {
        if (state) {
            if (!this.loadingRef) {
                this.viewContainer.clear();
                this.viewRef = null;
                this.loadingRef = this.viewContainer.createComponent(this.factory);
                this.loadingRef.instance.loadingEntity = this.loadingEntity;
                this.loadingRef.instance.size = this.rbLoadingSize;
            }
        }
        else {
            if (!this.viewRef) {
                this.viewContainer.clear();
                this.loadingRef = null;
                this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef);
            }
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], LoadingDirective.prototype, "rbLoadingSize", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], LoadingDirective.prototype, "rbLoading", null);
    LoadingDirective = tslib_1.__decorate([
        Directive({
            selector: '[rbLoading]'
        }),
        tslib_1.__metadata("design:paramtypes", [TemplateRef,
            ViewContainerRef,
            ComponentFactoryResolver])
    ], LoadingDirective);
    return LoadingDirective;
}());
export { LoadingDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW5zdC1pb3QvYm9zY2gtYW5ndWxhci11aS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibW9sZWN1bGVzL2xvYWRpbmcvbG9hZGluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFFTCx3QkFBd0IsRUFBZ0IsU0FBUyxFQUE0QixLQUFLLEVBQUUsV0FBVyxFQUMvRixnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBS25GO0lBU0UsMEJBQW9CLFdBQTZCLEVBQzdCLGFBQStCLEVBQy9CLGdCQUEwQztRQUYxQyxnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7UUFDN0Isa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBMEI7UUFUdEQsZUFBVSxHQUF5QyxJQUFJLENBQUM7UUFDeEQsWUFBTyxHQUE0QyxJQUFJLENBQUM7UUFJdkQsa0JBQWEsR0FBRyxDQUFDLENBQUM7SUFJdUMsQ0FBQztJQUNuRSxvQ0FBUyxHQUFUO1FBQ0UsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6RTtJQUNILENBQUM7SUFHRCxzQkFBSSx1Q0FBUzthQUFiLFVBQWMsS0FBbUM7WUFDL0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUNyRixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFCLENBQUM7OztPQUFBO0lBRUQsc0NBQVcsR0FBWCxVQUFZLEtBQW1DO1FBQzdDLElBQUksS0FBSyxZQUFZLGFBQWEsRUFBRTtZQUNsQyxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUMzQixLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwRTtRQUNELElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELHFDQUFVLEdBQVYsVUFBVyxLQUFjO1FBQ3ZCLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDbkUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7Z0JBQzVELElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO2FBQ3BEO1NBRUY7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNqQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUMzQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztnQkFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUN4RTtTQUVGO0lBQ0gsQ0FBQztJQTNDUTtRQUFSLEtBQUssRUFBRTs7MkRBQW1CO0lBWTNCO1FBREMsS0FBSyxFQUFFOzs7cURBSVA7SUF0QlUsZ0JBQWdCO1FBSDVCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxhQUFhO1NBQ3hCLENBQUM7aURBVWlDLFdBQVc7WUFDVCxnQkFBZ0I7WUFDYix3QkFBd0I7T0FYbkQsZ0JBQWdCLENBbUQ1QjtJQUFELHVCQUFDO0NBQUEsQUFuREQsSUFtREM7U0FuRFksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50RmFjdG9yeSxcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDb21wb25lbnRSZWYsIERpcmVjdGl2ZSwgRG9DaGVjaywgRW1iZWRkZWRWaWV3UmVmLCBJbnB1dCwgVGVtcGxhdGVSZWYsXG4gIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2FkaW5nRW50aXR5IH0gZnJvbSAnLi9sb2FkaW5nLXV0aWxzJztcbmltcG9ydCB7IExvYWRpbmdTdGF0dXNDb21wb25lbnQgfSBmcm9tICcuL2xvYWRpbmctc3RhdHVzL2xvYWRpbmctc3RhdHVzLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyYkxvYWRpbmddJ1xufSlcbmV4cG9ydCBjbGFzcyBMb2FkaW5nRGlyZWN0aXZlIGltcGxlbWVudHMgRG9DaGVjayB7XG5cbiAgcHJpdmF0ZSBsb2FkaW5nUmVmOiBDb21wb25lbnRSZWY8TG9hZGluZ1N0YXR1c0NvbXBvbmVudD4gPSBudWxsO1xuICBwcml2YXRlIHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxMb2FkaW5nU3RhdHVzQ29tcG9uZW50PiA9IG51bGw7XG4gIHByaXZhdGUgbG9hZGluZ0VudGl0eTogTG9hZGluZ0VudGl0eTxhbnk+O1xuICBwcml2YXRlIGZhY3Rvcnk6IENvbXBvbmVudEZhY3Rvcnk8TG9hZGluZ1N0YXR1c0NvbXBvbmVudD47XG5cbiAgQElucHV0KCkgcmJMb2FkaW5nU2l6ZSA9IDE7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICAgICAgICAgICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgICAgICAgICAgICBwcml2YXRlIGNvbXBvbmVudEZhY3Rvcnk6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikgeyB9XG4gIG5nRG9DaGVjaygpIHtcbiAgICBpZiAodGhpcy5sb2FkaW5nRW50aXR5KSB7XG4gICAgICB0aGlzLnVwZGF0ZVZpZXcodGhpcy5sb2FkaW5nRW50aXR5LmxvYWRpbmcgfHwgdGhpcy5sb2FkaW5nRW50aXR5LmVycm9yKTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKVxuICBzZXQgcmJMb2FkaW5nKHN0YXRlOiBib29sZWFuIHwgTG9hZGluZ0VudGl0eTxhbnk+KSB7XG4gICAgdGhpcy5mYWN0b3J5ID0gdGhpcy5jb21wb25lbnRGYWN0b3J5LnJlc29sdmVDb21wb25lbnRGYWN0b3J5KExvYWRpbmdTdGF0dXNDb21wb25lbnQpO1xuICAgIHRoaXMudXBkYXRlU3RhdGUoc3RhdGUpO1xuICB9XG5cbiAgdXBkYXRlU3RhdGUoc3RhdGU6IGJvb2xlYW4gfCBMb2FkaW5nRW50aXR5PGFueT4pIHtcbiAgICBpZiAoc3RhdGUgaW5zdGFuY2VvZiBMb2FkaW5nRW50aXR5KSB7XG4gICAgICB0aGlzLmxvYWRpbmdFbnRpdHkgPSBzdGF0ZTtcbiAgICAgIHN0YXRlID0gISEodGhpcy5sb2FkaW5nRW50aXR5LmxvYWRpbmcgfHwgdGhpcy5sb2FkaW5nRW50aXR5LmVycm9yKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVWaWV3KHN0YXRlKTtcbiAgfVxuXG4gIHVwZGF0ZVZpZXcoc3RhdGU6IGJvb2xlYW4pIHtcbiAgICBpZiAoc3RhdGUpIHtcbiAgICAgIGlmICghdGhpcy5sb2FkaW5nUmVmKSB7XG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgICB0aGlzLnZpZXdSZWYgPSBudWxsO1xuICAgICAgICB0aGlzLmxvYWRpbmdSZWYgPSB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlQ29tcG9uZW50KHRoaXMuZmFjdG9yeSk7XG4gICAgICAgIHRoaXMubG9hZGluZ1JlZi5pbnN0YW5jZS5sb2FkaW5nRW50aXR5ID0gdGhpcy5sb2FkaW5nRW50aXR5O1xuICAgICAgICB0aGlzLmxvYWRpbmdSZWYuaW5zdGFuY2Uuc2l6ZSA9IHRoaXMucmJMb2FkaW5nU2l6ZTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXRoaXMudmlld1JlZikge1xuICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5sb2FkaW5nUmVmID0gbnVsbDtcbiAgICAgICAgdGhpcy52aWV3UmVmID0gdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICAgIH1cblxuICAgIH1cbiAgfVxufVxuIl19