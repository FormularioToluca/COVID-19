import { InjectionToken } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
export var ERROR_FORMATTER = new InjectionToken('rbErrorFormatter');
var DetailedError = /** @class */ (function () {
    function DetailedError(message, details) {
        this.message = message;
        this.details = details;
        this.name = 'DetailedError';
    }
    DetailedError.prototype.toString = function () {
        return this.message;
    };
    return DetailedError;
}());
export { DetailedError };
var DefaultErrorFormatter = /** @class */ (function () {
    function DefaultErrorFormatter() {
    }
    DefaultErrorFormatter.prototype.getDetails = function (error) {
        if (error instanceof DetailedError) {
            if (typeof (error.details) === 'object') {
                return JSON.stringify(error.details, null, 2);
            }
            return error.details;
        }
        if (error instanceof HttpErrorResponse) {
            if (error.error) {
                if (typeof (error.error) === 'object') {
                    return JSON.stringify(error.error, null, 2);
                }
                return String(error.error);
            }
        }
        return null;
    };
    DefaultErrorFormatter.prototype.transform = function (error) {
        if (error instanceof HttpErrorResponse) {
            var text = 'Error: ';
            if (error.message) {
                text += error.message;
            }
            return text;
        }
        if (error instanceof Error || error instanceof DetailedError) {
            return String(error);
        }
        return null;
    };
    return DefaultErrorFormatter;
}());
export { DefaultErrorFormatter };
export var DEFAULT_ERROR_FORMATTER = new DefaultErrorFormatter();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItZm9ybWF0Lm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbIm1vbGVjdWxlcy9sb2FkaW5nL2Vycm9yLWZvcm1hdC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV6RCxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQWlCLGtCQUFrQixDQUFDLENBQUM7QUFFdEY7SUFHRSx1QkFBbUIsT0FBTyxFQUFTLE9BQVE7UUFBeEIsWUFBTyxHQUFQLE9BQU8sQ0FBQTtRQUFTLFlBQU8sR0FBUCxPQUFPLENBQUM7UUFGM0MsU0FBSSxHQUFHLGVBQWUsQ0FBQztJQUd2QixDQUFDO0lBRU0sZ0NBQVEsR0FBZjtRQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQUFDLEFBVEQsSUFTQzs7QUFlRDtJQUFBO0lBaUNBLENBQUM7SUFoQ0MsMENBQVUsR0FBVixVQUFXLEtBQVU7UUFDbkIsSUFBSSxLQUFLLFlBQVksYUFBYSxFQUFFO1lBQ2xDLElBQUksT0FBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7Z0JBQ3RDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQzthQUMvQztZQUNELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztTQUN0QjtRQUNELElBQUksS0FBSyxZQUFZLGlCQUFpQixFQUFFO1lBQ3RDLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtnQkFDZixJQUFJLE9BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssUUFBUSxFQUFFO29CQUNwQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQzdDO2dCQUNELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM1QjtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQseUNBQVMsR0FBVCxVQUFVLEtBQVU7UUFDbEIsSUFBSSxLQUFLLFlBQVksaUJBQWlCLEVBQUU7WUFDdEMsSUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDO1lBQ3JCLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDakIsSUFBSSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUM7YUFDdkI7WUFDRCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsSUFBSSxLQUFLLFlBQVksS0FBSyxJQUFJLEtBQUssWUFBWSxhQUFhLEVBQUU7WUFDNUQsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFSCw0QkFBQztBQUFELENBQUMsQUFqQ0QsSUFpQ0M7O0FBRUQsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQUcsSUFBSSxxQkFBcUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcblxyXG5leHBvcnQgY29uc3QgRVJST1JfRk9STUFUVEVSID0gbmV3IEluamVjdGlvblRva2VuPEVycm9yRm9ybWF0dGVyPigncmJFcnJvckZvcm1hdHRlcicpO1xyXG5cclxuZXhwb3J0IGNsYXNzIERldGFpbGVkRXJyb3IgaW1wbGVtZW50cyBFcnJvciB7XHJcbiAgbmFtZSA9ICdEZXRhaWxlZEVycm9yJztcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIG1lc3NhZ2UsIHB1YmxpYyBkZXRhaWxzPykge1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFcnJvckZvcm1hdHRlciBleHRlbmRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIHRoZSBlcnJvciBjYW4gYmUgaGFuZGxlZC5cclxuICAgKiBJZiBudWxsIGlzIHJldHVybmVkLCB0aGUgbmV4dCBGb3JtYXR0ZXIgd2lsbCBiZSB0cmllZC5cclxuICAgKi9cclxuICB0cmFuc2Zvcm0oZXJyb3I6IGFueSk6IHN0cmluZyB8IG51bGw7XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgZGV0YWlscyBvZiBhbiBlcnJvclxyXG4gICAqL1xyXG4gIGdldERldGFpbHM/KGVycm9yOiBhbnkpOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEZWZhdWx0RXJyb3JGb3JtYXR0ZXIgaW1wbGVtZW50cyBFcnJvckZvcm1hdHRlciB7XHJcbiAgZ2V0RGV0YWlscyhlcnJvcjogYW55KTogc3RyaW5nIHtcclxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIERldGFpbGVkRXJyb3IpIHtcclxuICAgICAgaWYgKHR5cGVvZihlcnJvci5kZXRhaWxzKSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZXJyb3IuZGV0YWlscywgbnVsbCwgMik7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGVycm9yLmRldGFpbHM7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSkge1xyXG4gICAgICBpZiAoZXJyb3IuZXJyb3IpIHtcclxuICAgICAgICBpZiAodHlwZW9mKGVycm9yLmVycm9yKSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShlcnJvci5lcnJvciwgbnVsbCwgMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBTdHJpbmcoZXJyb3IuZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybShlcnJvcjogYW55KTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSkge1xyXG4gICAgICBsZXQgdGV4dCA9ICdFcnJvcjogJztcclxuICAgICAgaWYgKGVycm9yLm1lc3NhZ2UpIHtcclxuICAgICAgICB0ZXh0ICs9IGVycm9yLm1lc3NhZ2U7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRleHQ7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciB8fCBlcnJvciBpbnN0YW5jZW9mIERldGFpbGVkRXJyb3IpIHtcclxuICAgICAgcmV0dXJuIFN0cmluZyhlcnJvcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9FUlJPUl9GT1JNQVRURVIgPSBuZXcgRGVmYXVsdEVycm9yRm9ybWF0dGVyKCk7XHJcbiJdfQ==