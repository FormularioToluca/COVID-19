import * as tslib_1 from "tslib";
import { Component, Inject, Input, Optional } from '@angular/core';
import { DEFAULT_ERROR_FORMATTER, ERROR_FORMATTER } from '../error-format.model';
var ErrorFormatComponent = /** @class */ (function () {
    function ErrorFormatComponent(formatters) {
        this.opened = false;
        if (!formatters) {
            this.formatters = [DEFAULT_ERROR_FORMATTER];
        }
        else {
            this.formatters = formatters.slice();
            this.formatters.push(DEFAULT_ERROR_FORMATTER);
        }
    }
    ErrorFormatComponent.prototype.ngOnInit = function () {
        this.identifyErrorData(this.error);
    };
    ErrorFormatComponent.prototype.identifyErrorData = function (error) {
        if (this.formatters && this.formatters.length) {
            for (var i = 0; i < this.formatters.length; i++) {
                var formatter = this.formatters[i];
                var result = formatter.transform(error);
                if (result !== null) {
                    this.message = result;
                    if (formatter.getDetails) {
                        this.details = formatter.getDetails(error);
                    }
                    return result;
                }
            }
        }
        this.message = String(error);
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], ErrorFormatComponent.prototype, "error", void 0);
    ErrorFormatComponent = tslib_1.__decorate([
        Component({
            selector: 'rb-error-format',
            template: "<div class=\"error-message\">{{message}}</div>\n<a *ngIf=\"details\" href=\"javascript:\" class=\"rb-link rb-details-toggle\" [class.open]=\"opened\" (click)=\"opened=!opened\">Details</a>\n<pre *ngIf=\"opened\" class=\"error-details\">{{details}}</pre>\n",
            styles: [".error-details{word-wrap:break-word;word-break:break-all;white-space:pre-wrap}"]
        }),
        tslib_1.__param(0, Optional()), tslib_1.__param(0, Inject(ERROR_FORMATTER)),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], ErrorFormatComponent);
    return ErrorFormatComponent;
}());
export { ErrorFormatComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItZm9ybWF0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJtb2xlY3VsZXMvbG9hZGluZy9lcnJvci1mb3JtYXQvZXJyb3ItZm9ybWF0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFVLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsZUFBZSxFQUFrQixNQUFNLHVCQUF1QixDQUFDO0FBT2pHO0lBWUUsOEJBQWlELFVBQTRCO1FBTjdFLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFPYixJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDN0M7YUFBTTtZQUNMLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3JDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDL0M7SUFDSCxDQUFDO0lBRUQsdUNBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELGdEQUFpQixHQUFqQixVQUFrQixLQUFLO1FBQ3JCLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtZQUM3QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQy9DLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzFDLElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtvQkFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7b0JBQ3RCLElBQUksU0FBUyxDQUFDLFVBQVUsRUFBRTt3QkFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO3FCQUM1QztvQkFDRCxPQUFPLE1BQU0sQ0FBQztpQkFDZjthQUNGO1NBQ0Y7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBcENRO1FBQVIsS0FBSyxFQUFFOzt1REFBWTtJQUpULG9CQUFvQjtRQUxoQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLDJRQUE0Qzs7U0FFN0MsQ0FBQztRQWFhLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBOztPQVpyQyxvQkFBb0IsQ0EyQ2hDO0lBQUQsMkJBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQTNDWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdCwgSW5wdXQsIE9uSW5pdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERFRkFVTFRfRVJST1JfRk9STUFUVEVSLCBFUlJPUl9GT1JNQVRURVIsIEVycm9yRm9ybWF0dGVyIH0gZnJvbSAnLi4vZXJyb3ItZm9ybWF0Lm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncmItZXJyb3ItZm9ybWF0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Vycm9yLWZvcm1hdC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2Vycm9yLWZvcm1hdC5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEVycm9yRm9ybWF0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBwcml2YXRlIGZvcm1hdHRlcnM6IEVycm9yRm9ybWF0dGVyW107XG5cbiAgQElucHV0KCkgZXJyb3I6IGFueTtcblxuICBvcGVuZWQgPSBmYWxzZTtcblxuICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgZGV0YWlsczogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoRVJST1JfRk9STUFUVEVSKSBmb3JtYXR0ZXJzOiBFcnJvckZvcm1hdHRlcltdKSB7XG4gICAgaWYgKCFmb3JtYXR0ZXJzKSB7XG4gICAgICB0aGlzLmZvcm1hdHRlcnMgPSBbREVGQVVMVF9FUlJPUl9GT1JNQVRURVJdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZvcm1hdHRlcnMgPSBmb3JtYXR0ZXJzLnNsaWNlKCk7XG4gICAgICB0aGlzLmZvcm1hdHRlcnMucHVzaChERUZBVUxUX0VSUk9SX0ZPUk1BVFRFUik7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pZGVudGlmeUVycm9yRGF0YSh0aGlzLmVycm9yKTtcbiAgfVxuXG4gIGlkZW50aWZ5RXJyb3JEYXRhKGVycm9yKSB7XG4gICAgaWYgKHRoaXMuZm9ybWF0dGVycyAmJiB0aGlzLmZvcm1hdHRlcnMubGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZm9ybWF0dGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSB0aGlzLmZvcm1hdHRlcnNbaV07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZvcm1hdHRlci50cmFuc2Zvcm0oZXJyb3IpO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5tZXNzYWdlID0gcmVzdWx0O1xuICAgICAgICAgIGlmIChmb3JtYXR0ZXIuZ2V0RGV0YWlscykge1xuICAgICAgICAgICAgdGhpcy5kZXRhaWxzID0gZm9ybWF0dGVyLmdldERldGFpbHMoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubWVzc2FnZSA9IFN0cmluZyhlcnJvcik7XG4gIH1cblxuXG59XG4iXX0=