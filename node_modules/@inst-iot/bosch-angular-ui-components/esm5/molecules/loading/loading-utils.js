import { Subject } from 'rxjs';
import { takeUntil, tap } from 'rxjs/operators';
var LoadingEntity = /** @class */ (function () {
    function LoadingEntity(loadingStateAfterFirstSuccess) {
        if (loadingStateAfterFirstSuccess === void 0) { loadingStateAfterFirstSuccess = true; }
        this.loadingStateAfterFirstSuccess = loadingStateAfterFirstSuccess;
        this.runs = 0;
        this.loading = false;
        this.error = null;
        this.result = null;
        this.stopSubject = new Subject();
    }
    /**
     * Tracks the status of an observable
     */
    LoadingEntity.prototype.run = function (observable) {
        var _this = this;
        this.runs++;
        if (this.loadingStateAfterFirstSuccess && this.result !== null || this.result === null || this.error) {
            this.loading = true;
            this.result = null;
        }
        this.complete();
        this.error = null;
        return observable.pipe(tap(function (result) {
            _this.loading = false;
            _this.result = result;
        }, function (error) {
            _this.loading = false;
            _this.error = error;
        }, function () {
            _this.loading = false;
        }), takeUntil(this.stopSubject));
    };
    /**
     * This can complete and unsubscribe all observers
     */
    LoadingEntity.prototype.complete = function () {
        this.stopSubject.next();
    };
    LoadingEntity.prototype.reset = function () {
        this.complete();
        this.error = null;
        this.loading = false;
        this.result = null;
    };
    return LoadingEntity;
}());
export { LoadingEntity };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJtb2xlY3VsZXMvbG9hZGluZy9sb2FkaW5nLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZ0IsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFaEQ7SUFZRSx1QkFBbUIsNkJBQW9DO1FBQXBDLDhDQUFBLEVBQUEsb0NBQW9DO1FBQXBDLGtDQUE2QixHQUE3Qiw2QkFBNkIsQ0FBTztRQVZ2RCxTQUFJLEdBQUcsQ0FBQyxDQUFDO1FBRVQsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUVoQixVQUFLLEdBQVEsSUFBSSxDQUFDO1FBRWxCLFdBQU0sR0FBTSxJQUFJLENBQUM7UUFFVCxnQkFBVyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFHcEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsMkJBQUcsR0FBSCxVQUFJLFVBQXlCO1FBQTdCLGlCQW9CQztRQW5CQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWixJQUFJLElBQUksQ0FBQyw2QkFBNkIsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3BHLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ3BCO1FBQ0QsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FDcEIsR0FBRyxDQUFDLFVBQUEsTUFBTTtZQUNSLEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLEtBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3ZCLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDTixLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixLQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNyQixDQUFDLEVBQUU7WUFDRCxLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUN2QixDQUFDLENBQUMsRUFDRixTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsZ0NBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELDZCQUFLLEdBQUw7UUFDRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVILG9CQUFDO0FBQUQsQ0FBQyxBQXRERCxJQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgLCAgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmV4cG9ydCBjbGFzcyBMb2FkaW5nRW50aXR5PFQ+IHtcblxuICBydW5zID0gMDtcblxuICBsb2FkaW5nID0gZmFsc2U7XG5cbiAgZXJyb3I6IGFueSA9IG51bGw7XG5cbiAgcmVzdWx0OiBUID0gbnVsbDtcblxuICBwcml2YXRlIHN0b3BTdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbG9hZGluZ1N0YXRlQWZ0ZXJGaXJzdFN1Y2Nlc3MgPSB0cnVlKSB7XG4gIH1cblxuICAvKipcbiAgICogVHJhY2tzIHRoZSBzdGF0dXMgb2YgYW4gb2JzZXJ2YWJsZVxuICAgKi9cbiAgcnVuKG9ic2VydmFibGU6IE9ic2VydmFibGU8VD4pOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICB0aGlzLnJ1bnMrKztcbiAgICBpZiAodGhpcy5sb2FkaW5nU3RhdGVBZnRlckZpcnN0U3VjY2VzcyAmJiB0aGlzLnJlc3VsdCAhPT0gbnVsbCB8fCB0aGlzLnJlc3VsdCA9PT0gbnVsbCB8fCB0aGlzLmVycm9yKSB7XG4gICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5yZXN1bHQgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLmNvbXBsZXRlKCk7XG4gICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgcmV0dXJuIG9ic2VydmFibGUucGlwZShcbiAgICAgIHRhcChyZXN1bHQgPT4ge1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgfSksXG4gICAgICB0YWtlVW50aWwodGhpcy5zdG9wU3ViamVjdClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgY2FuIGNvbXBsZXRlIGFuZCB1bnN1YnNjcmliZSBhbGwgb2JzZXJ2ZXJzXG4gICAqL1xuICBjb21wbGV0ZSgpIHtcbiAgICB0aGlzLnN0b3BTdWJqZWN0Lm5leHQoKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuY29tcGxldGUoKTtcbiAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnJlc3VsdCA9IG51bGw7XG4gIH1cblxufVxuIl19