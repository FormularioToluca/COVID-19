import * as tslib_1 from "tslib";
import { ChildrenOutletContexts, RouterOutlet } from '@angular/router';
import { Attribute, Directive } from '@angular/core';
/**
 * Mocks the Router Outlet
 */
var TabPanelRouterOutletDirective = /** @class */ (function (_super) {
    tslib_1.__extends(TabPanelRouterOutletDirective, _super);
    function TabPanelRouterOutletDirective(_parentContexts, name) {
        var _this = _super.call(this, _parentContexts, null, null, name, null) || this;
        _this._parentContexts = _parentContexts;
        _this.__activatedRoute = null;
        _this._name = name;
        return _this;
    }
    TabPanelRouterOutletDirective.prototype.ngOnInit = function () {
        if (!this.__activated) {
            // If the outlet was not instantiated at the time the route got activated we need to populate
            // the outlet when it is initialized (ie inside a NgIf)
            var context = this._parentContexts.getContext(this._name);
            if (context && context.route) {
                if (context.attachRef) {
                    // `attachRef` is populated when there is an existing component to mount
                    this.attach(context.attachRef, context.route);
                }
                else {
                    // otherwise the component defined in the configuration is created
                    this.activateWith(context.route, context.resolver || null);
                }
            }
        }
    };
    Object.defineProperty(TabPanelRouterOutletDirective.prototype, "isActivated", {
        get: function () {
            return this.__activated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabPanelRouterOutletDirective.prototype, "component", {
        get: function () {
            if (!this.__activated) {
                throw new Error('Outlet is not activated');
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabPanelRouterOutletDirective.prototype, "activatedRoute", {
        get: function () {
            if (!this.__activated) {
                throw new Error('Outlet is not activated');
            }
            return this.__activatedRoute;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabPanelRouterOutletDirective.prototype, "activatedRouteData", {
        get: function () {
            if (this.__activatedRoute) {
                return this.__activatedRoute.snapshot.data;
            }
            return {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Called when the `RouteReuseStrategy` instructs to detach the subtree
     */
    TabPanelRouterOutletDirective.prototype.detach = function () {
        if (!this.__activated) {
            throw new Error('Outlet is not activated');
        }
        this.__activated = null;
        this.__activatedRoute = null;
        return null;
    };
    /**
     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
     */
    TabPanelRouterOutletDirective.prototype.attach = function (ref, activatedRoute) {
        this.__activated = true;
        this.__activatedRoute = activatedRoute;
        this.onActivate(activatedRoute);
    };
    TabPanelRouterOutletDirective.prototype.deactivate = function () {
        if (this.__activated) {
            this.__activated = false;
            this.__activatedRoute = null;
        }
    };
    TabPanelRouterOutletDirective.prototype.activateWith = function (activatedRoute, resolver) {
        console.log('activateWith', activatedRoute);
        if (this.isActivated) {
            throw new Error('Cannot activate an already activated outlet');
        }
        this.__activatedRoute = activatedRoute;
        this.__activated = true;
        this.onActivate(activatedRoute);
    };
    TabPanelRouterOutletDirective.prototype.onActivate = function (activatedRoute) {
    };
    TabPanelRouterOutletDirective = tslib_1.__decorate([
        Directive({
            // tslint:disable-next-line
            selector: 'rb-tab-panel-outlet'
        }),
        tslib_1.__param(1, Attribute('name')),
        tslib_1.__metadata("design:paramtypes", [ChildrenOutletContexts, String])
    ], TabPanelRouterOutletDirective);
    return TabPanelRouterOutletDirective;
}(RouterOutlet));
export { TabPanelRouterOutletDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLXBhbmVsLXJvdXRlci1vdXRsZXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGluc3QtaW90L2Jvc2NoLWFuZ3VsYXItdWktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbIm1vbGVjdWxlcy90YWItcGFuZWwvdGFiLXBhbmVsLXJvdXRlci1vdXRsZXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWtCLHNCQUFzQixFQUFRLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdGLE9BQU8sRUFBRSxTQUFTLEVBQTBDLFNBQVMsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFFaEg7O0dBRUc7QUFLSDtJQUFtRCx5REFBWTtJQUs3RCx1Q0FBb0IsZUFBdUMsRUFBcUIsSUFBWTtRQUE1RixZQUNFLGtCQUFNLGVBQWUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FFL0M7UUFIbUIscUJBQWUsR0FBZixlQUFlLENBQXdCO1FBSG5ELHNCQUFnQixHQUEwQixJQUFJLENBQUM7UUFLckQsS0FBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7O0lBQ3BCLENBQUM7SUFFRCxnREFBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDckIsNkZBQTZGO1lBQzdGLHVEQUF1RDtZQUN2RCxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUQsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFDNUIsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFO29CQUNyQix3RUFBd0U7b0JBQ3hFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQy9DO3FCQUFNO29CQUNMLGtFQUFrRTtvQkFDbEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUM7aUJBQzVEO2FBQ0Y7U0FDRjtJQUNILENBQUM7SUFFRCxzQkFBSSxzREFBVzthQUFmO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzFCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksb0RBQVM7YUFBYjtZQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7YUFDNUM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7OztPQUFBO0lBRUQsc0JBQUkseURBQWM7YUFBbEI7WUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO2FBQzVDO1lBQ0QsT0FBTyxJQUFJLENBQUMsZ0JBQWtDLENBQUM7UUFDakQsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw2REFBa0I7YUFBdEI7WUFDRSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDekIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQzthQUM1QztZQUNELE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQzs7O09BQUE7SUFFRDs7T0FFRztJQUNILDhDQUFNLEdBQU47UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7U0FDNUM7UUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsOENBQU0sR0FBTixVQUFPLEdBQXNCLEVBQUUsY0FBOEI7UUFDM0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGNBQWMsQ0FBQztRQUN2QyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxrREFBVSxHQUFWO1FBQ0UsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBRUQsb0RBQVksR0FBWixVQUFhLGNBQThCLEVBQUUsUUFBeUM7UUFDcEYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDNUMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztTQUNoRTtRQUNELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxjQUFjLENBQUM7UUFDdkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsa0RBQVUsR0FBVixVQUFXLGNBQThCO0lBQ3pDLENBQUM7SUEzRlUsNkJBQTZCO1FBSnpDLFNBQVMsQ0FBQztZQUNULDJCQUEyQjtZQUMzQixRQUFRLEVBQUUscUJBQXFCO1NBQ2hDLENBQUM7UUFNOEQsbUJBQUEsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO2lEQUExQyxzQkFBc0I7T0FMaEQsNkJBQTZCLENBNEZ6QztJQUFELG9DQUFDO0NBQUEsQUE1RkQsQ0FBbUQsWUFBWSxHQTRGOUQ7U0E1RlksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIENoaWxkcmVuT3V0bGV0Q29udGV4dHMsIERhdGEsIFJvdXRlck91dGxldCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDb21wb25lbnRSZWYsIERpcmVjdGl2ZSwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBNb2NrcyB0aGUgUm91dGVyIE91dGxldFxyXG4gKi9cclxuQERpcmVjdGl2ZSh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgc2VsZWN0b3I6ICdyYi10YWItcGFuZWwtb3V0bGV0J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVGFiUGFuZWxSb3V0ZXJPdXRsZXREaXJlY3RpdmUgZXh0ZW5kcyBSb3V0ZXJPdXRsZXQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XHJcbiAgcHJpdmF0ZSBfX2FjdGl2YXRlZDogYm9vbGVhbjtcclxuICBwcml2YXRlIF9fYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9wYXJlbnRDb250ZXh0czogQ2hpbGRyZW5PdXRsZXRDb250ZXh0cywgQEF0dHJpYnV0ZSgnbmFtZScpIG5hbWU6IHN0cmluZykge1xyXG4gICAgc3VwZXIoX3BhcmVudENvbnRleHRzLCBudWxsLCBudWxsLCBuYW1lLCBudWxsKTtcclxuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuX19hY3RpdmF0ZWQpIHtcclxuICAgICAgLy8gSWYgdGhlIG91dGxldCB3YXMgbm90IGluc3RhbnRpYXRlZCBhdCB0aGUgdGltZSB0aGUgcm91dGUgZ290IGFjdGl2YXRlZCB3ZSBuZWVkIHRvIHBvcHVsYXRlXHJcbiAgICAgIC8vIHRoZSBvdXRsZXQgd2hlbiBpdCBpcyBpbml0aWFsaXplZCAoaWUgaW5zaWRlIGEgTmdJZilcclxuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuX3BhcmVudENvbnRleHRzLmdldENvbnRleHQodGhpcy5fbmFtZSk7XHJcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQucm91dGUpIHtcclxuICAgICAgICBpZiAoY29udGV4dC5hdHRhY2hSZWYpIHtcclxuICAgICAgICAgIC8vIGBhdHRhY2hSZWZgIGlzIHBvcHVsYXRlZCB3aGVuIHRoZXJlIGlzIGFuIGV4aXN0aW5nIGNvbXBvbmVudCB0byBtb3VudFxyXG4gICAgICAgICAgdGhpcy5hdHRhY2goY29udGV4dC5hdHRhY2hSZWYsIGNvbnRleHQucm91dGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBvdGhlcndpc2UgdGhlIGNvbXBvbmVudCBkZWZpbmVkIGluIHRoZSBjb25maWd1cmF0aW9uIGlzIGNyZWF0ZWRcclxuICAgICAgICAgIHRoaXMuYWN0aXZhdGVXaXRoKGNvbnRleHQucm91dGUsIGNvbnRleHQucmVzb2x2ZXIgfHwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgaXNBY3RpdmF0ZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fX2FjdGl2YXRlZDtcclxuICB9XHJcblxyXG4gIGdldCBjb21wb25lbnQoKTogT2JqZWN0IHtcclxuICAgIGlmICghdGhpcy5fX2FjdGl2YXRlZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ091dGxldCBpcyBub3QgYWN0aXZhdGVkJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldCBhY3RpdmF0ZWRSb3V0ZSgpOiBBY3RpdmF0ZWRSb3V0ZSB7XHJcbiAgICBpZiAoIXRoaXMuX19hY3RpdmF0ZWQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPdXRsZXQgaXMgbm90IGFjdGl2YXRlZCcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX19hY3RpdmF0ZWRSb3V0ZSBhcyBBY3RpdmF0ZWRSb3V0ZTtcclxuICB9XHJcblxyXG4gIGdldCBhY3RpdmF0ZWRSb3V0ZURhdGEoKTogRGF0YSB7XHJcbiAgICBpZiAodGhpcy5fX2FjdGl2YXRlZFJvdXRlKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9fYWN0aXZhdGVkUm91dGUuc25hcHNob3QuZGF0YTtcclxuICAgIH1cclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIHRoZSBgUm91dGVSZXVzZVN0cmF0ZWd5YCBpbnN0cnVjdHMgdG8gZGV0YWNoIHRoZSBzdWJ0cmVlXHJcbiAgICovXHJcbiAgZGV0YWNoKCk6IENvbXBvbmVudFJlZjxhbnk+IHtcclxuICAgIGlmICghdGhpcy5fX2FjdGl2YXRlZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ091dGxldCBpcyBub3QgYWN0aXZhdGVkJyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9fYWN0aXZhdGVkID0gbnVsbDtcclxuICAgIHRoaXMuX19hY3RpdmF0ZWRSb3V0ZSA9IG51bGw7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxlZCB3aGVuIHRoZSBgUm91dGVSZXVzZVN0cmF0ZWd5YCBpbnN0cnVjdHMgdG8gcmUtYXR0YWNoIGEgcHJldmlvdXNseSBkZXRhY2hlZCBzdWJ0cmVlXHJcbiAgICovXHJcbiAgYXR0YWNoKHJlZjogQ29tcG9uZW50UmVmPGFueT4sIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSkge1xyXG4gICAgdGhpcy5fX2FjdGl2YXRlZCA9IHRydWU7XHJcbiAgICB0aGlzLl9fYWN0aXZhdGVkUm91dGUgPSBhY3RpdmF0ZWRSb3V0ZTtcclxuICAgIHRoaXMub25BY3RpdmF0ZShhY3RpdmF0ZWRSb3V0ZSk7XHJcbiAgfVxyXG5cclxuICBkZWFjdGl2YXRlKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX19hY3RpdmF0ZWQpIHtcclxuICAgICAgdGhpcy5fX2FjdGl2YXRlZCA9IGZhbHNlO1xyXG4gICAgICB0aGlzLl9fYWN0aXZhdGVkUm91dGUgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWN0aXZhdGVXaXRoKGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSwgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB8IG51bGwpIHtcclxuICAgIGNvbnNvbGUubG9nKCdhY3RpdmF0ZVdpdGgnLCBhY3RpdmF0ZWRSb3V0ZSk7XHJcbiAgICBpZiAodGhpcy5pc0FjdGl2YXRlZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBhY3RpdmF0ZSBhbiBhbHJlYWR5IGFjdGl2YXRlZCBvdXRsZXQnKTtcclxuICAgIH1cclxuICAgIHRoaXMuX19hY3RpdmF0ZWRSb3V0ZSA9IGFjdGl2YXRlZFJvdXRlO1xyXG4gICAgdGhpcy5fX2FjdGl2YXRlZCA9IHRydWU7XHJcbiAgICB0aGlzLm9uQWN0aXZhdGUoYWN0aXZhdGVkUm91dGUpO1xyXG4gIH1cclxuXHJcbiAgb25BY3RpdmF0ZShhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcclxuICB9XHJcbn1cclxuIl19