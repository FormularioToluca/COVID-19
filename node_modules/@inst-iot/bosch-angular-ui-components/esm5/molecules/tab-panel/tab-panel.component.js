import * as tslib_1 from "tslib";
import { Component, ContentChildren, ElementRef, EventEmitter, HostListener, Inject, InjectionToken, Input, Optional, Output, QueryList, Renderer2, ViewChild } from '@angular/core';
import { TabPanelItemDirective } from './tab-panel-item.directive';
export var TAB_PANEL_RESOLVER = new InjectionToken('TabPanelResolver');
/**
 * A very powerful tab panel component.
 * It can handle dynamic tabs, the tab bar can accept all kind of types. See: TabPanelItemType
 * When you provide `outletName`, you should provide your router config with such an entry to enable the outlet routing:
 * children: [{path: ':id', outlet: 'yourOutletName', component: TabPanelComponent}]
 */
var TabPanelComponent = /** @class */ (function () {
    function TabPanelComponent(renderer, element, tabPanelResolver) {
        this.renderer = renderer;
        this.element = element;
        this.tabPanelResolver = tabPanelResolver;
        this.tabChanged = new EventEmitter();
        this.tabItems = [];
        /**
         * Whether tabs that were opened once, should be kept in the DOM
         * when switching away from them. Or should they be removed from
         * DOM when switched to another tab?
         */
        this.destroyTabs = false;
        this.renderHiddenTabs = false;
        this.lastHeight = 0;
    }
    Object.defineProperty(TabPanelComponent.prototype, "tabItemsQuery", {
        set: function (tabItems) {
            var _this = this;
            this.tabItems = tabItems.toArray();
            if (this.outletName) {
                this.tabItems.forEach(function (tabItem) {
                    var link = { outlets: {} };
                    link.outlets[_this.outletName] = [tabItem.id];
                    tabItem.routerLink = [link];
                });
            }
            if (this.tabItems.length && this.tabItems.every(function (tabItem) { return !tabItem.active; })) {
                if (this.tab) {
                    this.showTab(this.tab);
                }
                else {
                    this.showFirstTab();
                }
            }
            this.tabItemsLeft = this.tabItems.filter(function (tabItem) { return tabItem.position === 'left'; });
            this.tabItemsCenter = this.tabItems.filter(function (tabItem) { return tabItem.position === 'center'; });
            this.tabItemsRight = this.tabItems.filter(function (tabItem) { return tabItem.position === 'right'; });
        },
        enumerable: true,
        configurable: true
    });
    TabPanelComponent.prototype.ngAfterViewInit = function () {
        this.onResize();
    };
    TabPanelComponent.prototype.ngOnChanges = function (changes) {
        if (changes.tab && changes.tab.currentValue && !changes.tab.firstChange) {
            var found = this.tabItems.find(function (tabItem) { return tabItem.id === changes.tab.currentValue; });
            if (found && !found.active) {
                this.showTab(changes.tab.currentValue);
            }
        }
    };
    TabPanelComponent.prototype.ngDoCheck = function () {
        if (this.element && this.element.nativeElement.classList.contains('full-width')) {
            this.onResize();
        }
    };
    TabPanelComponent.prototype.showFirstTab = function () {
        var firstItem = this.tabItems.find(function (tabItem) { return tabItem.type === 'tab'; });
        if (firstItem) {
            this.showTab(firstItem.id);
        }
    };
    /**
     * Can be used to show a certain tab.
     */
    TabPanelComponent.prototype.showTab = function (id) {
        var _this = this;
        var found = this.tabItems.find(function (tabItem) { return tabItem.id === id; });
        if (!found) {
            // wait a tick
            setTimeout(function () {
                _this.deactivateAndShowTab(id);
            });
        }
        else {
            this.deactivateAndShowTab(id);
        }
    };
    TabPanelComponent.prototype.deactivateAndShowTab = function (id) {
        var _this = this;
        this.tabItems.forEach(function (tabItem) {
            if (tabItem.active && tabItem.id !== id) {
                tabItem.hide();
            }
            else if (tabItem.id === id) {
                tabItem.show();
                _this.tabChanged.next(id);
            }
        });
    };
    TabPanelComponent.prototype.onResize = function () {
        if (this.panelPlaceholder && this.tabPanel) {
            var tabPanelHeight = this.tabPanel.nativeElement.offsetHeight;
            if (Math.abs(this.lastHeight - tabPanelHeight) > 2) {
                this.lastHeight = tabPanelHeight;
                this.renderer.setStyle(this.panelPlaceholder.nativeElement, 'height', tabPanelHeight + 'px');
            }
        }
    };
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], TabPanelComponent.prototype, "tabChanged", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], TabPanelComponent.prototype, "tab", void 0);
    tslib_1.__decorate([
        ViewChild('panelPlaceholder', { static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], TabPanelComponent.prototype, "panelPlaceholder", void 0);
    tslib_1.__decorate([
        ViewChild('tabPanel', { static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], TabPanelComponent.prototype, "tabPanel", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], TabPanelComponent.prototype, "destroyTabs", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], TabPanelComponent.prototype, "renderHiddenTabs", void 0);
    tslib_1.__decorate([
        ContentChildren(TabPanelItemDirective),
        tslib_1.__metadata("design:type", QueryList),
        tslib_1.__metadata("design:paramtypes", [QueryList])
    ], TabPanelComponent.prototype, "tabItemsQuery", null);
    tslib_1.__decorate([
        HostListener('window:resize'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], TabPanelComponent.prototype, "onResize", null);
    TabPanelComponent = tslib_1.__decorate([
        Component({
            selector: 'rb-tab-panel',
            template: "<div class=\"tab-panel-container\">\r\n  <div class=\"tab-panel limit\" #tabPanel>\r\n    <rb-navigation type=\"tab\" class=\"tab-panel-left\">\r\n      <ng-container *ngFor=\"let tabItem of tabItemsLeft; template: tabTpl\"></ng-container>\r\n    </rb-navigation>\r\n    <rb-navigation type=\"tab\" class=\"tab-panel-center\">\r\n      <ng-container *ngFor=\"let tabItem of tabItemsCenter; template: tabTpl\"></ng-container>\r\n    </rb-navigation>\r\n    <rb-navigation type=\"tab\" class=\"tab-panel-right\">\r\n      <ng-container *ngFor=\"let tabItem of tabItemsRight; template: tabTpl\"></ng-container>\r\n    </rb-navigation>\r\n  </div>\r\n</div>\r\n<div class=\"tab-panel-placeholder\" #panelPlaceholder></div>\r\n\r\n<ng-container *ngFor=\"let tabItem of tabItems\">\r\n  <div class=\"tab-content\" *ngIf=\"destroyTabs && tabItem.active || !destroyTabs && tabItem.shown || renderHiddenTabs\"\r\n       [hidden]=\"!tabItem.active\">\r\n    <ng-container *ngTemplateOutlet=\"tabItem.templateRef; context: tabItem\"></ng-container>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #tabTpl let-tabItem>\r\n  <ng-container *ngIf=\"tabItem.type === 'dropdown'\">\r\n    <a href=\"javascript:\" class=\"rb-dropdown-toggle\"\r\n       [class.active]=\"tabItem.active\"\r\n       [rbDropdown]=\"tabItem.templateRef\"\r\n       [position]=\"tabItem.position\"\r\n       [autoClose]=\"tabItem.autoClose\">\r\n      <ng-container *ngIf=\"tabItem.titleStr\">\r\n        {{tabItem.titleStr}}\r\n      </ng-container>\r\n      <ng-container *ngIf=\"tabItem.titleTpl\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n      </ng-container>\r\n    </a>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'content'\">\r\n    <ng-container *ngIf=\"tabItem.titleStr\">\r\n      {{tabItem.titleStr}}\r\n    </ng-container>\r\n    <ng-container *ngIf=\"tabItem.titleTpl\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n    </ng-container>\r\n    <ng-container\r\n      *ngTemplateOutlet=\"tabItem.templateRef; context: tabItem\"></ng-container>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'custom'\">\r\n    <ng-container *ngIf=\"tabItem.titleStr\">\r\n      {{tabItem.titleStr}}\r\n    </ng-container>\r\n    <ng-container *ngIf=\"tabItem.titleTpl\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'tab'\">\r\n    <a href=\"javascript:\" [class.active]=\"tabItem.active\" (click)=\"showTab(tabItem.id)\">\r\n      <ng-container *ngIf=\"tabItem.titleStr\">\r\n        {{tabItem.titleStr}}\r\n      </ng-container>\r\n      <ng-container *ngIf=\"tabItem.titleTpl\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n      </ng-container>\r\n    </a>\r\n  </ng-container>\r\n  <ng-container *ngIf=\"tabItem.type === 'text'\">\r\n    <span class=\"text-item\">\r\n      <ng-container *ngIf=\"tabItem.titleStr\">\r\n        {{tabItem.titleStr}}\r\n      </ng-container>\r\n      <ng-container *ngIf=\"tabItem.titleTpl\">\r\n        <ng-container\r\n          *ngTemplateOutlet=\"tabItem.titleTpl; context: tabItem\"></ng-container>\r\n      </ng-container>\r\n    </span>\r\n  </ng-container>\r\n</ng-template>\r\n"
        }),
        tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(TAB_PANEL_RESOLVER)),
        tslib_1.__metadata("design:paramtypes", [Renderer2,
            ElementRef, Object])
    ], TabPanelComponent);
    return TabPanelComponent;
}());
export { TabPanelComponent };
//# sourceMappingURL=data:application/json;base64,