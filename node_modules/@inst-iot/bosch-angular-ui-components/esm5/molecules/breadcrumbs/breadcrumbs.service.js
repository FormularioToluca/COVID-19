import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { filter } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
/**
 * When you define routes, add data: {title: 'myTitle'} to define what is displayed in the breadcrumbs.
 * If the title property is not enough for you to determine what should be displayed, you can
 * just extend this service and provide your own. This is probably necessary when you use some i18n tooling.
 *
 * You need to provide this service to use the rb-breadcrumbs component.
 * e.g. BreadcrumbsModule.forRoot()
 */
var BreadcrumbsService = /** @class */ (function () {
    function BreadcrumbsService(router, activeRoute) {
        this.router = router;
        this.activeRoute = activeRoute;
        this.initAutomatedRouteRecognition();
    }
    BreadcrumbsService.prototype.initAutomatedRouteRecognition = function () {
        var _this = this;
        this.router.events.pipe(filter(function (event) { return event instanceof NavigationEnd; }))
            .subscribe(function () { return _this.refresh(); });
        this.breadcrumbs = new BehaviorSubject(this.identifyRoute());
    };
    BreadcrumbsService.prototype.refresh = function () {
        this.breadcrumbs.next(this.identifyRoute());
    };
    BreadcrumbsService.prototype.identifyRoute = function () {
        var breadcrumbs = [];
        var path = ['/'];
        // Traverse route snapshots to get the breadcrumbs path
        for (var route = this.activeRoute.snapshot; route; route = route.firstChild) {
            if (route.outlet === 'primary') {
                path.push.apply(path, tslib_1.__spread(route.url.map(function (segment) { return segment.path; })));
            }
            var element = this.getBreadCrumbElement(route, path);
            if (element) {
                breadcrumbs.push(element);
            }
        }
        return breadcrumbs;
    };
    BreadcrumbsService.prototype.getBreadCrumbElement = function (route, path) {
        var element = {
            urlSegments: path.slice(0),
            title: '...'
        };
        if (route.outlet === 'primary' && route.data && route.data['title']) {
            element.title = typeof (route.data['title']) === 'function' ? route.data['title'](route) : route.data['title'];
            return element;
        }
        return null;
    };
    BreadcrumbsService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [Router,
            ActivatedRoute])
    ], BreadcrumbsService);
    return BreadcrumbsService;
}());
export { BreadcrumbsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpbnN0LWlvdC9ib3NjaC1hbmd1bGFyLXVpLWNvbXBvbmVudHMvIiwic291cmNlcyI6WyJtb2xlY3VsZXMvYnJlYWRjcnVtYnMvYnJlYWRjcnVtYnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUEwQixhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEcsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFPdkM7Ozs7Ozs7R0FPRztBQUVIO0lBSUUsNEJBQXNCLE1BQWMsRUFDZCxXQUEyQjtRQUQzQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsZ0JBQVcsR0FBWCxXQUFXLENBQWdCO1FBQy9DLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFUywwREFBNkIsR0FBdkM7UUFBQSxpQkFJQztRQUhDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLFlBQVksYUFBYSxFQUE5QixDQUE4QixDQUFDLENBQUM7YUFDckUsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsT0FBTyxFQUFFLEVBQWQsQ0FBYyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBZSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQsb0NBQU8sR0FBUDtRQUNFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCwwQ0FBYSxHQUFiO1FBQ0UsSUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLElBQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsdURBQXVEO1FBQ3ZELEtBQUssSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQzNFLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxJQUFJLE9BQVQsSUFBSSxtQkFBUyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLE9BQU8sQ0FBQyxJQUFJLEVBQVosQ0FBWSxDQUFDLEdBQUU7YUFDdEQ7WUFDRCxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZELElBQUksT0FBTyxFQUFFO2dCQUNYLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDM0I7U0FDRjtRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFUyxpREFBb0IsR0FBOUIsVUFBK0IsS0FBNkIsRUFBRSxJQUFjO1FBQzFFLElBQU0sT0FBTyxHQUFHO1lBQ2QsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzFCLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQztRQUNGLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ25FLE9BQU8sQ0FBQyxLQUFLLEdBQUcsT0FBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUcsT0FBTyxPQUFPLENBQUM7U0FDaEI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUE3Q1Usa0JBQWtCO1FBRDlCLFVBQVUsRUFBRTtpREFLbUIsTUFBTTtZQUNELGNBQWM7T0FMdEMsa0JBQWtCLENBK0M5QjtJQUFELHlCQUFDO0NBQUEsQUEvQ0QsSUErQ0M7U0EvQ1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIE5hdmlnYXRpb25FbmQsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBCcmVhZGNydW1iIHtcbiAgdGl0bGU6IHN0cmluZztcbiAgdXJsU2VnbWVudHM6IEFycmF5PHN0cmluZz47XG59XG5cbi8qKlxuICogV2hlbiB5b3UgZGVmaW5lIHJvdXRlcywgYWRkIGRhdGE6IHt0aXRsZTogJ215VGl0bGUnfSB0byBkZWZpbmUgd2hhdCBpcyBkaXNwbGF5ZWQgaW4gdGhlIGJyZWFkY3J1bWJzLlxuICogSWYgdGhlIHRpdGxlIHByb3BlcnR5IGlzIG5vdCBlbm91Z2ggZm9yIHlvdSB0byBkZXRlcm1pbmUgd2hhdCBzaG91bGQgYmUgZGlzcGxheWVkLCB5b3UgY2FuXG4gKiBqdXN0IGV4dGVuZCB0aGlzIHNlcnZpY2UgYW5kIHByb3ZpZGUgeW91ciBvd24uIFRoaXMgaXMgcHJvYmFibHkgbmVjZXNzYXJ5IHdoZW4geW91IHVzZSBzb21lIGkxOG4gdG9vbGluZy5cbiAqXG4gKiBZb3UgbmVlZCB0byBwcm92aWRlIHRoaXMgc2VydmljZSB0byB1c2UgdGhlIHJiLWJyZWFkY3J1bWJzIGNvbXBvbmVudC5cbiAqIGUuZy4gQnJlYWRjcnVtYnNNb2R1bGUuZm9yUm9vdCgpXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCcmVhZGNydW1ic1NlcnZpY2Uge1xuXG4gIHB1YmxpYyBicmVhZGNydW1iczogQmVoYXZpb3JTdWJqZWN0PEJyZWFkY3J1bWJbXT47XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHJvdXRlcjogUm91dGVyLFxuICAgICAgICAgICAgICBwcm90ZWN0ZWQgYWN0aXZlUm91dGU6IEFjdGl2YXRlZFJvdXRlKSB7XG4gICAgdGhpcy5pbml0QXV0b21hdGVkUm91dGVSZWNvZ25pdGlvbigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGluaXRBdXRvbWF0ZWRSb3V0ZVJlY29nbml0aW9uKCkge1xuICAgIHRoaXMucm91dGVyLmV2ZW50cy5waXBlKGZpbHRlcihldmVudCA9PiBldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLnJlZnJlc2goKSk7XG4gICAgdGhpcy5icmVhZGNydW1icyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8QnJlYWRjcnVtYltdPih0aGlzLmlkZW50aWZ5Um91dGUoKSk7XG4gIH1cblxuICByZWZyZXNoKCkge1xuICAgIHRoaXMuYnJlYWRjcnVtYnMubmV4dCh0aGlzLmlkZW50aWZ5Um91dGUoKSk7XG4gIH1cblxuICBpZGVudGlmeVJvdXRlKCkge1xuICAgIGNvbnN0IGJyZWFkY3J1bWJzID0gW107XG4gICAgY29uc3QgcGF0aCA9IFsnLyddO1xuICAgIC8vIFRyYXZlcnNlIHJvdXRlIHNuYXBzaG90cyB0byBnZXQgdGhlIGJyZWFkY3J1bWJzIHBhdGhcbiAgICBmb3IgKGxldCByb3V0ZSA9IHRoaXMuYWN0aXZlUm91dGUuc25hcHNob3Q7IHJvdXRlOyByb3V0ZSA9IHJvdXRlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGlmIChyb3V0ZS5vdXRsZXQgPT09ICdwcmltYXJ5Jykge1xuICAgICAgICBwYXRoLnB1c2goLi4ucm91dGUudXJsLm1hcChzZWdtZW50ID0+IHNlZ21lbnQucGF0aCkpO1xuICAgICAgfVxuICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZ2V0QnJlYWRDcnVtYkVsZW1lbnQocm91dGUsIHBhdGgpO1xuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgYnJlYWRjcnVtYnMucHVzaChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJyZWFkY3J1bWJzO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldEJyZWFkQ3J1bWJFbGVtZW50KHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBwYXRoOiBzdHJpbmdbXSk6IEJyZWFkY3J1bWIge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB7XG4gICAgICB1cmxTZWdtZW50czogcGF0aC5zbGljZSgwKSxcbiAgICAgIHRpdGxlOiAnLi4uJ1xuICAgIH07XG4gICAgaWYgKHJvdXRlLm91dGxldCA9PT0gJ3ByaW1hcnknICYmIHJvdXRlLmRhdGEgJiYgcm91dGUuZGF0YVsndGl0bGUnXSkge1xuICAgICAgZWxlbWVudC50aXRsZSA9IHR5cGVvZihyb3V0ZS5kYXRhWyd0aXRsZSddKSA9PT0gJ2Z1bmN0aW9uJyA/IHJvdXRlLmRhdGFbJ3RpdGxlJ10ocm91dGUpIDogcm91dGUuZGF0YVsndGl0bGUnXTtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG59XG4iXX0=